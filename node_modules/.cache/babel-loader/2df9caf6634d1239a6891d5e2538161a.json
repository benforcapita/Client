{"ast":null,"code":"\"use strict\";\n\nconst asciiWhitespaceRe = /^[\\t\\n\\f\\r ]$/;\nexports.asciiWhitespaceRe = asciiWhitespaceRe; // https://infra.spec.whatwg.org/#ascii-lowercase\n\nexports.asciiLowercase = s => {\n  return s.replace(/[A-Z]/g, l => l.toLowerCase());\n}; // https://infra.spec.whatwg.org/#strip-newlines\n\n\nexports.stripNewlines = s => {\n  return s.replace(/[\\n\\r]+/g, \"\");\n}; // https://infra.spec.whatwg.org/#strip-leading-and-trailing-ascii-whitespace\n\n\nexports.stripLeadingAndTrailingASCIIWhitespace = s => {\n  return s.replace(/^[ \\t\\n\\f\\r]+/, \"\").replace(/[ \\t\\n\\f\\r]+$/, \"\");\n}; // https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace\n\n\nexports.stripAndCollapseASCIIWhitespace = s => {\n  return s.replace(/[ \\t\\n\\f\\r]+/g, \" \").replace(/^[ \\t\\n\\f\\r]+/, \"\").replace(/[ \\t\\n\\f\\r]+$/, \"\");\n}; // https://html.spec.whatwg.org/multipage/infrastructure.html#valid-simple-colour\n\n\nexports.isValidSimpleColor = s => {\n  return /^#[a-fA-F\\d]{6}$/.test(s);\n}; // https://infra.spec.whatwg.org/#ascii-case-insensitive\n\n\nexports.asciiCaseInsensitiveMatch = (a, b) => {\n  if (a.length !== b.length) {\n    return false;\n  }\n\n  for (let i = 0; i < a.length; ++i) {\n    if ((a.charCodeAt(i) | 32) !== (b.charCodeAt(i) | 32)) {\n      return false;\n    }\n  }\n\n  return true;\n}; // https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#valid-floating-point-number\n\n\nconst floatingPointNumRe = /^-?(?:\\d+|\\d*\\.\\d+)(?:[eE][-+]?\\d+)?$/;\n\nexports.isValidFloatingPointNumber = str => floatingPointNumRe.test(str); // https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#rules-for-parsing-floating-point-number-values\n\n\nexports.parseFloatingPointNumber = str => {\n  const parsed = parseFloat(str);\n  return isFinite(parsed) ? parsed : NaN;\n}; // https://infra.spec.whatwg.org/#split-on-ascii-whitespace\n\n\nexports.splitOnASCIIWhitespace = str => {\n  let position = 0;\n  const tokens = [];\n\n  while (position < str.length && asciiWhitespaceRe.test(str[position])) {\n    position++;\n  }\n\n  if (position === str.length) {\n    return tokens;\n  }\n\n  while (position < str.length) {\n    const start = position;\n\n    while (position < str.length && !asciiWhitespaceRe.test(str[position])) {\n      position++;\n    }\n\n    tokens.push(str.slice(start, position));\n\n    while (position < str.length && asciiWhitespaceRe.test(str[position])) {\n      position++;\n    }\n  }\n\n  return tokens;\n}; // https://infra.spec.whatwg.org/#split-on-commas\n\n\nexports.splitOnCommas = str => {\n  let position = 0;\n  const tokens = [];\n\n  while (position < str.length) {\n    let start = position;\n\n    while (position < str.length && str[position] !== \",\") {\n      position++;\n    }\n\n    let end = position;\n\n    while (start < str.length && asciiWhitespaceRe.test(str[start])) {\n      start++;\n    }\n\n    while (end > start && asciiWhitespaceRe.test(str[end - 1])) {\n      end--;\n    }\n\n    tokens.push(str.slice(start, end));\n\n    if (position < str.length) {\n      position++;\n    }\n  }\n\n  return tokens;\n};","map":null,"metadata":{},"sourceType":"script"}