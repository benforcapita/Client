{"ast":null,"code":"\"use strict\";\n\nconst idlUtils = require(\"../generated/utils\");\n\nconst _require = require(\"../helpers/traversal\"),\n      closest = _require.closest;\n\nconst _require2 = require(\"../helpers/form-controls\"),\n      isDisabled = _require2.isDisabled,\n      isSubmittable = _require2.isSubmittable,\n      isButton = _require2.isButton,\n      normalizeToCRLF = _require2.normalizeToCRLF;\n\nconst Blob = require(\"../generated/Blob.js\");\n\nconst File = require(\"../generated/File.js\");\n\nconst conversions = require(\"webidl-conversions\");\n\nexports.implementation = class FormDataImpl {\n  constructor(args) {\n    this._entries = [];\n\n    if (args[0] !== undefined) {\n      this._entries = constructTheFormDataSet(args[0]);\n    }\n  }\n\n  append(name, value, filename) {\n    const entry = createAnEntry(name, value, filename);\n\n    this._entries.push(entry);\n  }\n\n  delete(name) {\n    this._entries = this._entries.filter(entry => entry.name !== name);\n  }\n\n  get(name) {\n    const foundEntry = this._entries.find(entry => entry.name === name);\n\n    return foundEntry !== undefined ? foundEntry.value : null;\n  }\n\n  getAll(name) {\n    return this._entries.filter(entry => entry.name === name).map(entry => entry.value);\n  }\n\n  has(name) {\n    return this._entries.findIndex(entry => entry.name === name) !== -1;\n  }\n\n  set(name, value, filename) {\n    const entry = createAnEntry(name, value, filename);\n\n    const foundIndex = this._entries.findIndex(e => e.name === name);\n\n    if (foundIndex !== -1) {\n      this._entries[foundIndex] = entry;\n      this._entries = this._entries.filter((e, i) => e.name !== name || i === foundIndex);\n    } else {\n      this._entries.push(entry);\n    }\n  }\n\n  *[Symbol.iterator]() {\n    for (const entry of this._entries) {\n      yield [entry.name, idlUtils.tryWrapperForImpl(entry.value)];\n    }\n  }\n\n};\n\nfunction createAnEntry(name, value, filename) {\n  const entry = {\n    name\n  }; // https://github.com/whatwg/xhr/issues/75\n\n  if (Blob.isImpl(value) && !File.isImpl(value)) {\n    const oldValue = value;\n    value = File.createImpl([[], \"blob\", {\n      type: oldValue.type\n    }]); // \"representing the same bytes\"\n\n    value._buffer = oldValue._buffer;\n  }\n\n  if (File.isImpl(value) && filename !== undefined) {\n    const oldValue = value;\n    value = File.createImpl([[], filename, // spec makes no mention of `lastModified`; assume it is inherited\n    // (Chrome's behavior)\n    {\n      type: oldValue.type,\n      lastModified: oldValue.lastModified\n    }]); // \"representing the same bytes\"\n\n    value._buffer = oldValue._buffer;\n  }\n\n  entry.value = value;\n  return entry;\n}\n\nfunction constructTheFormDataSet(form, submitter) {\n  // https://html.spec.whatwg.org/multipage/forms.html#constructing-form-data-set\n  const controls = form.elements.filter(isSubmittable); // submittable is a subset of listed\n\n  const formDataSet = [];\n\n  for (const fieldWrapper of controls) {\n    const field = fieldWrapper;\n\n    if (closest(field, \"datalist\") !== null) {\n      continue;\n    }\n\n    if (isDisabled(field)) {\n      continue;\n    }\n\n    if (isButton(field) && field !== submitter) {\n      continue;\n    }\n\n    if (field.type === \"checkbox\" && field._checkedness === false) {\n      continue;\n    }\n\n    if (field.type === \"radio\" && field._checkedness === false) {\n      continue;\n    }\n\n    if (field.type !== \"image\" && (!field.hasAttribute(\"name\") || field.getAttribute(\"name\") === \"\")) {\n      continue;\n    }\n\n    if (field.localName === \"object\") {\n      // in jsdom, no objects are \"using a plugin\"\n      continue;\n    }\n\n    const type = field.type; // Omit special processing of <input type=\"image\"> since so far we don't actually ever pass submitter\n\n    const nameAttr = field.getAttribute(\"name\");\n    const name = nameAttr === null ? \"\" : nameAttr;\n\n    if (field.localName === \"select\") {\n      for (const option of field.options) {\n        if (option._selectedness === true && !isDisabled(field)) {\n          formDataSet.push({\n            name,\n            value: option.value,\n            type\n          });\n        }\n      }\n    } else if (field.localName === \"input\" && (type === \"checkbox\" || type === \"radio\")) {\n      const value = field.hasAttribute(\"value\") ? field.getAttribute(\"value\") : \"on\";\n      formDataSet.push({\n        name,\n        value,\n        type\n      });\n    } else if (type === \"file\") {\n      for (let i = 0; i < field.files.length; ++i) {\n        formDataSet.push({\n          name,\n          value: field.files.item(i),\n          type\n        });\n      }\n\n      if (field.files.length === 0) {\n        formDataSet.push({\n          name,\n          value: \"\",\n          type: \"application/octet-stream\"\n        });\n      }\n    }\n    /* skip plugins */\n    else {\n        formDataSet.push({\n          name,\n          value: field._getValue(),\n          type\n        });\n      }\n\n    const dirname = field.getAttribute(\"dirname\");\n\n    if (dirname !== null && dirname !== \"\") {\n      const dir = \"ltr\"; // jsdom does not (yet?) implement actual directionality\n\n      formDataSet.push({\n        name: dirname,\n        value: dir,\n        type: \"direction\"\n      });\n    }\n  }\n\n  for (const entry of formDataSet) {\n    entry.name = conversions.USVString(normalizeToCRLF(entry.name));\n\n    if (entry.type !== \"file\" && entry.type !== \"textarea\") {\n      entry.value = normalizeToCRLF(entry.value);\n    }\n\n    if (entry.type !== \"file\") {\n      entry.value = conversions.USVString(entry.value);\n    }\n  }\n\n  return formDataSet;\n}","map":null,"metadata":{},"sourceType":"script"}