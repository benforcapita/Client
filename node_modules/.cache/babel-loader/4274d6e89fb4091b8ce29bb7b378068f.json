{"ast":null,"code":"\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\n\nconst utils = require(\"./utils.js\");\n\nconst impl = utils.implSymbol;\n\nconst NavigatorID = require(\"./NavigatorID.js\");\n\nconst NavigatorLanguage = require(\"./NavigatorLanguage.js\");\n\nconst NavigatorOnLine = require(\"./NavigatorOnLine.js\");\n\nconst NavigatorCookies = require(\"./NavigatorCookies.js\");\n\nconst NavigatorPlugins = require(\"./NavigatorPlugins.js\");\n\nconst NavigatorConcurrentHardware = require(\"./NavigatorConcurrentHardware.js\");\n\nfunction Navigator() {\n  throw new TypeError(\"Illegal constructor\");\n}\n\nObject.defineProperty(Navigator, \"prototype\", {\n  value: Navigator.prototype,\n  writable: false,\n  enumerable: false,\n  configurable: false\n});\n\nNavigator.prototype.javaEnabled = function javaEnabled() {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  return this[impl].javaEnabled();\n};\n\nObject.defineProperty(Navigator.prototype, \"appCodeName\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"appCodeName\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Navigator.prototype, \"appName\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"appName\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Navigator.prototype, \"appVersion\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"appVersion\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Navigator.prototype, \"platform\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"platform\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Navigator.prototype, \"product\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"product\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Navigator.prototype, \"productSub\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"productSub\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Navigator.prototype, \"userAgent\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"userAgent\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Navigator.prototype, \"vendor\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"vendor\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Navigator.prototype, \"vendorSub\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"vendorSub\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Navigator.prototype, \"language\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"language\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Navigator.prototype, \"languages\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"languages\"]);\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Navigator.prototype, \"onLine\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"onLine\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Navigator.prototype, \"cookieEnabled\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"cookieEnabled\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Navigator.prototype, \"hardwareConcurrency\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"hardwareConcurrency\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Navigator.prototype, Symbol.toStringTag, {\n  value: \"Navigator\",\n  writable: false,\n  enumerable: false,\n  configurable: true\n});\nconst iface = {\n  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`\n  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as\n  // implementing this mixin interface.\n  _mixedIntoPredicates: [],\n\n  is(obj) {\n    if (obj) {\n      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {\n        return true;\n      }\n\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(obj)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n\n  isImpl(obj) {\n    if (obj) {\n      if (obj instanceof Impl.implementation) {\n        return true;\n      }\n\n      const wrapper = utils.wrapperForImpl(obj);\n\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(wrapper)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n\n  convert(obj, {\n    context = \"The provided value\"\n  } = {}) {\n    if (module.exports.is(obj)) {\n      return utils.implForWrapper(obj);\n    }\n\n    throw new TypeError(\"\".concat(context, \" is not of type 'Navigator'.\"));\n  },\n\n  create(constructorArgs, privateData) {\n    let obj = Object.create(Navigator.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n\n  createImpl(constructorArgs, privateData) {\n    let obj = Object.create(Navigator.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return utils.implForWrapper(obj);\n  },\n\n  _internalSetup(obj) {},\n\n  setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n    privateData.wrapper = obj;\n\n    this._internalSetup(obj);\n\n    Object.defineProperty(obj, impl, {\n      value: new Impl.implementation(constructorArgs, privateData),\n      writable: false,\n      enumerable: false,\n      configurable: true\n    });\n    obj[impl][utils.wrapperSymbol] = obj;\n\n    if (Impl.init) {\n      Impl.init(obj[impl], privateData);\n    }\n\n    return obj;\n  },\n\n  interface: Navigator,\n  expose: {\n    Window: {\n      Navigator\n    }\n  }\n}; // iface\n\nmodule.exports = iface;\n\nNavigatorID._mixedIntoPredicates.push(module.exports.is);\n\nNavigatorLanguage._mixedIntoPredicates.push(module.exports.is);\n\nNavigatorOnLine._mixedIntoPredicates.push(module.exports.is);\n\nNavigatorCookies._mixedIntoPredicates.push(module.exports.is);\n\nNavigatorPlugins._mixedIntoPredicates.push(module.exports.is);\n\nNavigatorConcurrentHardware._mixedIntoPredicates.push(module.exports.is);\n\nconst Impl = require(\"../navigator/Navigator-impl.js\");","map":null,"metadata":{},"sourceType":"script"}