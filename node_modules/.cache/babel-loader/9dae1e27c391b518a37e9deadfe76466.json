{"ast":null,"code":"\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\n\nconst utils = require(\"./utils.js\");\n\nconst impl = utils.implSymbol;\n\nfunction DOMStringMap() {\n  throw new TypeError(\"Illegal constructor\");\n}\n\nObject.defineProperty(DOMStringMap, \"prototype\", {\n  value: DOMStringMap.prototype,\n  writable: false,\n  enumerable: false,\n  configurable: false\n});\nObject.defineProperty(DOMStringMap.prototype, Symbol.toStringTag, {\n  value: \"DOMStringMap\",\n  writable: false,\n  enumerable: false,\n  configurable: true\n});\nconst iface = {\n  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`\n  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as\n  // implementing this mixin interface.\n  _mixedIntoPredicates: [],\n\n  is(obj) {\n    if (obj) {\n      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {\n        return true;\n      }\n\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(obj)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n\n  isImpl(obj) {\n    if (obj) {\n      if (obj instanceof Impl.implementation) {\n        return true;\n      }\n\n      const wrapper = utils.wrapperForImpl(obj);\n\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(wrapper)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n\n  convert(obj, {\n    context = \"The provided value\"\n  } = {}) {\n    if (module.exports.is(obj)) {\n      return utils.implForWrapper(obj);\n    }\n\n    throw new TypeError(\"\".concat(context, \" is not of type 'DOMStringMap'.\"));\n  },\n\n  create(constructorArgs, privateData) {\n    let obj = Object.create(DOMStringMap.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n\n  createImpl(constructorArgs, privateData) {\n    let obj = Object.create(DOMStringMap.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return utils.implForWrapper(obj);\n  },\n\n  _internalSetup(obj) {},\n\n  setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n    privateData.wrapper = obj;\n\n    this._internalSetup(obj);\n\n    Object.defineProperty(obj, impl, {\n      value: new Impl.implementation(constructorArgs, privateData),\n      writable: false,\n      enumerable: false,\n      configurable: true\n    });\n    obj = new Proxy(obj, {\n      get(target, P, receiver) {\n        if (typeof P === \"symbol\") {\n          return Reflect.get(target, P, receiver);\n        }\n\n        const desc = this.getOwnPropertyDescriptor(target, P);\n\n        if (desc === undefined) {\n          const parent = Object.getPrototypeOf(target);\n\n          if (parent === null) {\n            return undefined;\n          }\n\n          return Reflect.get(target, P, receiver);\n        }\n\n        if (!desc.get && !desc.set) {\n          return desc.value;\n        }\n\n        const getter = desc.get;\n\n        if (getter === undefined) {\n          return undefined;\n        }\n\n        return Reflect.apply(getter, receiver, []);\n      },\n\n      has(target, P) {\n        if (typeof P === \"symbol\") {\n          return Reflect.has(target, P);\n        }\n\n        const desc = this.getOwnPropertyDescriptor(target, P);\n\n        if (desc !== undefined) {\n          return true;\n        }\n\n        const parent = Object.getPrototypeOf(target);\n\n        if (parent !== null) {\n          return Reflect.has(parent, P);\n        }\n\n        return false;\n      },\n\n      ownKeys(target) {\n        const keys = new Set();\n\n        for (const key of target[impl][utils.supportedPropertyNames]) {\n          if (!utils.hasOwn(target, key)) {\n            keys.add(\"\".concat(key));\n          }\n        }\n\n        for (const key of Reflect.ownKeys(target)) {\n          keys.add(key);\n        }\n\n        return [...keys];\n      },\n\n      getOwnPropertyDescriptor(target, P) {\n        if (typeof P === \"symbol\") {\n          return Reflect.getOwnPropertyDescriptor(target, P);\n        }\n\n        let ignoreNamedProps = false;\n        const namedValue = target[impl][utils.namedGet](P);\n\n        if (namedValue !== undefined && !utils.hasOwn(target, P) && !ignoreNamedProps) {\n          return {\n            writable: true,\n            enumerable: true,\n            configurable: true,\n            value: utils.tryWrapperForImpl(namedValue)\n          };\n        }\n\n        return Reflect.getOwnPropertyDescriptor(target, P);\n      },\n\n      set(target, P, V, receiver) {\n        if (typeof P === \"symbol\") {\n          return Reflect.set(target, P, V, receiver);\n        }\n\n        if (target === receiver) {\n          if (typeof P === \"string\" && !utils.isArrayIndexPropName(P)) {\n            let namedValue = V;\n            namedValue = conversions[\"DOMString\"](namedValue, {\n              context: \"Failed to set the '\" + P + \"' property on 'DOMStringMap': The provided value\"\n            });\n            const creating = !(target[impl][utils.namedGet](P) !== undefined);\n\n            if (creating) {\n              target[impl][utils.namedSetNew](P, namedValue);\n            } else {\n              target[impl][utils.namedSetExisting](P, namedValue);\n            }\n\n            return true;\n          }\n        }\n\n        let ownDesc;\n\n        if (ownDesc === undefined) {\n          ownDesc = Reflect.getOwnPropertyDescriptor(target, P);\n        }\n\n        if (ownDesc === undefined) {\n          const parent = Reflect.getPrototypeOf(target);\n\n          if (parent !== null) {\n            return Reflect.set(parent, P, V, receiver);\n          }\n\n          ownDesc = {\n            writable: true,\n            enumerable: true,\n            configurable: true,\n            value: undefined\n          };\n        }\n\n        if (!ownDesc.writable) {\n          return false;\n        }\n\n        if (!utils.isObject(receiver)) {\n          return false;\n        }\n\n        const existingDesc = Reflect.getOwnPropertyDescriptor(receiver, P);\n        let valueDesc;\n\n        if (existingDesc !== undefined) {\n          if (existingDesc.get || existingDesc.set) {\n            return false;\n          }\n\n          if (!existingDesc.writable) {\n            return false;\n          }\n\n          valueDesc = {\n            value: V\n          };\n        } else {\n          valueDesc = {\n            writable: true,\n            enumerable: true,\n            configurable: true,\n            value: V\n          };\n        }\n\n        return Reflect.defineProperty(receiver, P, valueDesc);\n      },\n\n      defineProperty(target, P, desc) {\n        if (typeof P === \"symbol\") {\n          return Reflect.defineProperty(target, P, desc);\n        }\n\n        if (desc.get || desc.set) {\n          return false;\n        }\n\n        let namedValue = desc.value;\n        namedValue = conversions[\"DOMString\"](namedValue, {\n          context: \"Failed to set the '\" + P + \"' property on 'DOMStringMap': The provided value\"\n        });\n        const creating = !(target[impl][utils.namedGet](P) !== undefined);\n\n        if (creating) {\n          target[impl][utils.namedSetNew](P, namedValue);\n        } else {\n          target[impl][utils.namedSetExisting](P, namedValue);\n        }\n\n        return true;\n      },\n\n      deleteProperty(target, P) {\n        if (typeof P === \"symbol\") {\n          return Reflect.deleteProperty(target, P);\n        }\n\n        if (target[impl][utils.namedGet](P) !== undefined && !utils.hasOwn(target, P)) {\n          target[impl][utils.namedDelete](P);\n          return true;\n        }\n\n        return Reflect.deleteProperty(target, P);\n      },\n\n      preventExtensions() {\n        return false;\n      }\n\n    });\n    obj[impl][utils.wrapperSymbol] = obj;\n\n    if (Impl.init) {\n      Impl.init(obj[impl], privateData);\n    }\n\n    return obj;\n  },\n\n  interface: DOMStringMap,\n  expose: {\n    Window: {\n      DOMStringMap\n    }\n  }\n}; // iface\n\nmodule.exports = iface;\n\nconst Impl = require(\"../nodes/DOMStringMap-impl.js\");","map":null,"metadata":{},"sourceType":"script"}