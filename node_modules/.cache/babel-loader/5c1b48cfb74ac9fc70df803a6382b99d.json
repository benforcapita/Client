{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/benblum/Desktop/Code/webApp/client/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nconst parse5 = require(\"parse5\");\n\nconst sax = require(\"sax\");\n\nconst attributes = require(\"../living/attributes\");\n\nconst DocumentType = require(\"../living/generated/DocumentType\");\n\nconst JSDOMParse5Adapter = require(\"./parse5-adapter-parsing\");\n\nconst _require = require(\"../living/helpers/namespaces\"),\n      HTML_NS = _require.HTML_NS; // Horrible monkey-patch to implement https://github.com/inikulin/parse5/issues/237\n\n\nconst OpenElementStack = require(\"parse5/lib/parser/open_element_stack\");\n\nconst originalPop = OpenElementStack.prototype.pop;\n\nOpenElementStack.prototype.pop = function (...args) {\n  const before = this.items[this.stackTop];\n  originalPop.apply(this, args);\n\n  if (before._poppedOffStackOfOpenElements) {\n    before._poppedOffStackOfOpenElements();\n  }\n};\n\nconst originalPush = OpenElementStack.prototype.push;\n\nOpenElementStack.prototype.push = function (...args) {\n  originalPush.apply(this, args);\n  const after = this.items[this.stackTop];\n\n  if (after._pushedOnStackOfOpenElements) {\n    after._pushedOnStackOfOpenElements();\n  }\n};\n\nmodule.exports = class HTMLToDOM {\n  constructor(parsingMode) {\n    this.parser = parsingMode === \"xml\" ? sax : parse5;\n  }\n\n  appendToNode(html, node) {\n    html = String(html);\n    return this._doParse(html, true, node);\n  }\n\n  appendToDocument(html, documentImpl) {\n    html = String(html);\n    return this._doParse(html, false, documentImpl, documentImpl._parseOptions);\n  }\n\n  _doParse(...args) {\n    return this.parser === parse5 ? this._parseWithParse5(...args) : this._parseWithSax(...args);\n  }\n\n  _parseWithParse5(html, isFragment, contextNode, options = {}) {\n    const adapter = new JSDOMParse5Adapter(contextNode._ownerDocument || contextNode);\n    options.treeAdapter = adapter;\n\n    if (isFragment) {\n      const fragment = this.parser.parseFragment(contextNode, html, options);\n\n      if (contextNode._templateContents) {\n        contextNode._templateContents.appendChild(fragment);\n      } else {\n        contextNode.appendChild(fragment);\n      }\n    } else {\n      this.parser.parse(html, options);\n    }\n\n    return contextNode;\n  }\n\n  _parseWithSax(html, isFragment, contextNode) {\n    const SaxParser = this.parser.parser;\n    const parser = new SaxParser(\n    /* strict = */\n    true, {\n      xmlns: true,\n      strictEntities: true\n    });\n    parser.noscript = false;\n    parser.looseCase = \"toString\";\n    const openStack = [contextNode];\n\n    parser.ontext = text => {\n      setChildForSax(openStack[openStack.length - 1], {\n        type: \"text\",\n        data: text\n      });\n    };\n\n    parser.oncdata = cdata => {\n      setChildForSax(openStack[openStack.length - 1], {\n        type: \"cdata\",\n        data: cdata\n      });\n    };\n\n    parser.onopentag = arg => {\n      const attrs = Object.keys(arg.attributes).map(key => {\n        const rawAttribute = arg.attributes[key];\n        let prefix = rawAttribute.prefix;\n        let localName = rawAttribute.local;\n\n        if (prefix === \"xmlns\" && localName === \"\") {\n          // intended weirdness in node-sax, see https://github.com/isaacs/sax-js/issues/165\n          localName = prefix;\n          prefix = null;\n        }\n\n        if (prefix === \"\") {\n          prefix = null;\n        }\n\n        const namespace = rawAttribute.uri === \"\" ? null : rawAttribute.uri;\n        return {\n          name: rawAttribute.name,\n          value: rawAttribute.value,\n          prefix,\n          localName,\n          namespace\n        };\n      });\n      const tag = {\n        type: \"tag\",\n        name: arg.local,\n        prefix: arg.prefix,\n        namespace: arg.uri,\n        attributes: attrs\n      };\n\n      if (arg.local === \"script\" && arg.uri === HTML_NS) {\n        openStack.push(tag);\n      } else {\n        const elem = setChildForSax(openStack[openStack.length - 1], tag);\n        openStack.push(elem);\n      }\n    };\n\n    parser.onclosetag = () => {\n      const elem = openStack.pop();\n\n      if (elem.constructor.name === \"Object\") {\n        // we have an empty script tag\n        setChildForSax(openStack[openStack.length - 1], elem);\n      }\n    };\n\n    parser.onscript = scriptText => {\n      const tag = openStack.pop();\n      tag.children = [{\n        type: \"text\",\n        data: scriptText\n      }];\n      const elem = setChildForSax(openStack[openStack.length - 1], tag);\n      openStack.push(elem);\n    };\n\n    parser.oncomment = comment => {\n      setChildForSax(openStack[openStack.length - 1], {\n        type: \"comment\",\n        data: comment\n      });\n    };\n\n    parser.onprocessinginstruction = pi => {\n      setChildForSax(openStack[openStack.length - 1], {\n        type: \"directive\",\n        name: \"?\" + pi.name,\n        data: \"?\" + pi.name + \" \" + pi.body + \"?\"\n      });\n    };\n\n    parser.ondoctype = dt => {\n      setChildForSax(openStack[openStack.length - 1], {\n        type: \"directive\",\n        name: \"!doctype\",\n        data: \"!doctype \" + dt\n      });\n      const entityMatcher = /<!ENTITY ([^ ]+) \"([^\"]+)\">/g;\n      let result;\n\n      while (result = entityMatcher.exec(dt)) {\n        const _result = result,\n              _result2 = _slicedToArray(_result, 3),\n              name = _result2[1],\n              value = _result2[2];\n\n        if (!(name in parser.ENTITIES)) {\n          parser.ENTITIES[name] = value;\n        }\n      }\n    };\n\n    parser.onerror = err => {\n      throw err;\n    };\n\n    parser.write(html).close();\n  }\n\n};\n\nfunction setChildForSax(parentImpl, node) {\n  const currentDocument = parentImpl && parentImpl._ownerDocument || parentImpl;\n  let newNode;\n  let isTemplateContents = false;\n\n  switch (node.type) {\n    case \"tag\":\n    case \"script\":\n    case \"style\":\n      newNode = currentDocument._createElementWithCorrectElementInterface(node.name, node.namespace);\n      newNode._prefix = node.prefix || null;\n      newNode._namespaceURI = node.namespace || null;\n      break;\n\n    case \"root\":\n      // If we are in <template> then add all children to the parent's _templateContents; skip this virtual root node.\n      if (parentImpl.tagName === \"TEMPLATE\" && parentImpl._namespaceURI === HTML_NS) {\n        newNode = parentImpl._templateContents;\n        isTemplateContents = true;\n      }\n\n      break;\n\n    case \"text\":\n      // HTML entities should already be decoded by the parser, so no need to decode them\n      newNode = currentDocument.createTextNode(node.data);\n      break;\n\n    case \"cdata\":\n      newNode = currentDocument.createCDATASection(node.data);\n      break;\n\n    case \"comment\":\n      newNode = currentDocument.createComment(node.data);\n      break;\n\n    case \"directive\":\n      if (node.name[0] === \"?\" && node.name.toLowerCase() !== \"?xml\") {\n        const data = node.data.slice(node.name.length + 1, -1);\n        newNode = currentDocument.createProcessingInstruction(node.name.substring(1), data);\n      } else if (node.name.toLowerCase() === \"!doctype\") {\n        newNode = parseDocType(currentDocument, \"<\" + node.data + \">\");\n      }\n\n      break;\n  }\n\n  if (!newNode) {\n    return null;\n  }\n\n  if (node.attributes) {\n    for (const a of node.attributes) {\n      attributes.setAttributeValue(newNode, a.localName, a.value, a.prefix, a.namespace);\n    }\n  }\n\n  if (node.children) {\n    for (let c = 0; c < node.children.length; c++) {\n      setChildForSax(newNode, node.children[c]);\n    }\n  }\n\n  if (!isTemplateContents) {\n    if (parentImpl._templateContents) {\n      // Setting innerHTML on a <template>\n      parentImpl._templateContents.appendChild(newNode);\n    } else {\n      parentImpl.appendChild(newNode);\n    }\n  }\n\n  return newNode;\n}\n\nconst HTML5_DOCTYPE = /<!doctype html>/i;\nconst PUBLIC_DOCTYPE = /<!doctype\\s+([^\\s]+)\\s+public\\s+\"([^\"]+)\"\\s+\"([^\"]+)\"/i;\nconst SYSTEM_DOCTYPE = /<!doctype\\s+([^\\s]+)\\s+system\\s+\"([^\"]+)\"/i;\n\nfunction parseDocType(doc, html) {\n  if (HTML5_DOCTYPE.test(html)) {\n    return createDocumentTypeInternal(doc, \"html\", \"\", \"\");\n  }\n\n  const publicPieces = PUBLIC_DOCTYPE.exec(html);\n\n  if (publicPieces) {\n    return createDocumentTypeInternal(doc, publicPieces[1], publicPieces[2], publicPieces[3]);\n  }\n\n  const systemPieces = SYSTEM_DOCTYPE.exec(html);\n\n  if (systemPieces) {\n    return createDocumentTypeInternal(doc, systemPieces[1], \"\", systemPieces[2]);\n  } // Shouldn't get here (the parser shouldn't let us know about invalid doctypes), but our logic likely isn't\n  // real-world perfect, so let's fallback.\n\n\n  return createDocumentTypeInternal(doc, \"html\", \"\", \"\");\n}\n\nfunction createDocumentTypeInternal(ownerDocument, name, publicId, systemId) {\n  return DocumentType.createImpl([], {\n    ownerDocument,\n    name,\n    publicId,\n    systemId\n  });\n}","map":null,"metadata":{},"sourceType":"script"}