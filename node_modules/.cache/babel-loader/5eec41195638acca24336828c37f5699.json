{"ast":null,"code":"\"use strict\";\n\nconst CharacterDataImpl = require(\"./CharacterData-impl\").implementation;\n\nconst _require = require(\"../helpers/internal-constants\"),\n      domSymbolTree = _require.domSymbolTree;\n\nconst DOMException = require(\"domexception\");\n\nconst NODE_TYPE = require(\"../node-type\");\n\nclass TextImpl extends CharacterDataImpl {\n  constructor(args, privateData) {\n    super(args, privateData);\n    this.nodeType = NODE_TYPE.TEXT_NODE;\n  }\n\n  splitText(offset) {\n    offset >>>= 0;\n    const length = this.length;\n\n    if (offset > length) {\n      throw new DOMException(\"The index is not in the allowed range.\", \"IndexSizeError\");\n    }\n\n    const count = length - offset;\n    const newData = this.substringData(offset, count);\n\n    const newNode = this._ownerDocument.createTextNode(newData);\n\n    const parent = domSymbolTree.parent(this);\n\n    if (parent !== null) {\n      parent.insertBefore(newNode, this.nextSibling);\n    }\n\n    this.replaceData(offset, count, \"\");\n    return newNode; // TODO: range stuff\n  }\n\n  get wholeText() {\n    let wholeText = this.textContent;\n    let next;\n    let current = this;\n\n    while ((next = domSymbolTree.previousSibling(current)) && next.nodeType === NODE_TYPE.TEXT_NODE) {\n      wholeText = next.textContent + wholeText;\n      current = next;\n    }\n\n    current = this;\n\n    while ((next = domSymbolTree.nextSibling(current)) && next.nodeType === NODE_TYPE.TEXT_NODE) {\n      wholeText += next.textContent;\n      current = next;\n    }\n\n    return wholeText;\n  }\n\n}\n\nmodule.exports = {\n  implementation: TextImpl\n};","map":null,"metadata":{},"sourceType":"script"}