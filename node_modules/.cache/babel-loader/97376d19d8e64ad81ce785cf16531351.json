{"ast":null,"code":"\"use strict\";\n\nconst _require = require(\"../helpers/create-event-accessor\"),\n      createEventAccessor = _require.createEventAccessor;\n\nconst events = new Set([// WindowEventHandlers\n\"afterprint\", \"beforeprint\", \"beforeunload\", \"hashchange\", \"languagechange\", \"message\", \"messageerror\", \"offline\", \"online\", \"pagehide\", \"pageshow\", \"popstate\", \"rejectionhandled\", \"storage\", \"unhandledrejection\", \"unload\", // inherited and overridden\n\"blur\", \"error\", \"focus\", \"load\", \"resize\", \"scroll\"]); // This class builds on GlobalEventHandlers, which must be mixed in first.\n\nclass WindowEventHandlersImpl {\n  _proxyWindowEventsToWindow() {\n    // We're a <body> or <frameset>, so we need to proxy these specific events to the Window (if it exists)\n    this._getEventHandlerTarget = event => {\n      if (events.has(event)) {\n        return this.ownerDocument.defaultView || null;\n      }\n\n      return this;\n    };\n  }\n\n}\n\nfor (const event of events) {\n  createEventAccessor(WindowEventHandlersImpl.prototype, event);\n}\n\nmodule.exports = {\n  implementation: WindowEventHandlersImpl\n};","map":null,"metadata":{},"sourceType":"script"}