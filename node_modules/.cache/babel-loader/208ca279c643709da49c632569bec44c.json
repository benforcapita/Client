{"ast":null,"code":"\"use strict\";\n\nexports.implementation = class ValidityStateImpl {\n  constructor(element, state = {}) {\n    this._element = element;\n    this._state = state;\n  }\n\n  get badInput() {\n    return this._failsConstraint(\"badInput\");\n  } // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#suffering-from-a-custom-error\n\n\n  get customError() {\n    return this._element._customValidityErrorMessage !== \"\";\n  }\n\n  get patternMismatch() {\n    return this._failsConstraint(\"patternMismatch\");\n  }\n\n  get rangeOverflow() {\n    return this._failsConstraint(\"rangeOverflow\");\n  }\n\n  get rangeUnderflow() {\n    return this._failsConstraint(\"rangeUnderflow\");\n  }\n\n  get stepMismatch() {\n    return this._failsConstraint(\"stepMismatch\");\n  }\n\n  get tooLong() {\n    return this._failsConstraint(\"tooLong\");\n  }\n\n  get tooShort() {\n    return this._failsConstraint(\"tooShort\");\n  }\n\n  get typeMismatch() {\n    return this._failsConstraint(\"typeMismatch\");\n  }\n\n  get valueMissing() {\n    return this._failsConstraint(\"valueMissing\");\n  }\n\n  _failsConstraint(method) {\n    const validationMethod = this._state[method];\n\n    if (validationMethod) {\n      return this._element.willValidate && validationMethod();\n    }\n\n    return false;\n  }\n\n  get valid() {\n    return !(this.badInput || this.valueMissing || this.customError || this.patternMismatch || this.rangeOverflow || this.rangeUnderflow || this.stepMismatch || this.tooLong || this.tooShort || this.typeMismatch);\n  }\n\n};","map":null,"metadata":{},"sourceType":"script"}