{"ast":null,"code":"\"use strict\"; // TODO: use String.prototype.padStart instead when Node.js v8+ is required.\n\nconst leftPad = require(\"left-pad\");\n\nfunction isLeapYear(year) {\n  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;\n} // https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#number-of-days-in-month-month-of-year-year\n\n\nconst daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\nfunction numberOfDaysInMonthOfYear(month, year) {\n  if (month === 2 && isLeapYear(year)) {\n    return 29;\n  }\n\n  return daysInMonth[month - 1];\n}\n\nconst monthRe = /^([0-9]{4,})-([0-9]{2})$/; // https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#parse-a-month-string\n\nfunction parseMonthString(str) {\n  const matches = monthRe.exec(str);\n\n  if (!matches) {\n    return null;\n  }\n\n  const year = Number(matches[1]);\n\n  if (year <= 0) {\n    return null;\n  }\n\n  const month = Number(matches[2]);\n\n  if (month < 1 || month > 12) {\n    return null;\n  }\n\n  return {\n    year,\n    month\n  };\n} // https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#valid-month-string\n\n\nfunction isValidMonthString(str) {\n  return parseMonthString(str) !== null;\n}\n\nfunction serializeMonth({\n  year,\n  month\n}) {\n  const yearStr = leftPad(\"\".concat(year), 4, \"0\");\n  const monthStr = leftPad(\"\".concat(month), 2, \"0\");\n  return \"\".concat(yearStr, \"-\").concat(monthStr);\n}\n\nconst dateRe = /^([0-9]{4,})-([0-9]{2})-([0-9]{2})$/; // https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#parse-a-date-string\n\nfunction parseDateString(str) {\n  const matches = dateRe.exec(str);\n\n  if (!matches) {\n    return null;\n  }\n\n  const year = Number(matches[1]);\n\n  if (year <= 0) {\n    return null;\n  }\n\n  const month = Number(matches[2]);\n\n  if (month < 1 || month > 12) {\n    return null;\n  }\n\n  const day = Number(matches[3]);\n\n  if (day < 1 || day > numberOfDaysInMonthOfYear(month, year)) {\n    return null;\n  }\n\n  return {\n    year,\n    month,\n    day\n  };\n} // https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#valid-date-string\n\n\nfunction isValidDateString(str) {\n  return parseDateString(str) !== null;\n}\n\nfunction serializeDate(date) {\n  const dayStr = leftPad(\"\".concat(date.day), 2, \"0\");\n  return \"\".concat(serializeMonth(date), \"-\").concat(dayStr);\n}\n\nconst yearlessDateRe = /^(?:--)?([0-9]{2})-([0-9]{2})$/; // https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#parse-a-yearless-date-string\n\nfunction parseYearlessDateString(str) {\n  const matches = yearlessDateRe.exec(str);\n\n  if (!matches) {\n    return null;\n  }\n\n  const month = Number(matches[1]);\n\n  if (month < 1 || month > 12) {\n    return null;\n  }\n\n  const day = Number(matches[2]);\n\n  if (day < 1 || day > numberOfDaysInMonthOfYear(month, 4)) {\n    return null;\n  }\n\n  return {\n    month,\n    day\n  };\n} // https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#valid-yearless-date-string\n\n\nfunction isValidYearlessDateString(str) {\n  return parseYearlessDateString(str) !== null;\n}\n\nfunction serializeYearlessDate({\n  month,\n  day\n}) {\n  const monthStr = leftPad(\"\".concat(month), 2, \"0\");\n  const dayStr = leftPad(\"\".concat(day), 2, \"0\");\n  return \"\".concat(monthStr, \"-\").concat(dayStr);\n}\n\nconst timeRe = /^([0-9]{2}):([0-9]{2})(?::([0-9]{2}(?:\\.([0-9]{1,3}))?))?$/; // https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#parse-a-time-string\n\nfunction parseTimeString(str) {\n  const matches = timeRe.exec(str);\n\n  if (!matches) {\n    return null;\n  }\n\n  const hour = Number(matches[1]);\n\n  if (hour < 0 || hour > 23) {\n    return null;\n  }\n\n  const minute = Number(matches[2]);\n\n  if (minute < 0 || minute > 59) {\n    return null;\n  }\n\n  const second = matches[3] !== undefined ? Math.trunc(Number(matches[3])) : 0;\n\n  if (second < 0 || second >= 60) {\n    return null;\n  }\n\n  const millisecond = matches[4] !== undefined ? Number(matches[4]) : 0;\n  return {\n    hour,\n    minute,\n    second,\n    millisecond\n  };\n} // https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#valid-time-string\n\n\nfunction isValidTimeString(str) {\n  return parseTimeString(str) !== null;\n}\n\nfunction serializeTime({\n  hour,\n  minute,\n  second,\n  millisecond\n}) {\n  const hourStr = leftPad(\"\".concat(hour), 2, \"0\");\n  const minuteStr = leftPad(\"\".concat(minute), 2, \"0\");\n\n  if (millisecond === 0) {\n    return \"\".concat(hourStr, \":\").concat(minuteStr);\n  }\n\n  const secondStr = leftPad(second, 2, \"0\");\n  const millisecondStr = leftPad(millisecond, 3, \"0\");\n  return \"\".concat(hourStr, \":\").concat(minuteStr, \":\").concat(secondStr, \".\").concat(millisecondStr);\n} // https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#parse-a-local-date-and-time-string\n\n\nfunction parseLocalDateAndTimeString(str, normalized = false) {\n  let separatorIdx = str.indexOf(\"T\");\n\n  if (separatorIdx < 0 && !normalized) {\n    separatorIdx = str.indexOf(\" \");\n  }\n\n  if (separatorIdx < 0) {\n    return null;\n  }\n\n  const date = parseDateString(str.slice(0, separatorIdx));\n\n  if (date === null) {\n    return null;\n  }\n\n  const time = parseTimeString(str.slice(separatorIdx + 1));\n\n  if (time === null) {\n    return null;\n  }\n\n  return {\n    date,\n    time\n  };\n} // https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#valid-local-date-and-time-string\n\n\nfunction isValidLocalDateAndTimeString(str) {\n  return parseLocalDateAndTimeString(str) !== null;\n} // https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#valid-normalised-local-date-and-time-string\n\n\nfunction isValidNormalizedLocalDateAndTimeString(str) {\n  return parseLocalDateAndTimeString(str, true) !== null;\n}\n\nfunction serializeNormalizedDateAndTime({\n  date,\n  time\n}) {\n  return \"\".concat(serializeDate(date), \"T\").concat(serializeTime(time));\n} // https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#week-number-of-the-last-day\n// https://stackoverflow.com/a/18538272/1937836\n\n\nfunction weekNumberOfLastDay(year) {\n  const jan1 = new Date(year, 0);\n  return jan1.getDay() === 4 || isLeapYear(year) && jan1.getDay() === 3 ? 53 : 52;\n}\n\nconst weekRe = /^([0-9]{4,5})-W([0-9]{2})$/; // https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#parse-a-week-string\n\nfunction parseWeekString(str) {\n  const matches = weekRe.exec(str);\n\n  if (!matches) {\n    return null;\n  }\n\n  const year = Number(matches[1]);\n\n  if (year <= 0) {\n    return null;\n  }\n\n  const week = Number(matches[2]);\n\n  if (week < 1 || week > weekNumberOfLastDay(year)) {\n    return null;\n  }\n\n  return {\n    year,\n    week\n  };\n} // https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#valid-week-string\n\n\nfunction isValidWeekString(str) {\n  return parseWeekString(str) !== null;\n}\n\nfunction serializeWeek({\n  year,\n  week\n}) {\n  const yearStr = leftPad(\"\".concat(year), 4, \"0\");\n  const weekStr = leftPad(\"\".concat(week), 2, \"0\");\n  return \"\".concat(yearStr, \"-W\").concat(weekStr);\n}\n\nmodule.exports = {\n  numberOfDaysInMonthOfYear,\n  parseMonthString,\n  isValidMonthString,\n  serializeMonth,\n  parseDateString,\n  isValidDateString,\n  serializeDate,\n  parseYearlessDateString,\n  isValidYearlessDateString,\n  serializeYearlessDate,\n  parseTimeString,\n  isValidTimeString,\n  serializeTime,\n  parseLocalDateAndTimeString,\n  isValidLocalDateAndTimeString,\n  isValidNormalizedLocalDateAndTimeString,\n  serializeNormalizedDateAndTime,\n  weekNumberOfLastDay,\n  parseWeekString,\n  isValidWeekString,\n  serializeWeek\n};","map":null,"metadata":{},"sourceType":"script"}