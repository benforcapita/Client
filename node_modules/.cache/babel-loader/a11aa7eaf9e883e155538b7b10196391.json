{"ast":null,"code":"\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\n\nconst utils = require(\"./utils.js\");\n\nconst convertEventInit = require(\"./EventInit.js\").convert;\n\nconst impl = utils.implSymbol;\n\nfunction Event(type) {\n  if (new.target === undefined) {\n    throw new TypeError(\"Failed to construct 'Event'. Please use the 'new' operator; this constructor \" + \"cannot be called as a function.\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to construct 'Event': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  const args = [];\n  {\n    let curArg = arguments[0];\n    curArg = conversions[\"DOMString\"](curArg, {\n      context: \"Failed to construct 'Event': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  {\n    let curArg = arguments[1];\n    curArg = convertEventInit(curArg, {\n      context: \"Failed to construct 'Event': parameter 2\"\n    });\n    args.push(curArg);\n  }\n  iface.setup(this, args);\n}\n\nObject.defineProperty(Event, \"prototype\", {\n  value: Event.prototype,\n  writable: false,\n  enumerable: false,\n  configurable: false\n});\n\nEvent.prototype.stopPropagation = function stopPropagation() {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  return this[impl].stopPropagation();\n};\n\nEvent.prototype.stopImmediatePropagation = function stopImmediatePropagation() {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  return this[impl].stopImmediatePropagation();\n};\n\nEvent.prototype.preventDefault = function preventDefault() {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  return this[impl].preventDefault();\n};\n\nEvent.prototype.initEvent = function initEvent(type) {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'initEvent' on 'Event': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  const args = [];\n  {\n    let curArg = arguments[0];\n    curArg = conversions[\"DOMString\"](curArg, {\n      context: \"Failed to execute 'initEvent' on 'Event': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  {\n    let curArg = arguments[1];\n\n    if (curArg !== undefined) {\n      curArg = conversions[\"boolean\"](curArg, {\n        context: \"Failed to execute 'initEvent' on 'Event': parameter 2\"\n      });\n    } else {\n      curArg = false;\n    }\n\n    args.push(curArg);\n  }\n  {\n    let curArg = arguments[2];\n\n    if (curArg !== undefined) {\n      curArg = conversions[\"boolean\"](curArg, {\n        context: \"Failed to execute 'initEvent' on 'Event': parameter 3\"\n      });\n    } else {\n      curArg = false;\n    }\n\n    args.push(curArg);\n  }\n  return this[impl].initEvent(...args);\n};\n\nObject.defineProperty(Event.prototype, \"type\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"type\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Event.prototype, \"target\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"target\"]);\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Event.prototype, \"srcElement\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"srcElement\"]);\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Event.prototype, \"currentTarget\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"currentTarget\"]);\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Event.prototype, \"eventPhase\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"eventPhase\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Event.prototype, \"cancelBubble\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"cancelBubble\"];\n  },\n\n  set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"boolean\"](V, {\n      context: \"Failed to set the 'cancelBubble' property on 'Event': The provided value\"\n    });\n    this[impl][\"cancelBubble\"] = V;\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Event.prototype, \"bubbles\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"bubbles\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Event.prototype, \"cancelable\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"cancelable\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Event.prototype, \"returnValue\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"returnValue\"];\n  },\n\n  set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"boolean\"](V, {\n      context: \"Failed to set the 'returnValue' property on 'Event': The provided value\"\n    });\n    this[impl][\"returnValue\"] = V;\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Event.prototype, \"defaultPrevented\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"defaultPrevented\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Event.prototype, \"timeStamp\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"timeStamp\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Event, \"NONE\", {\n  value: 0,\n  enumerable: true\n});\nObject.defineProperty(Event.prototype, \"NONE\", {\n  value: 0,\n  enumerable: true\n});\nObject.defineProperty(Event, \"CAPTURING_PHASE\", {\n  value: 1,\n  enumerable: true\n});\nObject.defineProperty(Event.prototype, \"CAPTURING_PHASE\", {\n  value: 1,\n  enumerable: true\n});\nObject.defineProperty(Event, \"AT_TARGET\", {\n  value: 2,\n  enumerable: true\n});\nObject.defineProperty(Event.prototype, \"AT_TARGET\", {\n  value: 2,\n  enumerable: true\n});\nObject.defineProperty(Event, \"BUBBLING_PHASE\", {\n  value: 3,\n  enumerable: true\n});\nObject.defineProperty(Event.prototype, \"BUBBLING_PHASE\", {\n  value: 3,\n  enumerable: true\n});\nObject.defineProperty(Event.prototype, Symbol.toStringTag, {\n  value: \"Event\",\n  writable: false,\n  enumerable: false,\n  configurable: true\n});\nconst iface = {\n  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`\n  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as\n  // implementing this mixin interface.\n  _mixedIntoPredicates: [],\n\n  is(obj) {\n    if (obj) {\n      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {\n        return true;\n      }\n\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(obj)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n\n  isImpl(obj) {\n    if (obj) {\n      if (obj instanceof Impl.implementation) {\n        return true;\n      }\n\n      const wrapper = utils.wrapperForImpl(obj);\n\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(wrapper)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n\n  convert(obj, {\n    context = \"The provided value\"\n  } = {}) {\n    if (module.exports.is(obj)) {\n      return utils.implForWrapper(obj);\n    }\n\n    throw new TypeError(\"\".concat(context, \" is not of type 'Event'.\"));\n  },\n\n  create(constructorArgs, privateData) {\n    let obj = Object.create(Event.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n\n  createImpl(constructorArgs, privateData) {\n    let obj = Object.create(Event.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return utils.implForWrapper(obj);\n  },\n\n  _internalSetup(obj) {\n    Object.defineProperty(obj, \"isTrusted\", {\n      get() {\n        if (!this || !module.exports.is(this)) {\n          throw new TypeError(\"Illegal invocation\");\n        }\n\n        return obj[impl][\"isTrusted\"];\n      },\n\n      enumerable: true,\n      configurable: false\n    });\n  },\n\n  setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n    privateData.wrapper = obj;\n\n    this._internalSetup(obj);\n\n    Object.defineProperty(obj, impl, {\n      value: new Impl.implementation(constructorArgs, privateData),\n      writable: false,\n      enumerable: false,\n      configurable: true\n    });\n    obj[impl][utils.wrapperSymbol] = obj;\n\n    if (Impl.init) {\n      Impl.init(obj[impl], privateData);\n    }\n\n    return obj;\n  },\n\n  interface: Event,\n  expose: {\n    Window: {\n      Event\n    },\n    Worker: {\n      Event\n    },\n    AudioWorklet: {\n      Event\n    }\n  }\n}; // iface\n\nmodule.exports = iface;\n\nconst Impl = require(\"../events/Event-impl.js\");","map":null,"metadata":{},"sourceType":"script"}