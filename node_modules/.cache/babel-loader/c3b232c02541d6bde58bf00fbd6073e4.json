{"ast":null,"code":"\"use strict\";\n\nconst _require = require(\"../helpers/create-event-accessor\"),\n      setupForSimpleEventAccessors = _require.setupForSimpleEventAccessors;\n\nconst EventTargetImpl = require(\"../events/EventTarget-impl\").implementation;\n\nconst Event = require(\"../generated/Event\");\n\nclass AbortSignalImpl extends EventTargetImpl {\n  constructor(args, privateData) {\n    super(); // make event firing possible\n\n    this._ownerDocument = privateData.window.document;\n    this.aborted = false;\n    this.abortAlgorithms = new Set();\n  }\n\n  _signalAbort() {\n    if (this.aborted) {\n      return;\n    }\n\n    this.aborted = true;\n\n    for (const algorithm of this.abortAlgorithms) {\n      algorithm();\n    }\n\n    this.abortAlgorithms.clear();\n\n    this._dispatch(Event.createImpl([\"abort\", {\n      bubbles: false,\n      cancelable: false\n    }], {\n      isTrusted: true\n    }));\n  }\n\n  _addAlgorithm(algorithm) {\n    if (this.aborted) {\n      return;\n    }\n\n    this.abortAlgorithms.add(algorithm);\n  }\n\n  _removeAlgorithm(algorithm) {\n    this.abortAlgorithms.delete(algorithm);\n  }\n\n}\n\nsetupForSimpleEventAccessors(AbortSignalImpl.prototype, [\"abort\"]);\nmodule.exports = {\n  implementation: AbortSignalImpl\n};","map":null,"metadata":{},"sourceType":"script"}