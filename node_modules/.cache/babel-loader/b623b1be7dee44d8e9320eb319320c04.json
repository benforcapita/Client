{"ast":null,"code":"\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\n\nconst utils = require(\"./utils.js\");\n\nconst convertMouseEventInit = require(\"./MouseEventInit.js\").convert;\n\nconst convertEventTarget = require(\"./EventTarget.js\").convert;\n\nconst impl = utils.implSymbol;\n\nconst UIEvent = require(\"./UIEvent.js\");\n\nfunction MouseEvent(type) {\n  if (new.target === undefined) {\n    throw new TypeError(\"Failed to construct 'MouseEvent'. Please use the 'new' operator; this constructor \" + \"cannot be called as a function.\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to construct 'MouseEvent': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  const args = [];\n  {\n    let curArg = arguments[0];\n    curArg = conversions[\"DOMString\"](curArg, {\n      context: \"Failed to construct 'MouseEvent': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  {\n    let curArg = arguments[1];\n    curArg = convertMouseEventInit(curArg, {\n      context: \"Failed to construct 'MouseEvent': parameter 2\"\n    });\n    args.push(curArg);\n  }\n  iface.setup(this, args);\n}\n\nObject.setPrototypeOf(MouseEvent.prototype, UIEvent.interface.prototype);\nObject.setPrototypeOf(MouseEvent, UIEvent.interface);\nObject.defineProperty(MouseEvent, \"prototype\", {\n  value: MouseEvent.prototype,\n  writable: false,\n  enumerable: false,\n  configurable: false\n});\n\nMouseEvent.prototype.getModifierState = function getModifierState(keyArg) {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'getModifierState' on 'MouseEvent': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  const args = [];\n  {\n    let curArg = arguments[0];\n    curArg = conversions[\"DOMString\"](curArg, {\n      context: \"Failed to execute 'getModifierState' on 'MouseEvent': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  return this[impl].getModifierState(...args);\n};\n\nMouseEvent.prototype.initMouseEvent = function initMouseEvent(typeArg) {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'initMouseEvent' on 'MouseEvent': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  const args = [];\n  {\n    let curArg = arguments[0];\n    curArg = conversions[\"DOMString\"](curArg, {\n      context: \"Failed to execute 'initMouseEvent' on 'MouseEvent': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  {\n    let curArg = arguments[1];\n\n    if (curArg !== undefined) {\n      curArg = conversions[\"boolean\"](curArg, {\n        context: \"Failed to execute 'initMouseEvent' on 'MouseEvent': parameter 2\"\n      });\n    } else {\n      curArg = false;\n    }\n\n    args.push(curArg);\n  }\n  {\n    let curArg = arguments[2];\n\n    if (curArg !== undefined) {\n      curArg = conversions[\"boolean\"](curArg, {\n        context: \"Failed to execute 'initMouseEvent' on 'MouseEvent': parameter 3\"\n      });\n    } else {\n      curArg = false;\n    }\n\n    args.push(curArg);\n  }\n  {\n    let curArg = arguments[3];\n\n    if (curArg !== undefined) {\n      if (curArg === null || curArg === undefined) {\n        curArg = null;\n      } else {\n        curArg = utils.tryImplForWrapper(curArg);\n      }\n    } else {\n      curArg = null;\n    }\n\n    args.push(curArg);\n  }\n  {\n    let curArg = arguments[4];\n\n    if (curArg !== undefined) {\n      curArg = conversions[\"long\"](curArg, {\n        context: \"Failed to execute 'initMouseEvent' on 'MouseEvent': parameter 5\"\n      });\n    } else {\n      curArg = 0;\n    }\n\n    args.push(curArg);\n  }\n  {\n    let curArg = arguments[5];\n\n    if (curArg !== undefined) {\n      curArg = conversions[\"long\"](curArg, {\n        context: \"Failed to execute 'initMouseEvent' on 'MouseEvent': parameter 6\"\n      });\n    } else {\n      curArg = 0;\n    }\n\n    args.push(curArg);\n  }\n  {\n    let curArg = arguments[6];\n\n    if (curArg !== undefined) {\n      curArg = conversions[\"long\"](curArg, {\n        context: \"Failed to execute 'initMouseEvent' on 'MouseEvent': parameter 7\"\n      });\n    } else {\n      curArg = 0;\n    }\n\n    args.push(curArg);\n  }\n  {\n    let curArg = arguments[7];\n\n    if (curArg !== undefined) {\n      curArg = conversions[\"long\"](curArg, {\n        context: \"Failed to execute 'initMouseEvent' on 'MouseEvent': parameter 8\"\n      });\n    } else {\n      curArg = 0;\n    }\n\n    args.push(curArg);\n  }\n  {\n    let curArg = arguments[8];\n\n    if (curArg !== undefined) {\n      curArg = conversions[\"long\"](curArg, {\n        context: \"Failed to execute 'initMouseEvent' on 'MouseEvent': parameter 9\"\n      });\n    } else {\n      curArg = 0;\n    }\n\n    args.push(curArg);\n  }\n  {\n    let curArg = arguments[9];\n\n    if (curArg !== undefined) {\n      curArg = conversions[\"boolean\"](curArg, {\n        context: \"Failed to execute 'initMouseEvent' on 'MouseEvent': parameter 10\"\n      });\n    } else {\n      curArg = 0;\n    }\n\n    args.push(curArg);\n  }\n  {\n    let curArg = arguments[10];\n\n    if (curArg !== undefined) {\n      curArg = conversions[\"boolean\"](curArg, {\n        context: \"Failed to execute 'initMouseEvent' on 'MouseEvent': parameter 11\"\n      });\n    } else {\n      curArg = 0;\n    }\n\n    args.push(curArg);\n  }\n  {\n    let curArg = arguments[11];\n\n    if (curArg !== undefined) {\n      curArg = conversions[\"boolean\"](curArg, {\n        context: \"Failed to execute 'initMouseEvent' on 'MouseEvent': parameter 12\"\n      });\n    } else {\n      curArg = 0;\n    }\n\n    args.push(curArg);\n  }\n  {\n    let curArg = arguments[12];\n\n    if (curArg !== undefined) {\n      curArg = conversions[\"boolean\"](curArg, {\n        context: \"Failed to execute 'initMouseEvent' on 'MouseEvent': parameter 13\"\n      });\n    } else {\n      curArg = 0;\n    }\n\n    args.push(curArg);\n  }\n  {\n    let curArg = arguments[13];\n\n    if (curArg !== undefined) {\n      curArg = conversions[\"short\"](curArg, {\n        context: \"Failed to execute 'initMouseEvent' on 'MouseEvent': parameter 14\"\n      });\n    } else {\n      curArg = 0;\n    }\n\n    args.push(curArg);\n  }\n  {\n    let curArg = arguments[14];\n\n    if (curArg !== undefined) {\n      if (curArg === null || curArg === undefined) {\n        curArg = null;\n      } else {\n        curArg = convertEventTarget(curArg, {\n          context: \"Failed to execute 'initMouseEvent' on 'MouseEvent': parameter 15\"\n        });\n      }\n    } else {\n      curArg = null;\n    }\n\n    args.push(curArg);\n  }\n  return this[impl].initMouseEvent(...args);\n};\n\nObject.defineProperty(MouseEvent.prototype, \"screenX\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"screenX\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(MouseEvent.prototype, \"screenY\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"screenY\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(MouseEvent.prototype, \"clientX\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"clientX\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(MouseEvent.prototype, \"clientY\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"clientY\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(MouseEvent.prototype, \"ctrlKey\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"ctrlKey\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(MouseEvent.prototype, \"shiftKey\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"shiftKey\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(MouseEvent.prototype, \"altKey\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"altKey\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(MouseEvent.prototype, \"metaKey\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"metaKey\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(MouseEvent.prototype, \"button\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"button\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(MouseEvent.prototype, \"buttons\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"buttons\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(MouseEvent.prototype, \"relatedTarget\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"relatedTarget\"]);\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(MouseEvent.prototype, Symbol.toStringTag, {\n  value: \"MouseEvent\",\n  writable: false,\n  enumerable: false,\n  configurable: true\n});\nconst iface = {\n  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`\n  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as\n  // implementing this mixin interface.\n  _mixedIntoPredicates: [],\n\n  is(obj) {\n    if (obj) {\n      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {\n        return true;\n      }\n\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(obj)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n\n  isImpl(obj) {\n    if (obj) {\n      if (obj instanceof Impl.implementation) {\n        return true;\n      }\n\n      const wrapper = utils.wrapperForImpl(obj);\n\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(wrapper)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n\n  convert(obj, {\n    context = \"The provided value\"\n  } = {}) {\n    if (module.exports.is(obj)) {\n      return utils.implForWrapper(obj);\n    }\n\n    throw new TypeError(\"\".concat(context, \" is not of type 'MouseEvent'.\"));\n  },\n\n  create(constructorArgs, privateData) {\n    let obj = Object.create(MouseEvent.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n\n  createImpl(constructorArgs, privateData) {\n    let obj = Object.create(MouseEvent.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return utils.implForWrapper(obj);\n  },\n\n  _internalSetup(obj) {\n    UIEvent._internalSetup(obj);\n  },\n\n  setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n    privateData.wrapper = obj;\n\n    this._internalSetup(obj);\n\n    Object.defineProperty(obj, impl, {\n      value: new Impl.implementation(constructorArgs, privateData),\n      writable: false,\n      enumerable: false,\n      configurable: true\n    });\n    obj[impl][utils.wrapperSymbol] = obj;\n\n    if (Impl.init) {\n      Impl.init(obj[impl], privateData);\n    }\n\n    return obj;\n  },\n\n  interface: MouseEvent,\n  expose: {\n    Window: {\n      MouseEvent\n    }\n  }\n}; // iface\n\nmodule.exports = iface;\n\nconst Impl = require(\"../events/MouseEvent-impl.js\");","map":null,"metadata":{},"sourceType":"script"}