{"ast":null,"code":"\"use strict\";\n\nconst _require = require(\"os\"),\n      EOL = _require.EOL;\n\nconst Blob = require(\"../generated/Blob\");\n\nfunction convertLineEndingsToNative(s) {\n  return s.replace(/\\r\\n|\\r|\\n/g, EOL);\n}\n\nexports.implementation = class BlobImpl {\n  constructor(args) {\n    const parts = args[0];\n    const properties = args[1];\n    const buffers = [];\n\n    if (parts !== undefined) {\n      for (const part of parts) {\n        let buffer;\n\n        if (part instanceof ArrayBuffer) {\n          buffer = Buffer.from(part);\n        } else if (ArrayBuffer.isView(part)) {\n          buffer = Buffer.from(part.buffer, part.byteOffset, part.byteLength);\n        } else if (Blob.isImpl(part)) {\n          buffer = part._buffer;\n        } else {\n          let s = part;\n\n          if (properties.endings === \"native\") {\n            s = convertLineEndingsToNative(part);\n          }\n\n          buffer = Buffer.from(s);\n        }\n\n        buffers.push(buffer);\n      }\n    }\n\n    this._buffer = Buffer.concat(buffers);\n    this.type = properties.type;\n\n    if (/[^\\u0020-\\u007E]/.test(this.type)) {\n      this.type = \"\";\n    } else {\n      this.type = this.type.toLowerCase();\n    }\n  }\n\n  get size() {\n    return this._buffer.length;\n  }\n\n  slice(start, end, contentType) {\n    const size = this.size;\n    let relativeStart;\n    let relativeEnd;\n    let relativeContentType;\n\n    if (start === undefined) {\n      relativeStart = 0;\n    } else if (start < 0) {\n      relativeStart = Math.max(size + start, 0);\n    } else {\n      relativeStart = Math.min(start, size);\n    }\n\n    if (end === undefined) {\n      relativeEnd = size;\n    } else if (end < 0) {\n      relativeEnd = Math.max(size + end, 0);\n    } else {\n      relativeEnd = Math.min(end, size);\n    }\n\n    if (contentType === undefined) {\n      relativeContentType = \"\";\n    } else {\n      // sanitization (lower case and invalid char check) is done in the\n      // constructor\n      relativeContentType = contentType;\n    }\n\n    const span = Math.max(relativeEnd - relativeStart, 0);\n    const buffer = this._buffer;\n    const slicedBuffer = buffer.slice(relativeStart, relativeStart + span);\n    const blob = Blob.createImpl([[], {\n      type: relativeContentType\n    }], {});\n    blob._buffer = slicedBuffer;\n    return blob;\n  }\n\n};","map":null,"metadata":{},"sourceType":"script"}