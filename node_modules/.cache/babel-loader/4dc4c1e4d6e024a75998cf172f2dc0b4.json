{"ast":null,"code":"\"use strict\";\n\nconst DOMException = require(\"domexception\");\n\nconst idlUtils = require(\"../generated/utils\");\n\nconst _require = require(\"../helpers/svg/basic-types\"),\n      attach = _require.attach,\n      detach = _require.detach; // https://svgwg.org/svg2-draft/types.html#ListInterfaces\n// Child classes must implement _reserialize()\n\n\nclass List {\n  _initList({\n    element,\n    attribute,\n    readOnly = false\n  }) {\n    this._element = element;\n    this._attribute = attribute;\n    this._attributeRegistryEntry = element.constructor.attributeRegistry.get(attribute);\n    this._readOnly = readOnly;\n    this._list = [];\n    this._version = -1;\n  }\n\n  get _needsResync() {\n    return this._version < this._element._version;\n  }\n\n  _synchronize() {\n    if (!this._needsResync) {\n      return;\n    }\n\n    let value = [];\n\n    if (this._element.hasAttribute(this._attribute)) {\n      value = this._attributeRegistryEntry.getValue(this._element.getAttribute(this._attribute));\n    }\n\n    if (value.length === 0 && this._attributeRegistryEntry.initialValue !== undefined) {\n      value = this._attributeRegistryEntry.getValue(this._attributeRegistryEntry.initialValue);\n    } // TODO: support non-DOMString lists.\n\n\n    this._list = value;\n    this._version = this._element._version;\n  }\n\n  _reserialize() {\n    const elements = this._list;\n\n    this._element.setAttribute(this._attribute, this._attributeRegistryEntry.serialize(elements)); // Prevent ping-ponging back and forth between _reserialize() and _synchronize().\n\n\n    this._version = this._element._version;\n  }\n\n  [idlUtils.supportsPropertyIndex](index) {\n    this._synchronize();\n\n    return index >= 0 && index < this.length;\n  }\n\n  get [idlUtils.supportedPropertyIndices]() {\n    this._synchronize();\n\n    return this._list.keys();\n  }\n\n  get length() {\n    this._synchronize();\n\n    return this._list.length;\n  }\n\n  get numberOfItems() {\n    this._synchronize();\n\n    return this._list.length;\n  }\n\n  clear() {\n    this._synchronize();\n\n    if (this._readOnly) {\n      throw new DOMException(\"Attempting to modify a read-only list\", \"NoModificationAllowedError\");\n    }\n\n    for (const item of this._list) {\n      detach(item);\n    }\n\n    this._list.length = 0;\n\n    this._reserialize();\n  }\n\n  initialize(newItem) {\n    this._synchronize();\n\n    if (this._readOnly) {\n      throw new DOMException(\"Attempting to modify a read-only list\", \"NoModificationAllowedError\");\n    }\n\n    for (const item of this._list) {\n      detach(item);\n    }\n\n    this._list.length = 0; // TODO: clone non-DOMString list elements.\n\n    attach(newItem, this);\n\n    this._list.push(newItem);\n\n    this._reserialize();\n  }\n\n  getItem(index) {\n    this._synchronize();\n\n    if (index >= this._list.length) {\n      throw new DOMException(\"The index provided (\".concat(index, \") is greater than or equal to the maximum bound (\").concat(this._list.length, \").\"), \"IndexSizeError\");\n    }\n\n    return this._list[index];\n  }\n\n  insertItemBefore(newItem, index) {\n    this._synchronize();\n\n    if (this._readOnly) {\n      throw new DOMException(\"Attempting to modify a read-only list\", \"NoModificationAllowedError\");\n    } // TODO: clone non-DOMString list elements.\n\n\n    if (index > this._list.length) {\n      index = this._list.length;\n    }\n\n    this._list.splice(index, 0, newItem);\n\n    attach(newItem, this);\n\n    this._reserialize();\n\n    return newItem;\n  }\n\n  replaceItem(newItem, index) {\n    this._synchronize();\n\n    if (this._readOnly) {\n      throw new DOMException(\"Attempting to modify a read-only list\", \"NoModificationAllowedError\");\n    }\n\n    if (index >= this._list.length) {\n      throw new DOMException(\"The index provided (\".concat(index, \") is greater than or equal to the maximum bound (\").concat(this._list.length, \").\"), \"IndexSizeError\");\n    } // TODO: clone non-DOMString list elements.\n\n\n    detach(this._list[index]);\n    this._list[index] = newItem;\n    attach(newItem, this);\n\n    this._reserialize();\n\n    return newItem;\n  }\n\n  removeItem(index) {\n    this._synchronize();\n\n    if (this._readOnly) {\n      throw new DOMException(\"Attempting to modify a read-only list\", \"NoModificationAllowedError\");\n    }\n\n    if (index >= this._list.length) {\n      throw new DOMException(\"The index provided (\".concat(index, \") is greater than or equal to the maximum bound (\").concat(this._list.length, \").\"), \"IndexSizeError\");\n    }\n\n    const item = this._list[index];\n    detach(item);\n\n    this._list.splice(index, 1);\n\n    this._reserialize();\n\n    return item;\n  }\n\n  appendItem(newItem) {\n    this._synchronize(); // TODO: clone non-DOMString list elements.\n\n\n    this._list.push(newItem);\n\n    attach(newItem, this);\n\n    this._reserialize();\n\n    return newItem;\n  }\n\n  [idlUtils.indexedSetNew](index, value) {\n    // Note: this will always throw a IndexSizeError.\n    this.replaceItem(value, index);\n  }\n\n  [idlUtils.indexedSetExisting](index, value) {\n    this.replaceItem(value, index);\n  }\n\n}\n\nmodule.exports = List;","map":null,"metadata":{},"sourceType":"script"}