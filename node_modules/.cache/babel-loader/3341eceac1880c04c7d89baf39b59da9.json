{"ast":null,"code":"\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\n\nconst utils = require(\"./utils.js\");\n\nconst convertBlob = require(\"./Blob.js\").convert;\n\nconst impl = utils.implSymbol;\n\nconst EventTarget = require(\"./EventTarget.js\");\n\nmodule.exports = {\n  createInterface: function (defaultPrivateData = {}) {\n    function FileReader() {\n      if (new.target === undefined) {\n        throw new TypeError(\"Failed to construct 'FileReader'. Please use the 'new' operator; this constructor \" + \"cannot be called as a function.\");\n      }\n\n      iface.setup(this);\n    }\n\n    Object.setPrototypeOf(FileReader.prototype, EventTarget.interface.prototype);\n    Object.setPrototypeOf(FileReader, EventTarget.interface);\n    Object.defineProperty(FileReader, \"prototype\", {\n      value: FileReader.prototype,\n      writable: false,\n      enumerable: false,\n      configurable: false\n    });\n\n    FileReader.prototype.readAsArrayBuffer = function readAsArrayBuffer(blob) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (arguments.length < 1) {\n        throw new TypeError(\"Failed to execute 'readAsArrayBuffer' on 'FileReader': 1 argument required, but only \" + arguments.length + \" present.\");\n      }\n\n      const args = [];\n      {\n        let curArg = arguments[0];\n        curArg = convertBlob(curArg, {\n          context: \"Failed to execute 'readAsArrayBuffer' on 'FileReader': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      return this[impl].readAsArrayBuffer(...args);\n    };\n\n    FileReader.prototype.readAsBinaryString = function readAsBinaryString(blob) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (arguments.length < 1) {\n        throw new TypeError(\"Failed to execute 'readAsBinaryString' on 'FileReader': 1 argument required, but only \" + arguments.length + \" present.\");\n      }\n\n      const args = [];\n      {\n        let curArg = arguments[0];\n        curArg = convertBlob(curArg, {\n          context: \"Failed to execute 'readAsBinaryString' on 'FileReader': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      return this[impl].readAsBinaryString(...args);\n    };\n\n    FileReader.prototype.readAsText = function readAsText(blob) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (arguments.length < 1) {\n        throw new TypeError(\"Failed to execute 'readAsText' on 'FileReader': 1 argument required, but only \" + arguments.length + \" present.\");\n      }\n\n      const args = [];\n      {\n        let curArg = arguments[0];\n        curArg = convertBlob(curArg, {\n          context: \"Failed to execute 'readAsText' on 'FileReader': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      {\n        let curArg = arguments[1];\n\n        if (curArg !== undefined) {\n          curArg = conversions[\"DOMString\"](curArg, {\n            context: \"Failed to execute 'readAsText' on 'FileReader': parameter 2\"\n          });\n        }\n\n        args.push(curArg);\n      }\n      return this[impl].readAsText(...args);\n    };\n\n    FileReader.prototype.readAsDataURL = function readAsDataURL(blob) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (arguments.length < 1) {\n        throw new TypeError(\"Failed to execute 'readAsDataURL' on 'FileReader': 1 argument required, but only \" + arguments.length + \" present.\");\n      }\n\n      const args = [];\n      {\n        let curArg = arguments[0];\n        curArg = convertBlob(curArg, {\n          context: \"Failed to execute 'readAsDataURL' on 'FileReader': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      return this[impl].readAsDataURL(...args);\n    };\n\n    FileReader.prototype.abort = function abort() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl].abort();\n    };\n\n    Object.defineProperty(FileReader.prototype, \"readyState\", {\n      get() {\n        if (!this || !module.exports.is(this)) {\n          throw new TypeError(\"Illegal invocation\");\n        }\n\n        return this[impl][\"readyState\"];\n      },\n\n      enumerable: true,\n      configurable: true\n    });\n    Object.defineProperty(FileReader.prototype, \"result\", {\n      get() {\n        if (!this || !module.exports.is(this)) {\n          throw new TypeError(\"Illegal invocation\");\n        }\n\n        return utils.tryWrapperForImpl(this[impl][\"result\"]);\n      },\n\n      enumerable: true,\n      configurable: true\n    });\n    Object.defineProperty(FileReader.prototype, \"error\", {\n      get() {\n        if (!this || !module.exports.is(this)) {\n          throw new TypeError(\"Illegal invocation\");\n        }\n\n        return utils.tryWrapperForImpl(this[impl][\"error\"]);\n      },\n\n      enumerable: true,\n      configurable: true\n    });\n    Object.defineProperty(FileReader.prototype, \"onloadstart\", {\n      get() {\n        if (!this || !module.exports.is(this)) {\n          throw new TypeError(\"Illegal invocation\");\n        }\n\n        return utils.tryWrapperForImpl(this[impl][\"onloadstart\"]);\n      },\n\n      set(V) {\n        if (!this || !module.exports.is(this)) {\n          throw new TypeError(\"Illegal invocation\");\n        }\n\n        V = utils.tryImplForWrapper(V);\n        this[impl][\"onloadstart\"] = V;\n      },\n\n      enumerable: true,\n      configurable: true\n    });\n    Object.defineProperty(FileReader.prototype, \"onprogress\", {\n      get() {\n        if (!this || !module.exports.is(this)) {\n          throw new TypeError(\"Illegal invocation\");\n        }\n\n        return utils.tryWrapperForImpl(this[impl][\"onprogress\"]);\n      },\n\n      set(V) {\n        if (!this || !module.exports.is(this)) {\n          throw new TypeError(\"Illegal invocation\");\n        }\n\n        V = utils.tryImplForWrapper(V);\n        this[impl][\"onprogress\"] = V;\n      },\n\n      enumerable: true,\n      configurable: true\n    });\n    Object.defineProperty(FileReader.prototype, \"onload\", {\n      get() {\n        if (!this || !module.exports.is(this)) {\n          throw new TypeError(\"Illegal invocation\");\n        }\n\n        return utils.tryWrapperForImpl(this[impl][\"onload\"]);\n      },\n\n      set(V) {\n        if (!this || !module.exports.is(this)) {\n          throw new TypeError(\"Illegal invocation\");\n        }\n\n        V = utils.tryImplForWrapper(V);\n        this[impl][\"onload\"] = V;\n      },\n\n      enumerable: true,\n      configurable: true\n    });\n    Object.defineProperty(FileReader.prototype, \"onabort\", {\n      get() {\n        if (!this || !module.exports.is(this)) {\n          throw new TypeError(\"Illegal invocation\");\n        }\n\n        return utils.tryWrapperForImpl(this[impl][\"onabort\"]);\n      },\n\n      set(V) {\n        if (!this || !module.exports.is(this)) {\n          throw new TypeError(\"Illegal invocation\");\n        }\n\n        V = utils.tryImplForWrapper(V);\n        this[impl][\"onabort\"] = V;\n      },\n\n      enumerable: true,\n      configurable: true\n    });\n    Object.defineProperty(FileReader.prototype, \"onerror\", {\n      get() {\n        if (!this || !module.exports.is(this)) {\n          throw new TypeError(\"Illegal invocation\");\n        }\n\n        return utils.tryWrapperForImpl(this[impl][\"onerror\"]);\n      },\n\n      set(V) {\n        if (!this || !module.exports.is(this)) {\n          throw new TypeError(\"Illegal invocation\");\n        }\n\n        V = utils.tryImplForWrapper(V);\n        this[impl][\"onerror\"] = V;\n      },\n\n      enumerable: true,\n      configurable: true\n    });\n    Object.defineProperty(FileReader.prototype, \"onloadend\", {\n      get() {\n        if (!this || !module.exports.is(this)) {\n          throw new TypeError(\"Illegal invocation\");\n        }\n\n        return utils.tryWrapperForImpl(this[impl][\"onloadend\"]);\n      },\n\n      set(V) {\n        if (!this || !module.exports.is(this)) {\n          throw new TypeError(\"Illegal invocation\");\n        }\n\n        V = utils.tryImplForWrapper(V);\n        this[impl][\"onloadend\"] = V;\n      },\n\n      enumerable: true,\n      configurable: true\n    });\n    Object.defineProperty(FileReader, \"EMPTY\", {\n      value: 0,\n      enumerable: true\n    });\n    Object.defineProperty(FileReader.prototype, \"EMPTY\", {\n      value: 0,\n      enumerable: true\n    });\n    Object.defineProperty(FileReader, \"LOADING\", {\n      value: 1,\n      enumerable: true\n    });\n    Object.defineProperty(FileReader.prototype, \"LOADING\", {\n      value: 1,\n      enumerable: true\n    });\n    Object.defineProperty(FileReader, \"DONE\", {\n      value: 2,\n      enumerable: true\n    });\n    Object.defineProperty(FileReader.prototype, \"DONE\", {\n      value: 2,\n      enumerable: true\n    });\n    Object.defineProperty(FileReader.prototype, Symbol.toStringTag, {\n      value: \"FileReader\",\n      writable: false,\n      enumerable: false,\n      configurable: true\n    });\n    const iface = {\n      create(constructorArgs, privateData) {\n        let obj = Object.create(FileReader.prototype);\n        obj = this.setup(obj, constructorArgs, privateData);\n        return obj;\n      },\n\n      createImpl(constructorArgs, privateData) {\n        let obj = Object.create(FileReader.prototype);\n        obj = this.setup(obj, constructorArgs, privateData);\n        return utils.implForWrapper(obj);\n      },\n\n      _internalSetup(obj) {\n        EventTarget._internalSetup(obj);\n      },\n\n      setup(obj, constructorArgs, privateData) {\n        if (!privateData) privateData = {};\n\n        for (var prop in defaultPrivateData) {\n          if (!(prop in privateData)) {\n            privateData[prop] = defaultPrivateData[prop];\n          }\n        }\n\n        privateData.wrapper = obj;\n\n        this._internalSetup(obj);\n\n        Object.defineProperty(obj, impl, {\n          value: new Impl.implementation(constructorArgs, privateData),\n          writable: false,\n          enumerable: false,\n          configurable: true\n        });\n        obj[impl][utils.wrapperSymbol] = obj;\n\n        if (Impl.init) {\n          Impl.init(obj[impl], privateData);\n        }\n\n        return obj;\n      },\n\n      interface: FileReader,\n      expose: {\n        Window: {\n          FileReader\n        },\n        Worker: {\n          FileReader\n        }\n      }\n    }; // iface\n\n    return iface;\n  },\n  // createInterface\n  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`\n  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as\n  // implementing this mixin interface.\n  _mixedIntoPredicates: [],\n\n  is(obj) {\n    if (obj) {\n      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {\n        return true;\n      }\n\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(obj)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n\n  isImpl(obj) {\n    if (obj) {\n      if (obj instanceof Impl.implementation) {\n        return true;\n      }\n\n      const wrapper = utils.wrapperForImpl(obj);\n\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(wrapper)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n\n  convert(obj, {\n    context = \"The provided value\"\n  } = {}) {\n    if (module.exports.is(obj)) {\n      return utils.implForWrapper(obj);\n    }\n\n    throw new TypeError(\"\".concat(context, \" is not of type 'FileReader'.\"));\n  }\n\n}; // module.exports\n\nconst Impl = require(\"../file-api/FileReader-impl.js\");","map":null,"metadata":{},"sourceType":"script"}