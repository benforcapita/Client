{"ast":null,"code":"\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\n\nconst utils = require(\"./utils.js\");\n\nconst convertWheelEventInit = require(\"./WheelEventInit.js\").convert;\n\nconst impl = utils.implSymbol;\n\nconst MouseEvent = require(\"./MouseEvent.js\");\n\nfunction WheelEvent(type) {\n  if (new.target === undefined) {\n    throw new TypeError(\"Failed to construct 'WheelEvent'. Please use the 'new' operator; this constructor \" + \"cannot be called as a function.\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to construct 'WheelEvent': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  const args = [];\n  {\n    let curArg = arguments[0];\n    curArg = conversions[\"DOMString\"](curArg, {\n      context: \"Failed to construct 'WheelEvent': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  {\n    let curArg = arguments[1];\n    curArg = convertWheelEventInit(curArg, {\n      context: \"Failed to construct 'WheelEvent': parameter 2\"\n    });\n    args.push(curArg);\n  }\n  iface.setup(this, args);\n}\n\nObject.setPrototypeOf(WheelEvent.prototype, MouseEvent.interface.prototype);\nObject.setPrototypeOf(WheelEvent, MouseEvent.interface);\nObject.defineProperty(WheelEvent, \"prototype\", {\n  value: WheelEvent.prototype,\n  writable: false,\n  enumerable: false,\n  configurable: false\n});\nObject.defineProperty(WheelEvent.prototype, \"deltaX\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"deltaX\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(WheelEvent.prototype, \"deltaY\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"deltaY\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(WheelEvent.prototype, \"deltaZ\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"deltaZ\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(WheelEvent.prototype, \"deltaMode\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"deltaMode\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(WheelEvent, \"DOM_DELTA_PIXEL\", {\n  value: 0x00,\n  enumerable: true\n});\nObject.defineProperty(WheelEvent.prototype, \"DOM_DELTA_PIXEL\", {\n  value: 0x00,\n  enumerable: true\n});\nObject.defineProperty(WheelEvent, \"DOM_DELTA_LINE\", {\n  value: 0x01,\n  enumerable: true\n});\nObject.defineProperty(WheelEvent.prototype, \"DOM_DELTA_LINE\", {\n  value: 0x01,\n  enumerable: true\n});\nObject.defineProperty(WheelEvent, \"DOM_DELTA_PAGE\", {\n  value: 0x02,\n  enumerable: true\n});\nObject.defineProperty(WheelEvent.prototype, \"DOM_DELTA_PAGE\", {\n  value: 0x02,\n  enumerable: true\n});\nObject.defineProperty(WheelEvent.prototype, Symbol.toStringTag, {\n  value: \"WheelEvent\",\n  writable: false,\n  enumerable: false,\n  configurable: true\n});\nconst iface = {\n  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`\n  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as\n  // implementing this mixin interface.\n  _mixedIntoPredicates: [],\n\n  is(obj) {\n    if (obj) {\n      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {\n        return true;\n      }\n\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(obj)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n\n  isImpl(obj) {\n    if (obj) {\n      if (obj instanceof Impl.implementation) {\n        return true;\n      }\n\n      const wrapper = utils.wrapperForImpl(obj);\n\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(wrapper)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n\n  convert(obj, {\n    context = \"The provided value\"\n  } = {}) {\n    if (module.exports.is(obj)) {\n      return utils.implForWrapper(obj);\n    }\n\n    throw new TypeError(\"\".concat(context, \" is not of type 'WheelEvent'.\"));\n  },\n\n  create(constructorArgs, privateData) {\n    let obj = Object.create(WheelEvent.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n\n  createImpl(constructorArgs, privateData) {\n    let obj = Object.create(WheelEvent.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return utils.implForWrapper(obj);\n  },\n\n  _internalSetup(obj) {\n    MouseEvent._internalSetup(obj);\n  },\n\n  setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n    privateData.wrapper = obj;\n\n    this._internalSetup(obj);\n\n    Object.defineProperty(obj, impl, {\n      value: new Impl.implementation(constructorArgs, privateData),\n      writable: false,\n      enumerable: false,\n      configurable: true\n    });\n    obj[impl][utils.wrapperSymbol] = obj;\n\n    if (Impl.init) {\n      Impl.init(obj[impl], privateData);\n    }\n\n    return obj;\n  },\n\n  interface: WheelEvent,\n  expose: {\n    Window: {\n      WheelEvent\n    }\n  }\n}; // iface\n\nmodule.exports = iface;\n\nconst Impl = require(\"../events/WheelEvent-impl.js\");","map":null,"metadata":{},"sourceType":"script"}