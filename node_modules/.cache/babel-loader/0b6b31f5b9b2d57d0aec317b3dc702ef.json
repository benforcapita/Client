{"ast":null,"code":"\"use strict\";\n\nconst idlUtils = require(\"../living/generated/utils\");\n\nconst nodeTypes = require(\"../living/node-type\");\n\nconst _require = require(\"../living/helpers/internal-constants\"),\n      domSymbolTree = _require.domSymbolTree; // Serialization only requires a subset of the tree adapter interface.\n// Tree traversing\n\n\nexports.getFirstChild = node => node.firstChild;\n\nexports.getChildNodes = node => node.childNodesForSerializing || domSymbolTree.childrenToArray(node);\n\nexports.getParentNode = node => node.parentNode;\n\nexports.getAttrList = node => idlUtils.wrapperForImpl(node._attributes); // Node data\n\n\nexports.getTagName = element => element._qualifiedName; // https://github.com/inikulin/parse5/issues/231\n\n\nexports.getNamespaceURI = element => element.namespaceURI;\n\nexports.getTextNodeContent = exports.getCommentNodeContent = node => node.data;\n\nexports.getDocumentTypeNodeName = node => node.name;\n\nexports.getDocumentTypeNodePublicId = node => node.publicId;\n\nexports.getDocumentTypeNodeSystemId = node => node.systemId;\n\nexports.getTemplateContent = templateElement => templateElement._templateContents;\n\nexports.getDocumentMode = document => document._mode; // Node types\n\n\nexports.isTextNode = node => node.nodeType === nodeTypes.TEXT_NODE;\n\nexports.isCommentNode = node => node.nodeType === nodeTypes.COMMENT_NODE;\n\nexports.isDocumentTypeNode = node => node.nodeType === nodeTypes.DOCUMENT_TYPE_NODE;\n\nexports.isElementNode = node => node.nodeType === nodeTypes.ELEMENT_NODE;","map":null,"metadata":{},"sourceType":"script"}