{"ast":null,"code":"\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\n\nconst idlUtils = require(\"../generated/utils.js\");\n\nconst ValidityState = require(\"../generated/ValidityState\");\n\nconst DefaultConstraintValidationImpl = require(\"../constraint-validation/DefaultConstraintValidation-impl\").implementation;\n\nconst _require = require(\"../../utils\"),\n      mixin = _require.mixin;\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nconst NODE_TYPE = require(\"../node-type\");\n\nconst HTMLCollection = require(\"../generated/HTMLCollection\");\n\nconst HTMLOptionsCollection = require(\"../generated/HTMLOptionsCollection\");\n\nconst _require2 = require(\"../helpers/internal-constants\"),\n      domSymbolTree = _require2.domSymbolTree;\n\nconst _require3 = require(\"../helpers/traversal\"),\n      closest = _require3.closest;\n\nconst _require4 = require(\"../helpers/form-controls\"),\n      getLabelsForLabelable = _require4.getLabelsForLabelable;\n\nclass HTMLSelectElementImpl extends HTMLElementImpl {\n  constructor(args, privateData) {\n    super(args, privateData);\n    this._options = HTMLOptionsCollection.createImpl([], {\n      element: this,\n      query: () => {\n        // Customized domSymbolTree.treeToArray() clone.\n        const array = [];\n\n        for (const child of domSymbolTree.childrenIterator(this)) {\n          if (child._localName === \"option\") {\n            array.push(child);\n          } else if (child._localName === \"optgroup\") {\n            for (const childOfGroup of domSymbolTree.childrenIterator(child)) {\n              if (childOfGroup._localName === \"option\") {\n                array.push(childOfGroup);\n              }\n            }\n          }\n        }\n\n        return array;\n      }\n    });\n    this._selectedOptions = null; // lazy\n\n    this._customValidityErrorMessage = \"\";\n    this._labels = null;\n  }\n\n  _formReset() {\n    for (const option of this.options) {\n      option._selectedness = option.hasAttribute(\"selected\");\n      option._dirtyness = false;\n    }\n\n    this._askedForAReset();\n  }\n\n  _askedForAReset() {\n    if (this.hasAttribute(\"multiple\")) {\n      return;\n    }\n\n    const selected = this.options.filter(opt => opt._selectedness);\n    const size = this._displaySize;\n\n    if (size === 1 && !selected.length) {\n      // select the first option that is not disabled\n      for (const option of this.options) {\n        let disabled = option.hasAttribute(\"disabled\");\n        const parentNode = domSymbolTree.parent(option);\n\n        if (parentNode && parentNode.nodeName.toUpperCase() === \"OPTGROUP\" && parentNode.hasAttribute(\"disabled\")) {\n          disabled = true;\n        }\n\n        if (!disabled) {\n          // (do not set dirty)\n          option._selectedness = true;\n          break;\n        }\n      }\n    } else if (selected.length >= 2) {\n      // select the last selected option\n      selected.forEach((option, index) => {\n        option._selectedness = index === selected.length - 1;\n      });\n    }\n  }\n\n  _descendantAdded(parent, child) {\n    if (child.nodeType === NODE_TYPE.ELEMENT_NODE) {\n      this._askedForAReset();\n    }\n\n    super._descendantAdded.apply(this, arguments);\n  }\n\n  _descendantRemoved(parent, child) {\n    if (child.nodeType === NODE_TYPE.ELEMENT_NODE) {\n      this._askedForAReset();\n    }\n\n    super._descendantRemoved.apply(this, arguments);\n  }\n\n  _attrModified(name) {\n    if (name === \"multiple\" || name === \"size\") {\n      this._askedForAReset();\n    }\n\n    super._attrModified.apply(this, arguments);\n  }\n\n  get _displaySize() {\n    if (this.hasAttribute(\"size\")) {\n      const attr = this.getAttribute(\"size\"); // We don't allow hexadecimal numbers here.\n      // eslint-disable-next-line radix\n\n      const size = parseInt(attr, 10);\n\n      if (!isNaN(size) && size >= 0) {\n        return size;\n      }\n    }\n\n    return this.hasAttribute(\"multiple\") ? 4 : 1;\n  }\n\n  get options() {\n    return this._options;\n  }\n\n  get selectedOptions() {\n    return HTMLCollection.createImpl([], {\n      element: this,\n      query: () => domSymbolTree.treeToArray(this, {\n        filter: node => node._localName === \"option\" && node._selectedness === true\n      })\n    });\n  }\n\n  get selectedIndex() {\n    for (let i = 0; i < this.options.length; i++) {\n      if (this.options.item(i)._selectedness) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  set selectedIndex(index) {\n    for (let i = 0; i < this.options.length; i++) {\n      this.options.item(i).selected = i === index;\n    }\n  }\n\n  get labels() {\n    return getLabelsForLabelable(this);\n  }\n\n  get value() {\n    let i = this.selectedIndex;\n\n    if (this.options.length && i === -1) {\n      i = 0;\n    }\n\n    if (i === -1) {\n      return \"\";\n    }\n\n    return this.options.item(i).value;\n  }\n\n  set value(val) {\n    for (const option of this.options) {\n      if (option.value === val) {\n        option._selectedness = true;\n        option._dirtyness = true;\n      } else {\n        option._selectedness = false;\n      }\n    }\n  }\n\n  get form() {\n    return closest(this, \"form\");\n  }\n\n  get type() {\n    return this.hasAttribute(\"multiple\") ? \"select-multiple\" : \"select-one\";\n  }\n\n  get [idlUtils.supportedPropertyIndices]() {\n    return this.options[idlUtils.supportedPropertyIndices];\n  }\n\n  get length() {\n    return this.options.length;\n  }\n\n  set length(value) {\n    this.options.length = value;\n  }\n\n  item(index) {\n    return this.options.item(index);\n  }\n\n  namedItem(name) {\n    return this.options.namedItem(name);\n  }\n\n  [idlUtils.indexedSetNew](index, value) {\n    return this.options[idlUtils.indexedSetNew](index, value);\n  }\n\n  [idlUtils.indexedSetExisting](index, value) {\n    return this.options[idlUtils.indexedSetExisting](index, value);\n  }\n\n  add(opt, before) {\n    this.options.add(opt, before);\n  }\n\n  remove(index) {\n    if (arguments.length > 0) {\n      index = conversions.long(index, {\n        context: \"Failed to execute 'remove' on 'HTMLSelectElement': parameter 1\"\n      });\n      this.options.remove(index);\n    } else {\n      super.remove();\n    }\n  }\n\n  _barredFromConstraintValidationSpecialization() {\n    return this.hasAttribute(\"readonly\");\n  } // Constraint validation: If the element has its required attribute specified,\n  // and either none of the option elements in the select element's list of options\n  // have their selectedness set to true, or the only option element in the select\n  // element's list of options with its selectedness set to true is the placeholder\n  // label option, then the element is suffering from being missing.\n\n\n  get validity() {\n    if (!this._validity) {\n      this._validity = ValidityState.createImpl(this, {\n        valueMissing: () => {\n          if (!this.hasAttribute(\"required\")) {\n            return false;\n          }\n\n          const selectedOptionIndex = this.selectedIndex;\n          return selectedOptionIndex < 0 || selectedOptionIndex === 0 && this._hasPlaceholderOption;\n        }\n      });\n    }\n\n    return this._validity;\n  } // If a select element has a required attribute specified, does not have a multiple attribute\n  // specified, and has a display size of 1; and if the value of the first option element in the\n  // select element's list of options (if any) is the empty string, and that option element's parent\n  // node is the select element(and not an optgroup element), then that option is the select\n  // element's placeholder label option.\n  // https://html.spec.whatwg.org/multipage/form-elements.html#placeholder-label-option\n\n\n  get _hasPlaceholderOption() {\n    return this.hasAttribute(\"required\") && !this.hasAttribute(\"multiple\") && this._displaySize === 1 && this.options.length > 0 && this.options.item(0).value === \"\" && this.options.item(0).parentNode._localName !== \"optgroup\";\n  }\n\n}\n\nmixin(HTMLSelectElementImpl.prototype, DefaultConstraintValidationImpl.prototype);\nmodule.exports = {\n  implementation: HTMLSelectElementImpl\n};","map":null,"metadata":{},"sourceType":"script"}