{"ast":null,"code":"\"use strict\";\n\nconst _require = require(\"../../utils\"),\n      reflectURLAttribute = _require.reflectURLAttribute;\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nconst idlUtils = require(\"../generated/utils\");\n\nconst _require2 = require(\"../helpers/stylesheets\"),\n      fetchStylesheet = _require2.fetchStylesheet;\n\nconst _require3 = require(\"../helpers/document-base-url\"),\n      parseURLToResultingURLRecord = _require3.parseURLToResultingURLRecord;\n\nconst whatwgURL = require(\"whatwg-url\"); // Important reading: \"appropriate times to obtain the resource\" in\n// https://html.spec.whatwg.org/multipage/semantics.html#link-type-stylesheet\n\n\nclass HTMLLinkElementImpl extends HTMLElementImpl {\n  constructor(args, privateData) {\n    super(args, privateData);\n    this.sheet = null;\n  }\n\n  _attach() {\n    super._attach();\n\n    if (isExternalResourceLink(this)) {\n      obtainTheResource(this);\n    }\n  }\n\n  _attrModified(name, value, oldValue) {\n    super._attrModified(name, value, oldValue);\n\n    if (name === \"href\" && this._attached && isExternalResourceLink(this)) {\n      obtainTheResource(this);\n    }\n  }\n\n  get _accept() {\n    return \"text/css,*/*;q=0.1\";\n  }\n\n  get href() {\n    return reflectURLAttribute(this, \"href\");\n  }\n\n  set href(value) {\n    this.setAttribute(\"href\", value);\n  }\n\n}\n\nmodule.exports = {\n  implementation: HTMLLinkElementImpl\n};\n\nfunction obtainTheResource(el) {\n  const href = el.getAttribute(\"href\");\n\n  if (href === null || href === \"\") {\n    return;\n  }\n\n  const url = parseURLToResultingURLRecord(href, el._ownerDocument);\n\n  if (url === null) {\n    return;\n  }\n\n  const serialized = whatwgURL.serializeURL(url);\n  fetchStylesheet(el, serialized);\n}\n\nfunction isExternalResourceLink(el) {\n  // for our purposes, only stylesheets can be external resource links\n  const wrapper = idlUtils.wrapperForImpl(el);\n\n  if (!/(?:[ \\t\\n\\r\\f]|^)stylesheet(?:[ \\t\\n\\r\\f]|$)/i.test(wrapper.rel)) {\n    // rel is a space-separated list of tokens, and the original rel types\n    // are case-insensitive.\n    return false;\n  }\n\n  return Boolean(el.href);\n}","map":null,"metadata":{},"sourceType":"script"}