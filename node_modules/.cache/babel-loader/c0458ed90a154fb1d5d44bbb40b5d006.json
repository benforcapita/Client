{"ast":null,"code":"\"use strict\";\n\nconst _require = require(\"../../utils\"),\n      mixin = _require.mixin;\n\nconst _require2 = require(\"../helpers/internal-constants\"),\n      domSymbolTree = _require2.domSymbolTree;\n\nconst NODE_TYPE = require(\"../node-type\");\n\nconst NodeImpl = require(\"./Node-impl\").implementation;\n\nconst NonElementParentNodeImpl = require(\"./NonElementParentNode-impl\").implementation;\n\nconst ParentNodeImpl = require(\"./ParentNode-impl\").implementation;\n\nclass DocumentFragmentImpl extends NodeImpl {\n  constructor(args, privateData) {\n    super(args, privateData);\n    this.nodeType = NODE_TYPE.DOCUMENT_FRAGMENT_NODE;\n  } // This is implemented separately for Document (which has a _ids cache) and DocumentFragment (which does not).\n\n\n  getElementById(id) {\n    if (id === \"\") {\n      return null;\n    }\n\n    for (const descendant of domSymbolTree.treeIterator(this)) {\n      if (descendant.nodeType === NODE_TYPE.ELEMENT_NODE && descendant.getAttributeNS(null, \"id\") === id) {\n        return descendant;\n      }\n    }\n\n    return null;\n  }\n\n}\n\nmixin(DocumentFragmentImpl.prototype, NonElementParentNodeImpl.prototype);\nmixin(DocumentFragmentImpl.prototype, ParentNodeImpl.prototype);\nmodule.exports = {\n  implementation: DocumentFragmentImpl\n};","map":null,"metadata":{},"sourceType":"script"}