{"ast":null,"code":"\"use strict\";\n\nconst DOMException = require(\"domexception\");\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nconst notImplemented = require(\"../../browser/not-implemented\");\n\nconst _require = require(\"../../utils\"),\n      reflectURLAttribute = _require.reflectURLAttribute;\n\nfunction getTimeRangeDummy() {\n  return {\n    length: 0,\n\n    start() {\n      return 0;\n    },\n\n    end() {\n      return 0;\n    }\n\n  };\n}\n\nclass HTMLMediaElementImpl extends HTMLElementImpl {\n  constructor(args, privateData) {\n    super(args, privateData);\n    this._muted = false;\n    this._volume = 1.0;\n    this.readyState = 0;\n    this.networkState = 0;\n    this.currentTime = 0;\n    this.currentSrc = \"\";\n    this.buffered = getTimeRangeDummy();\n    this.seeking = false;\n    this.duration = 0;\n    this.paused = true;\n    this.played = getTimeRangeDummy();\n    this.seekable = getTimeRangeDummy();\n    this.ended = false;\n    this.audioTracks = [];\n    this.videoTracks = [];\n    this.textTracks = [];\n  } // Implemented accoring to W3C Draft 22 August 2012\n\n\n  set defaultPlaybackRate(v) {\n    if (v === 0.0) {\n      throw new DOMException(\"The operation is not supported.\", \"NotSupportedError\");\n    }\n\n    if (this._defaultPlaybackRate !== v) {\n      this._defaultPlaybackRate = v;\n\n      this._dispatchRateChange();\n    }\n  }\n\n  _dispatchRateChange() {\n    const ev = this._ownerDocument.createEvent(\"HTMLEvents\");\n\n    ev.initEvent(\"ratechange\", false, false);\n    this.dispatchEvent(ev);\n  }\n\n  get defaultPlaybackRate() {\n    if (this._defaultPlaybackRate === undefined) {\n      return 1.0;\n    }\n\n    return this._defaultPlaybackRate;\n  }\n\n  get playbackRate() {\n    if (this._playbackRate === undefined) {\n      return 1.0;\n    }\n\n    return this._playbackRate;\n  }\n\n  set playbackRate(v) {\n    if (v !== this._playbackRate) {\n      this._playbackRate = v;\n\n      this._dispatchRateChange();\n    }\n  }\n\n  get muted() {\n    return this._muted;\n  }\n\n  _dispatchVolumeChange() {\n    const ev = this._ownerDocument.createEvent(\"HTMLEvents\");\n\n    ev.initEvent(\"volumechange\", false, false);\n    this.dispatchEvent(ev);\n  }\n\n  set muted(v) {\n    if (v !== this._muted) {\n      this._muted = v;\n\n      this._dispatchVolumeChange();\n    }\n  }\n\n  get defaultMuted() {\n    return this.getAttribute(\"muted\") !== null;\n  }\n\n  set defaultMuted(v) {\n    if (v) {\n      this.setAttribute(\"muted\", v);\n    } else {\n      this.removeAttribute(\"muted\");\n    }\n  }\n\n  get volume() {\n    return this._volume;\n  }\n\n  set volume(v) {\n    if (v < 0 || v > 1) {\n      throw new DOMException(\"The index is not in the allowed range.\", \"IndexSizeError\");\n    }\n\n    if (this._volume !== v) {\n      this._volume = v;\n\n      this._dispatchVolumeChange();\n    }\n  } // Not (yet) implemented according to spec\n  // Should return sane default values\n\n\n  load() {\n    notImplemented(\"HTMLMediaElement.prototype.load\", this._ownerDocument._defaultView);\n  }\n\n  canPlayType() {\n    return \"\";\n  }\n\n  play() {\n    notImplemented(\"HTMLMediaElement.prototype.play\", this._ownerDocument._defaultView);\n  }\n\n  pause() {\n    notImplemented(\"HTMLMediaElement.prototype.pause\", this._ownerDocument._defaultView);\n  }\n\n  addTextTrack() {\n    notImplemented(\"HTMLMediaElement.prototype.addNextTrack\", this._ownerDocument._defaultView);\n  }\n\n  get src() {\n    return reflectURLAttribute(this, \"src\");\n  }\n\n  set src(value) {\n    this.setAttribute(\"src\", value);\n  }\n\n}\n\nmodule.exports = {\n  implementation: HTMLMediaElementImpl\n};","map":null,"metadata":{},"sourceType":"script"}