{"ast":null,"code":"\"use strict\";\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nconst _require = require(\"../helpers/strings\"),\n      parseFloatingPointNumber = _require.parseFloatingPointNumber;\n\nconst _require2 = require(\"../helpers/form-controls\"),\n      getLabelsForLabelable = _require2.getLabelsForLabelable;\n\nclass HTMLMeterElementImpl extends HTMLElementImpl {\n  constructor(args, privateData) {\n    super(args, privateData);\n    this._labels = null;\n  } // https://html.spec.whatwg.org/multipage/form-elements.html#concept-meter-minimum\n\n\n  get _minimumValue() {\n    const min = this.getAttribute(\"min\");\n\n    if (min === null) {\n      return 0;\n    }\n\n    const parsed = parseFloatingPointNumber(min);\n\n    if (Number.isNaN(parsed)) {\n      return 0;\n    }\n\n    return parsed;\n  } // https://html.spec.whatwg.org/multipage/form-elements.html#concept-meter-maximum\n\n\n  get _maximumValue() {\n    let candidate = 1.0;\n    const max = this.getAttribute(\"max\");\n\n    if (max !== null) {\n      const parsed = parseFloatingPointNumber(max);\n\n      if (!Number.isNaN(parsed)) {\n        candidate = parsed;\n      }\n    }\n\n    const minimumValue = this._minimumValue;\n    return candidate >= minimumValue ? candidate : minimumValue;\n  } // https://html.spec.whatwg.org/multipage/form-elements.html#concept-meter-actual\n\n\n  get _actualValue() {\n    let candidate = 0;\n    const value = this.getAttribute(\"value\");\n\n    if (value !== null) {\n      const parsed = parseFloatingPointNumber(value);\n\n      if (!Number.isNaN(parsed)) {\n        candidate = parsed;\n      }\n    }\n\n    const minimumValue = this._minimumValue;\n\n    if (candidate < minimumValue) {\n      return minimumValue;\n    }\n\n    const maximumValue = this._maximumValue;\n    return candidate > maximumValue ? maximumValue : candidate;\n  } // https://html.spec.whatwg.org/multipage/form-elements.html#concept-meter-low\n\n\n  get _lowBoundary() {\n    const minimumValue = this._minimumValue;\n    let candidate = minimumValue;\n    const low = this.getAttribute(\"low\");\n\n    if (low !== null) {\n      const parsed = parseFloatingPointNumber(low);\n\n      if (!Number.isNaN(parsed)) {\n        candidate = parsed;\n      }\n    }\n\n    if (candidate < minimumValue) {\n      return minimumValue;\n    }\n\n    const maximumValue = this._maximumValue;\n    return candidate > maximumValue ? maximumValue : candidate;\n  } // https://html.spec.whatwg.org/multipage/form-elements.html#concept-meter-high\n\n\n  get _highBoundary() {\n    const maximumValue = this._maximumValue;\n    let candidate = maximumValue;\n    const high = this.getAttribute(\"high\");\n\n    if (high !== null) {\n      const parsed = parseFloatingPointNumber(high);\n\n      if (!Number.isNaN(parsed)) {\n        candidate = parsed;\n      }\n    }\n\n    const lowBoundary = this._lowBoundary;\n\n    if (candidate < lowBoundary) {\n      return lowBoundary;\n    }\n\n    return candidate > maximumValue ? maximumValue : candidate;\n  } // https://html.spec.whatwg.org/multipage/form-elements.html#concept-meter-optimum\n\n\n  get _optimumPoint() {\n    const minimumValue = this._minimumValue;\n    const maximumValue = this._maximumValue;\n    let candidate = (minimumValue + maximumValue) / 2;\n    const optimum = this.getAttribute(\"optimum\");\n\n    if (optimum !== null) {\n      const parsed = parseFloatingPointNumber(optimum);\n\n      if (!Number.isNaN(parsed)) {\n        candidate = parsed;\n      }\n    }\n\n    if (candidate < minimumValue) {\n      return minimumValue;\n    }\n\n    return candidate > maximumValue ? maximumValue : candidate;\n  }\n\n  get labels() {\n    return getLabelsForLabelable(this);\n  }\n\n  get value() {\n    return this._actualValue;\n  }\n\n  set value(val) {\n    this.setAttribute(\"value\", String(val));\n  }\n\n  get min() {\n    return this._minimumValue;\n  }\n\n  set min(val) {\n    this.setAttribute(\"min\", String(val));\n  }\n\n  get max() {\n    return this._maximumValue;\n  }\n\n  set max(val) {\n    this.setAttribute(\"max\", String(val));\n  }\n\n  get low() {\n    return this._lowBoundary;\n  }\n\n  set low(val) {\n    this.setAttribute(\"low\", String(val));\n  }\n\n  get high() {\n    return this._highBoundary;\n  }\n\n  set high(val) {\n    this.setAttribute(\"high\", String(val));\n  }\n\n  get optimum() {\n    return this._optimumPoint;\n  }\n\n  set optimum(val) {\n    this.setAttribute(\"optimum\", String(val));\n  }\n\n}\n\nmodule.exports = {\n  implementation: HTMLMeterElementImpl\n};","map":null,"metadata":{},"sourceType":"script"}