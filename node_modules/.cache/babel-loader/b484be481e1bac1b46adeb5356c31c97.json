{"ast":null,"code":"import React, { useRef, useState, useEffect, useLayoutEffect, useImperativeHandle } from 'react';\nimport { css } from 'emotion';\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _taggedTemplateLiteral(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n    return arr2;\n  }\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n} // https://tc39.github.io/ecma262/#sec-array.prototype.includes\n\n\nif (!Array.prototype.includes) {\n  Object.defineProperty(Array.prototype, 'includes', {\n    value: function value(valueToFind, fromIndex) {\n      if (this == null) {\n        throw new TypeError('\"this\" is null or not defined');\n      } // 1. Let O be ? ToObject(this value).\n\n\n      var o = Object(this); // 2. Let len be ? ToLength(? Get(O, \"length\")).\n\n      var len = o.length >>> 0; // 3. If len is 0, return false.\n\n      if (len === 0) {\n        return false;\n      } // 4. Let n be ? ToInteger(fromIndex).\n      //    (If fromIndex is undefined, this step produces the value 0.)\n\n\n      var n = fromIndex | 0; // 5. If n ≥ 0, then\n      //  a. Let k be n.\n      // 6. Else n < 0,\n      //  a. Let k be len + n.\n      //  b. If k < 0, let k be 0.\n\n      var k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);\n\n      function sameValueZero(x, y) {\n        return x === y || typeof x === 'number' && typeof y === 'number' && isNaN(x) && isNaN(y);\n      } // 7. Repeat, while k < len\n\n\n      while (k < len) {\n        // a. Let elementK be the result of ? Get(O, ! ToString(k)).\n        // b. If SameValueZero(valueToFind, elementK) is true, return true.\n        if (sameValueZero(o[k], valueToFind)) {\n          return true;\n        } // c. Increase k by 1.\n\n\n        k++;\n      } // 8. Return false\n\n\n      return false;\n    }\n  });\n} // Production steps of ECMA-262, Edition 6, 22.1.2.1\n\n\nif (!Array.from) {\n  Array.from = function () {\n    var toStr = Object.prototype.toString;\n\n    var isCallable = function isCallable(fn) {\n      return typeof fn === 'function' || toStr.call(fn) === '[object Function]';\n    };\n\n    var toInteger = function toInteger(value) {\n      var number = Number(value);\n\n      if (isNaN(number)) {\n        return 0;\n      }\n\n      if (number === 0 || !isFinite(number)) {\n        return number;\n      }\n\n      return (number > 0 ? 1 : -1) * Math.floor(Math.abs(number));\n    };\n\n    var maxSafeInteger = Math.pow(2, 53) - 1;\n\n    var toLength = function toLength(value) {\n      var len = toInteger(value);\n      return Math.min(Math.max(len, 0), maxSafeInteger);\n    }; // The length property of the from method is 1.\n\n\n    return function from(arrayLike\n    /*, mapFn, thisArg */\n    ) {\n      // 1. Let C be the this value.\n      var C = this; // 2. Let items be ToObject(arrayLike).\n\n      var items = Object(arrayLike); // 3. ReturnIfAbrupt(items).\n\n      if (arrayLike == null) {\n        throw new TypeError('Array.from requires an array-like object - not null or undefined');\n      } // 4. If mapfn is undefined, then let mapping be false.\n\n\n      var mapFn = arguments.length > 1 ? arguments[1] : void undefined;\n      var T;\n\n      if (typeof mapFn !== 'undefined') {\n        // 5. else\n        // 5. a If IsCallable(mapfn) is false, throw a TypeError exception.\n        if (!isCallable(mapFn)) {\n          throw new TypeError('Array.from: when provided, the second argument must be a function');\n        } // 5. b. If thisArg was supplied, let T be thisArg; else let T be undefined.\n\n\n        if (arguments.length > 2) {\n          T = arguments[2];\n        }\n      } // 10. Let lenValue be Get(items, \"length\").\n      // 11. Let len be ToLength(lenValue).\n\n\n      var len = toLength(items.length); // 13. If IsConstructor(C) is true, then\n      // 13. a. Let A be the result of calling the [[Construct]] internal method\n      // of C with an argument list containing the single item len.\n      // 14. a. Else, Let A be ArrayCreate(len).\n\n      var A = isCallable(C) ? Object(new C(len)) : new Array(len); // 16. Let k be 0.\n\n      var k = 0; // 17. Repeat, while k < len… (also steps a - h)\n\n      var kValue;\n\n      while (k < len) {\n        kValue = items[k];\n\n        if (mapFn) {\n          A[k] = typeof T === 'undefined' ? mapFn(kValue, k) : mapFn.call(T, kValue, k);\n        } else {\n          A[k] = kValue;\n        }\n\n        k += 1;\n      } // 18. Let putStatus be Put(A, \"length\", len, true).\n\n\n      A.length = len; // 20. Return A.\n\n      return A;\n    };\n  }();\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n                                    flex: 0 0 auto;\\n                                    height: 100%;\\n                                    width: auto;\\n                                    max-width: 100%;\\n                                    object-fit: contain;\\n                                    overflow-y: auto;\\n                                    display: block;\\n                                    user-select: none;\\n\\n                                    * {\\n                                        /* height: 100%; */\\n                                        /* width: auto; */\\n                                        max-width: 100%;\\n                                        object-fit: contain;\\n                                    }\\n                                \"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n                            position: absolute;\\n                            height: 100%;\\n                            left: 0;\\n                            right: 0;\\n                            pointer-events: none;\\n                            z-index: 20;\\n                            * {\\n                                pointer-events: auto;\\n                            }\\n                        \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n                    height: 28em;\\n                \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nvar FULLY_VISIBLE = 'FULLY_VISIBLE';\nvar PARTIALLY_VISIBLE = 'PARTIALLY_VISIBLE';\nvar NOT_VISIBLE = 'NOT_VISIBLE';\n\nfunction getStatus(items) {\n  var previous = null;\n  var current = [];\n  var next = null;\n  var prevItem;\n  items.forEach(function (item) {\n    // There may be any number of FULLY_VISIBLE items.\n    if (item.visibility === FULLY_VISIBLE) {\n      current.push(item.index);\n    } // There can only be two simultaneous PARTIALLY_VISIBLE items.\n    // If they are adjacent, there can be no FULLY_VISIBLE items.\n    // So these two items are 'previous' and 'next'.\n    else if (item.visibility === PARTIALLY_VISIBLE && prevItem && prevItem.visibility === PARTIALLY_VISIBLE) {\n        previous = prevItem.index;\n        next = item.index;\n      } // Keep pushing 'previous' forward each iteration until one of\n      // the above cases is true.\n      else if (current.length === 0 && next === null) {\n          previous = item.index;\n        } // The item following the final FULLY_VISIBLE item is 'next'.\n        else if (current.length > 0 && next === null) {\n            next = item.index;\n          } // Save this item to refer back to in the next iteration.\n\n\n    prevItem = item;\n  });\n  return {\n    previous: previous,\n    current: current,\n    next: next\n  };\n}\n\nvar ImageScroller = React.forwardRef(Scroller);\n\nfunction Scroller(_ref, ref) {\n  var children = _ref.children,\n      _ref$className = _ref.className,\n      className = _ref$className === void 0 ? '' : _ref$className,\n      _ref$hideScrollbar = _ref.hideScrollbar,\n      hideScrollbar = _ref$hideScrollbar === void 0 ? true : _ref$hideScrollbar,\n      _ref$innerClassName = _ref.innerClassName,\n      innerClassName = _ref$innerClassName === void 0 ? '' : _ref$innerClassName,\n      _ref$innerStyle = _ref.innerStyle,\n      items = _ref.items,\n      _ref$onChange = _ref.onChange,\n      onChange = _ref$onChange === void 0 ? function () {} : _ref$onChange,\n      _ref$renderWithin = _ref.renderWithin,\n      renderWithin = _ref$renderWithin === void 0 ? null : _ref$renderWithin,\n      _ref$scrollOnClick = _ref.scrollOnClick,\n      scrollOnClick = _ref$scrollOnClick === void 0 ? true : _ref$scrollOnClick,\n      _ref$scrollWithArrows = _ref.scrollWithArrows,\n      scrollWithArrows = _ref$scrollWithArrows === void 0 ? true : _ref$scrollWithArrows,\n      _ref$scrollContainerC = _ref.scrollContainerClassName,\n      scrollContainerClassName = _ref$scrollContainerC === void 0 ? '' : _ref$scrollContainerC,\n      _ref$scrollContainerS = _ref.scrollContainerStyle,\n      scrollContainerStyle = _ref$scrollContainerS === void 0 ? {} : _ref$scrollContainerS,\n      props = _objectWithoutProperties(_ref, [\"children\", \"className\", \"hideScrollbar\", \"innerClassName\", \"innerStyle\", \"items\", \"onChange\", \"renderWithin\", \"scrollOnClick\", \"scrollWithArrows\", \"scrollContainerClassName\", \"scrollContainerStyle\"]); // Either `items` or `children` may be used to set scroll items (`items` has priority)\n\n\n  items = items || React.Children.toArray(children);\n  var mainRef = useRef(null);\n  var scrollContainerRef = useRef(null);\n  var itemsContainerRef = useRef(null); // Track the indices of relevant items\n\n  var _useState = useState({\n    previous: null,\n    current: [],\n    next: null\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      status = _useState2[0],\n      setStatus = _useState2[1];\n\n  useLayoutEffect(function () {\n    var main = mainRef.current;\n    var sc = scrollContainerRef.current;\n    sc.style.overflowX = 'scroll';\n    /* Manually hide the horizontal scrollbar with a hidden overflow.\r\n       `scrollbar-width: none` is not available across-the-board at time of implementation.\r\n    */\n\n    if (hideScrollbar) {\n      main.style.overflowY = 'hidden';\n      var scrollbarWidth = main.clientHeight - sc.clientHeight;\n      sc.style.height = \"calc(100% + \".concat(scrollbarWidth, \"px)\");\n    } else {\n      main.style.overflowY = '';\n      sc.style.height = '100%';\n    }\n    /* Manually limit the height of the contents of each item wrapper. There is no\r\n       reliable CSS solution due to some weird shenanigans with the intrinsic\r\n       height of images, or something – I'm not quite sure. I could not find a way\r\n       to reliably limit the width of the item wrapper to its contents\r\n       (aka shrinkwrap). Edge/IE semi-randomly set the wrapper width to the pixel\r\n       width of the containing img instead of following the intrinsic ratio of its\r\n       height, and Firefox/Chrome introduced a phantom padding-right when toggling\r\n       the scrollbar (caused by extra width).\r\n    */\n\n\n    _toConsumableArray(itemsContainerRef.current.children).forEach(function (item) {\n      item.style.height = \"\".concat(sc.clientHeight, \"px\");\n    });\n    /* Make sure renderWithin doesn't overlap the scrollContainer's scrollbar.\r\n       `renderWithin` is absolutely positioned, so the padding and scrollbar of the\r\n       parent element are ignored.\r\n    */\n\n\n    _toConsumableArray(sc.children).forEach(function (element) {\n      element.style.maxHeight = \"\".concat(sc.clientHeight, \"px\");\n    });\n  }, [hideScrollbar]);\n  useEffect(function () {\n    // IntersectionObservers only report what's _changed_, so keep a list\n    var intersectionRatios = new Map();\n    var observer = new IntersectionObserver(observerCallback, {\n      root: scrollContainerRef.current,\n      threshold: [0, 0.98]\n    });\n\n    _toConsumableArray(itemsContainerRef.current.children).forEach(function (item) {\n      observer.observe(item);\n    });\n\n    function observerCallback(entries) {\n      // Update the current intersectionRatio of each entry\n      entries.forEach(function (entry) {\n        intersectionRatios.set(parseInt(entry.target.getAttribute('data-item-id'), 10), entry.intersectionRatio);\n      }); // Update the status\n\n      var items = _toConsumableArray(itemsContainerRef.current.children);\n\n      var visibilityList = items.map(function (item) {\n        var itemIndex = item.getAttribute('data-item-id');\n        itemIndex = parseInt(itemIndex, 10);\n        var ratio = intersectionRatios.get(itemIndex);\n        var visibility;\n\n        if (ratio > 0.98) {\n          visibility = FULLY_VISIBLE;\n        } else if (ratio === 0) {\n          visibility = NOT_VISIBLE;\n        } else visibility = PARTIALLY_VISIBLE;\n\n        return {\n          index: itemIndex,\n          visibility: visibility\n        };\n      });\n      var newStatus = getStatus(visibilityList);\n      setStatus(newStatus);\n      onChange(newStatus);\n    }\n  }, []);\n  useEffect(function () {\n    function handleKeyPress(event) {\n      if (scrollWithArrows && mainRef.current.contains(event.target)) {\n        if (event.key === 'ArrowRight') {\n          event.preventDefault();\n          next();\n        } else if (event.key === 'ArrowLeft') {\n          event.preventDefault();\n          previous();\n        }\n      }\n    }\n\n    window.addEventListener('keydown', handleKeyPress);\n    return function cleanUp() {\n      window.removeEventListener('keydown', handleKeyPress);\n    };\n  }, [next, previous]);\n\n  function next() {\n    scrollTo(status.next, 'nearest');\n  }\n\n  function previous() {\n    scrollTo(status.previous, 'nearest');\n  }\n\n  function scrollTo(itemIndex) {\n    var position = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'center';\n\n    if (itemIndex === undefined || itemIndex === null || itemIndex < 0) {\n      return;\n    }\n\n    itemIndex = Math.min(itemIndex, items.length - 1);\n    var mainWidth = mainRef.current.offsetWidth;\n    var element = itemsContainerRef.current.children[itemIndex];\n    if (!element) return; // Option A: Center the item\n\n    if (position === 'center') {\n      var margin = (mainWidth - element.offsetWidth) / 2;\n      scrollContainerRef.current.scrollTo({\n        top: 0,\n        left: element.offsetLeft - margin,\n        // parent element must be positioned\n        behavior: 'smooth'\n      });\n    } // Option B: Fit in as many itemss as possible\n    else if (position === 'nearest') {\n        var fit = function fit(initialWidth, step) {\n          var width = 0;\n\n          while (true) {\n            var adjacentElement = itemsContainerRef.current.children[itemIndex + step];\n            if (!adjacentElement) break;\n            var adjacentWidth = adjacentElement.offsetWidth;\n\n            if (initialWidth + width + adjacentWidth < mainWidth) {\n              width += adjacentWidth;\n            } else {\n              break;\n            }\n\n            step += step;\n          }\n\n          return width;\n        }; // Determine the direction to look first\n\n\n        var step;\n\n        if (status.current.length > 0) {\n          step = itemIndex > status.current[0] ? -1 : 1;\n        } else {\n          step = itemIndex > status.previous ? -1 : 1;\n        } // Look back and ahead to see if any other items will fit too\n\n\n        var backWidth = fit(element.offsetWidth, step);\n        var aheadWidth = fit(element.offsetWidth + backWidth, -step);\n        var width = element.offsetWidth + backWidth + aheadWidth;\n\n        var _margin = (mainWidth - width) / 2;\n\n        scrollContainerRef.current.scrollTo({\n          top: 0,\n          left: element.offsetLeft - (step === 1 ? aheadWidth : backWidth) - _margin,\n          behavior: 'smooth'\n        });\n\n        if (element.offsetLeft === 0) {\n          mainRef.current.focus();\n        }\n      }\n  }\n\n  useImperativeHandle(ref, function () {\n    return {\n      next: next,\n      previous: previous,\n      scrollTo: scrollTo\n    };\n  }, [next, previous, scrollTo]);\n  return React.createElement(\"div\", _extends({\n    ref: mainRef,\n    tabIndex: 0\n  }, props, {\n    className: className + ' ' + css(_templateObject())\n  }), React.createElement(\"div\", _defineProperty({\n    ref: scrollContainerRef,\n    style: scrollContainerStyle,\n    className: scrollContainerClassName\n  }, \"style\", {\n    height: '100%',\n    overflowX: 'scroll'\n  }), renderWithin && React.createElement(\"div\", {\n    className: css(_templateObject2())\n  }, renderWithin({\n    scrollTo: scrollTo,\n    next: next,\n    previous: previous,\n    items: items,\n    status: status\n  })), React.createElement(\"div\", {\n    ref: itemsContainerRef,\n    className: innerClassName,\n    style: {\n      display: 'flex',\n      height: '100%',\n      position: 'relative' // for measuring offset of child items\n\n    }\n  }, items.map(function (item, itemIndex) {\n    return React.cloneElement(item, {\n      'data-item-id': itemIndex,\n      key: itemIndex,\n      onClick: function onClick(event) {\n        if (scrollOnClick) {\n          event.preventDefault();\n\n          if (status.current.includes(itemIndex)) {\n            scrollTo(itemIndex, 'centre');\n          } else {\n            scrollTo(itemIndex, 'nearest');\n          }\n        }\n      },\n      className: css(_templateObject3()) + ' ' + (item.props.className || '')\n    });\n  }))));\n}\n\nexport default ImageScroller;","map":null,"metadata":{},"sourceType":"module"}