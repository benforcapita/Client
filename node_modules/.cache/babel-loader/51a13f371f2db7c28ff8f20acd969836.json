{"ast":null,"code":"\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\n\nconst utils = require(\"./utils.js\");\n\nconst convertKeyboardEventInit = require(\"./KeyboardEventInit.js\").convert;\n\nconst impl = utils.implSymbol;\n\nconst UIEvent = require(\"./UIEvent.js\");\n\nfunction KeyboardEvent(type) {\n  if (new.target === undefined) {\n    throw new TypeError(\"Failed to construct 'KeyboardEvent'. Please use the 'new' operator; this constructor \" + \"cannot be called as a function.\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to construct 'KeyboardEvent': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  const args = [];\n  {\n    let curArg = arguments[0];\n    curArg = conversions[\"DOMString\"](curArg, {\n      context: \"Failed to construct 'KeyboardEvent': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  {\n    let curArg = arguments[1];\n    curArg = convertKeyboardEventInit(curArg, {\n      context: \"Failed to construct 'KeyboardEvent': parameter 2\"\n    });\n    args.push(curArg);\n  }\n  iface.setup(this, args);\n}\n\nObject.setPrototypeOf(KeyboardEvent.prototype, UIEvent.interface.prototype);\nObject.setPrototypeOf(KeyboardEvent, UIEvent.interface);\nObject.defineProperty(KeyboardEvent, \"prototype\", {\n  value: KeyboardEvent.prototype,\n  writable: false,\n  enumerable: false,\n  configurable: false\n});\n\nKeyboardEvent.prototype.getModifierState = function getModifierState(keyArg) {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'getModifierState' on 'KeyboardEvent': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  const args = [];\n  {\n    let curArg = arguments[0];\n    curArg = conversions[\"DOMString\"](curArg, {\n      context: \"Failed to execute 'getModifierState' on 'KeyboardEvent': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  return this[impl].getModifierState(...args);\n};\n\nKeyboardEvent.prototype.initKeyboardEvent = function initKeyboardEvent(typeArg) {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'initKeyboardEvent' on 'KeyboardEvent': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  const args = [];\n  {\n    let curArg = arguments[0];\n    curArg = conversions[\"DOMString\"](curArg, {\n      context: \"Failed to execute 'initKeyboardEvent' on 'KeyboardEvent': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  {\n    let curArg = arguments[1];\n\n    if (curArg !== undefined) {\n      curArg = conversions[\"boolean\"](curArg, {\n        context: \"Failed to execute 'initKeyboardEvent' on 'KeyboardEvent': parameter 2\"\n      });\n    } else {\n      curArg = false;\n    }\n\n    args.push(curArg);\n  }\n  {\n    let curArg = arguments[2];\n\n    if (curArg !== undefined) {\n      curArg = conversions[\"boolean\"](curArg, {\n        context: \"Failed to execute 'initKeyboardEvent' on 'KeyboardEvent': parameter 3\"\n      });\n    } else {\n      curArg = false;\n    }\n\n    args.push(curArg);\n  }\n  {\n    let curArg = arguments[3];\n\n    if (curArg !== undefined) {\n      if (curArg === null || curArg === undefined) {\n        curArg = null;\n      } else {\n        curArg = utils.tryImplForWrapper(curArg);\n      }\n    } else {\n      curArg = null;\n    }\n\n    args.push(curArg);\n  }\n  {\n    let curArg = arguments[4];\n\n    if (curArg !== undefined) {\n      curArg = conversions[\"DOMString\"](curArg, {\n        context: \"Failed to execute 'initKeyboardEvent' on 'KeyboardEvent': parameter 5\"\n      });\n    } else {\n      curArg = \"\";\n    }\n\n    args.push(curArg);\n  }\n  {\n    let curArg = arguments[5];\n\n    if (curArg !== undefined) {\n      curArg = conversions[\"unsigned long\"](curArg, {\n        context: \"Failed to execute 'initKeyboardEvent' on 'KeyboardEvent': parameter 6\"\n      });\n    } else {\n      curArg = 0;\n    }\n\n    args.push(curArg);\n  }\n  {\n    let curArg = arguments[6];\n\n    if (curArg !== undefined) {\n      curArg = conversions[\"boolean\"](curArg, {\n        context: \"Failed to execute 'initKeyboardEvent' on 'KeyboardEvent': parameter 7\"\n      });\n    } else {\n      curArg = false;\n    }\n\n    args.push(curArg);\n  }\n  {\n    let curArg = arguments[7];\n\n    if (curArg !== undefined) {\n      curArg = conversions[\"boolean\"](curArg, {\n        context: \"Failed to execute 'initKeyboardEvent' on 'KeyboardEvent': parameter 8\"\n      });\n    } else {\n      curArg = false;\n    }\n\n    args.push(curArg);\n  }\n  {\n    let curArg = arguments[8];\n\n    if (curArg !== undefined) {\n      curArg = conversions[\"boolean\"](curArg, {\n        context: \"Failed to execute 'initKeyboardEvent' on 'KeyboardEvent': parameter 9\"\n      });\n    } else {\n      curArg = false;\n    }\n\n    args.push(curArg);\n  }\n  {\n    let curArg = arguments[9];\n\n    if (curArg !== undefined) {\n      curArg = conversions[\"boolean\"](curArg, {\n        context: \"Failed to execute 'initKeyboardEvent' on 'KeyboardEvent': parameter 10\"\n      });\n    } else {\n      curArg = false;\n    }\n\n    args.push(curArg);\n  }\n  return this[impl].initKeyboardEvent(...args);\n};\n\nObject.defineProperty(KeyboardEvent.prototype, \"key\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"key\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(KeyboardEvent.prototype, \"code\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"code\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(KeyboardEvent.prototype, \"location\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"location\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(KeyboardEvent.prototype, \"ctrlKey\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"ctrlKey\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(KeyboardEvent.prototype, \"shiftKey\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"shiftKey\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(KeyboardEvent.prototype, \"altKey\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"altKey\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(KeyboardEvent.prototype, \"metaKey\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"metaKey\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(KeyboardEvent.prototype, \"repeat\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"repeat\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(KeyboardEvent.prototype, \"isComposing\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"isComposing\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(KeyboardEvent.prototype, \"charCode\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"charCode\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(KeyboardEvent.prototype, \"keyCode\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"keyCode\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(KeyboardEvent, \"DOM_KEY_LOCATION_STANDARD\", {\n  value: 0x00,\n  enumerable: true\n});\nObject.defineProperty(KeyboardEvent.prototype, \"DOM_KEY_LOCATION_STANDARD\", {\n  value: 0x00,\n  enumerable: true\n});\nObject.defineProperty(KeyboardEvent, \"DOM_KEY_LOCATION_LEFT\", {\n  value: 0x01,\n  enumerable: true\n});\nObject.defineProperty(KeyboardEvent.prototype, \"DOM_KEY_LOCATION_LEFT\", {\n  value: 0x01,\n  enumerable: true\n});\nObject.defineProperty(KeyboardEvent, \"DOM_KEY_LOCATION_RIGHT\", {\n  value: 0x02,\n  enumerable: true\n});\nObject.defineProperty(KeyboardEvent.prototype, \"DOM_KEY_LOCATION_RIGHT\", {\n  value: 0x02,\n  enumerable: true\n});\nObject.defineProperty(KeyboardEvent, \"DOM_KEY_LOCATION_NUMPAD\", {\n  value: 0x03,\n  enumerable: true\n});\nObject.defineProperty(KeyboardEvent.prototype, \"DOM_KEY_LOCATION_NUMPAD\", {\n  value: 0x03,\n  enumerable: true\n});\nObject.defineProperty(KeyboardEvent.prototype, Symbol.toStringTag, {\n  value: \"KeyboardEvent\",\n  writable: false,\n  enumerable: false,\n  configurable: true\n});\nconst iface = {\n  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`\n  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as\n  // implementing this mixin interface.\n  _mixedIntoPredicates: [],\n\n  is(obj) {\n    if (obj) {\n      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {\n        return true;\n      }\n\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(obj)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n\n  isImpl(obj) {\n    if (obj) {\n      if (obj instanceof Impl.implementation) {\n        return true;\n      }\n\n      const wrapper = utils.wrapperForImpl(obj);\n\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(wrapper)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n\n  convert(obj, {\n    context = \"The provided value\"\n  } = {}) {\n    if (module.exports.is(obj)) {\n      return utils.implForWrapper(obj);\n    }\n\n    throw new TypeError(\"\".concat(context, \" is not of type 'KeyboardEvent'.\"));\n  },\n\n  create(constructorArgs, privateData) {\n    let obj = Object.create(KeyboardEvent.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n\n  createImpl(constructorArgs, privateData) {\n    let obj = Object.create(KeyboardEvent.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return utils.implForWrapper(obj);\n  },\n\n  _internalSetup(obj) {\n    UIEvent._internalSetup(obj);\n  },\n\n  setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n    privateData.wrapper = obj;\n\n    this._internalSetup(obj);\n\n    Object.defineProperty(obj, impl, {\n      value: new Impl.implementation(constructorArgs, privateData),\n      writable: false,\n      enumerable: false,\n      configurable: true\n    });\n    obj[impl][utils.wrapperSymbol] = obj;\n\n    if (Impl.init) {\n      Impl.init(obj[impl], privateData);\n    }\n\n    return obj;\n  },\n\n  interface: KeyboardEvent,\n  expose: {\n    Window: {\n      KeyboardEvent\n    }\n  }\n}; // iface\n\nmodule.exports = iface;\n\nconst Impl = require(\"../events/KeyboardEvent-impl.js\");","map":null,"metadata":{},"sourceType":"script"}