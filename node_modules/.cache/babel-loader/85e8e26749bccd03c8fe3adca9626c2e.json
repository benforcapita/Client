{"ast":null,"code":"\"use strict\";\n\nconst hasOwnProp = Object.prototype.hasOwnProperty;\n\nconst namedPropertiesTracker = require(\"../named-properties-tracker\");\n\nconst NODE_TYPE = require(\"./node-type\");\n\nconst HTMLCollection = require(\"./generated/HTMLCollection\");\n\nconst _require = require(\"../utils\"),\n      treeOrderSorter = _require.treeOrderSorter;\n\nconst idlUtils = require(\"./generated/utils\");\n\nfunction isNamedPropertyElement(element) {\n  // (for the name attribute)\n  // use hasOwnProperty to make sure contentWindow comes from the prototype,\n  // and is not set directly on the node by a script.\n  if (\"contentWindow\" in element && !hasOwnProp.call(element, \"contentWindow\")) {\n    return true;\n  }\n\n  switch (element.nodeName) {\n    case \"A\":\n    case \"AREA\":\n    case \"EMBED\":\n    case \"FORM\":\n    case \"FRAMESET\":\n    case \"IMG\":\n    case \"OBJECT\":\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nfunction namedPropertyResolver(window, name, values) {\n  function getResult() {\n    const results = [];\n\n    for (const node of values().keys()) {\n      if (node.nodeType !== NODE_TYPE.ELEMENT_NODE) {\n        continue;\n      }\n\n      if (node.getAttribute(\"id\") === name) {\n        results.push(node);\n      } else if (node.getAttribute(\"name\") === name && isNamedPropertyElement(node)) {\n        results.push(node);\n      }\n    }\n\n    results.sort(treeOrderSorter);\n    return results;\n  }\n\n  const document = window._document;\n  const objects = HTMLCollection.create([], {\n    element: idlUtils.implForWrapper(document.documentElement),\n    query: getResult\n  });\n  const length = objects.length;\n\n  for (let i = 0; i < length; ++i) {\n    const node = objects[i];\n\n    if (\"contentWindow\" in node && !hasOwnProp.call(node, \"contentWindow\") && node.getAttribute(\"name\") === name) {\n      return node.contentWindow;\n    }\n  }\n\n  if (length === 0) {\n    return undefined;\n  }\n\n  if (length === 1) {\n    return objects[0];\n  }\n\n  return objects;\n}\n\nexports.initializeWindow = function (window, windowProxy) {\n  namedPropertiesTracker.create(window, windowProxy, namedPropertyResolver.bind(null));\n};\n\nexports.elementAttributeModified = function (element, name, value, oldValue) {\n  if (!element._attached) {\n    return;\n  }\n\n  const useName = isNamedPropertyElement(element);\n\n  if (name === \"id\" || name === \"name\" && useName) {\n    const tracker = namedPropertiesTracker.get(element._ownerDocument._global); // (tracker will be null if the document has no Window)\n\n    if (tracker) {\n      if (name === \"id\" && (!useName || element.getAttribute(\"name\") !== oldValue)) {\n        tracker.untrack(oldValue, element);\n      }\n\n      if (name === \"name\" && element.getAttribute(\"id\") !== oldValue) {\n        tracker.untrack(oldValue, element);\n      }\n\n      tracker.track(value, element);\n    }\n  }\n};\n\nexports.nodeAttachedToDocument = function (node) {\n  if (node.nodeType !== NODE_TYPE.ELEMENT_NODE) {\n    return;\n  }\n\n  const tracker = namedPropertiesTracker.get(node._ownerDocument._global);\n\n  if (!tracker) {\n    return;\n  }\n\n  tracker.track(node.getAttribute(\"id\"), node);\n\n  if (isNamedPropertyElement(node)) {\n    tracker.track(node.getAttribute(\"name\"), node);\n  }\n};\n\nexports.nodeDetachedFromDocument = function (node) {\n  if (node.nodeType !== NODE_TYPE.ELEMENT_NODE) {\n    return;\n  }\n\n  const tracker = namedPropertiesTracker.get(node._ownerDocument._global);\n\n  if (!tracker) {\n    return;\n  }\n\n  tracker.untrack(node.getAttribute(\"id\"), node);\n\n  if (isNamedPropertyElement(node)) {\n    tracker.untrack(node.getAttribute(\"name\"), node);\n  }\n};","map":null,"metadata":{},"sourceType":"script"}