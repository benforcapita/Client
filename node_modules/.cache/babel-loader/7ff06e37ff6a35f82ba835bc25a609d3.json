{"ast":null,"code":"\"use strict\";\n\nconst EventTargetImpl = require(\"../events/EventTarget-impl\").implementation;\n\nconst _require = require(\"../helpers/internal-constants\"),\n      domSymbolTree = _require.domSymbolTree;\n\nconst _require2 = require(\"../../utils\"),\n      simultaneousIterators = _require2.simultaneousIterators;\n\nconst DOMException = require(\"domexception\");\n\nconst NODE_TYPE = require(\"../node-type\");\n\nconst NODE_DOCUMENT_POSITION = require(\"../node-document-position\");\n\nconst NodeList = require(\"../generated/NodeList\");\n\nconst _require3 = require(\"../helpers/document-base-url\"),\n      documentBaseURLSerialized = _require3.documentBaseURLSerialized;\n\nconst _require4 = require(\"../node\"),\n      clone = _require4.clone,\n      locateNamespacePrefix = _require4.locateNamespacePrefix,\n      locateNamespace = _require4.locateNamespace;\n\nconst attributes = require(\"../attributes\");\n\nfunction isObsoleteNodeType(node) {\n  return node.nodeType === NODE_TYPE.ENTITY_NODE || node.nodeType === NODE_TYPE.ENTITY_REFERENCE_NODE || node.nodeType === NODE_TYPE.NOTATION_NODE || //  node.nodeType === NODE_TYPE.ATTRIBUTE_NODE ||  // this is missing how do we handle?\n  node.nodeType === NODE_TYPE.CDATA_SECTION_NODE;\n}\n\nfunction nodeEquals(a, b) {\n  if (a.nodeType !== b.nodeType) {\n    return false;\n  }\n\n  switch (a.nodeType) {\n    case NODE_TYPE.DOCUMENT_TYPE_NODE:\n      if (a.name !== b.name || a.publicId !== b.publicId || a.systemId !== b.systemId) {\n        return false;\n      }\n\n      break;\n\n    case NODE_TYPE.ELEMENT_NODE:\n      if (a._namespaceURI !== b._namespaceURI || a._prefix !== b._prefix || a._localName !== b._localName || a._attributes.length !== b._attributes.length) {\n        return false;\n      }\n\n      break;\n\n    case NODE_TYPE.PROCESSING_INSTRUCTION_NODE:\n      if (a._target !== b._target || a._data !== b._data) {\n        return false;\n      }\n\n      break;\n\n    case NODE_TYPE.TEXT_NODE:\n    case NODE_TYPE.COMMENT_NODE:\n      if (a._data !== b._data) {\n        return false;\n      }\n\n      break;\n  }\n\n  if (a.nodeType === NODE_TYPE.ELEMENT_NODE && !attributes.attributeListsEqual(a, b)) {\n    return false;\n  }\n\n  for (const nodes of simultaneousIterators(domSymbolTree.childrenIterator(a), domSymbolTree.childrenIterator(b))) {\n    if (!nodes[0] || !nodes[1]) {\n      // mismatch in the amount of childNodes\n      return false;\n    }\n\n    if (!nodeEquals(nodes[0], nodes[1])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nclass NodeImpl extends EventTargetImpl {\n  constructor(args, privateData) {\n    super();\n    domSymbolTree.initialize(this);\n    this._ownerDocument = privateData.ownerDocument;\n    this._childNodesList = null;\n    this._childrenList = null;\n    this._version = 0;\n    this._memoizedQueries = {};\n  }\n\n  get parentNode() {\n    return domSymbolTree.parent(this);\n  }\n\n  getRootNode() {\n    // ignore option for composed, because of no Shadow DOM support\n    let root;\n\n    for (const ancestor of domSymbolTree.ancestorsIterator(this)) {\n      root = ancestor;\n    }\n\n    return root;\n  }\n\n  get nodeName() {\n    switch (this.nodeType) {\n      case NODE_TYPE.ELEMENT_NODE:\n        return this.tagName;\n\n      case NODE_TYPE.TEXT_NODE:\n        return \"#text\";\n\n      case NODE_TYPE.CDATA_SECTION_NODE:\n        return \"#cdata-section\";\n\n      case NODE_TYPE.PROCESSING_INSTRUCTION_NODE:\n        return this.target;\n\n      case NODE_TYPE.COMMENT_NODE:\n        return \"#comment\";\n\n      case NODE_TYPE.DOCUMENT_NODE:\n        return \"#document\";\n\n      case NODE_TYPE.DOCUMENT_TYPE_NODE:\n        return this.name;\n\n      case NODE_TYPE.DOCUMENT_FRAGMENT_NODE:\n        return \"#document-fragment\";\n    } // should never happen\n\n\n    return null;\n  }\n\n  get firstChild() {\n    return domSymbolTree.firstChild(this);\n  }\n\n  get isConnected() {\n    for (const ancestor of domSymbolTree.ancestorsIterator(this)) {\n      if (ancestor.nodeType === NODE_TYPE.DOCUMENT_NODE) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  get ownerDocument() {\n    return this.nodeType === NODE_TYPE.DOCUMENT_NODE ? null : this._ownerDocument;\n  }\n\n  get lastChild() {\n    return domSymbolTree.lastChild(this);\n  }\n\n  get childNodes() {\n    if (!this._childNodesList) {\n      this._childNodesList = NodeList.createImpl([], {\n        element: this,\n        query: () => domSymbolTree.childrenToArray(this)\n      });\n    } else {\n      this._childNodesList._update();\n    }\n\n    return this._childNodesList;\n  }\n\n  get nextSibling() {\n    return domSymbolTree.nextSibling(this);\n  }\n\n  get previousSibling() {\n    return domSymbolTree.previousSibling(this);\n  }\n\n  insertBefore(newChildImpl, refChildImpl) {\n    // DocumentType must be implicitly adopted\n    if (newChildImpl.nodeType === NODE_TYPE.DOCUMENT_TYPE_NODE) {\n      newChildImpl._ownerDocument = this._ownerDocument;\n    }\n\n    if (newChildImpl.nodeType && newChildImpl.nodeType === NODE_TYPE.ATTRIBUTE_NODE) {\n      throw new DOMException(\"The operation would yield an incorrect node tree.\", \"HierarchyRequestError\");\n    }\n\n    if (this._ownerDocument !== newChildImpl._ownerDocument) {\n      // adopt the node when it's not in this document\n      this._ownerDocument.adoptNode(newChildImpl);\n    } else {\n      // search for parents matching the newChild\n      for (const ancestor of domSymbolTree.ancestorsIterator(this)) {\n        if (ancestor === newChildImpl) {\n          throw new DOMException(\"The operation would yield an incorrect node tree.\", \"HierarchyRequestError\");\n        }\n      }\n    } // fragments are merged into the element (except parser-created fragments in <template>)\n\n\n    if (newChildImpl.nodeType === NODE_TYPE.DOCUMENT_FRAGMENT_NODE) {\n      let grandChildImpl;\n\n      while (grandChildImpl = domSymbolTree.firstChild(newChildImpl)) {\n        newChildImpl.removeChild(grandChildImpl);\n        this.insertBefore(grandChildImpl, refChildImpl);\n      }\n    } else if (newChildImpl === refChildImpl) {\n      return newChildImpl;\n    } else {\n      const oldParentImpl = domSymbolTree.parent(newChildImpl); // if the newChild is already in the tree elsewhere, remove it first\n\n      if (oldParentImpl) {\n        oldParentImpl.removeChild(newChildImpl);\n      }\n\n      if (refChildImpl === null) {\n        domSymbolTree.appendChild(this, newChildImpl);\n      } else {\n        if (domSymbolTree.parent(refChildImpl) !== this) {\n          throw new DOMException(\"The object can not be found here.\", \"NotFoundError\");\n        }\n\n        domSymbolTree.insertBefore(refChildImpl, newChildImpl);\n      }\n\n      this._modified();\n\n      if (newChildImpl.nodeType === NODE_TYPE.TEXT_NODE) {\n        this._childTextContentChangeSteps();\n      }\n\n      if (this._attached && newChildImpl._attach) {\n        newChildImpl._attach();\n      }\n\n      this._descendantAdded(this, newChildImpl);\n    }\n\n    return newChildImpl;\n  } // raises(DOMException);\n\n\n  _modified() {\n    this._version++;\n\n    for (const ancestor of domSymbolTree.ancestorsIterator(this)) {\n      ancestor._version++;\n    }\n\n    if (this._childrenList) {\n      this._childrenList._update();\n    }\n\n    if (this._childNodesList) {\n      this._childNodesList._update();\n    }\n\n    this._clearMemoizedQueries();\n  }\n\n  _childTextContentChangeSteps() {// Default: do nothing\n  }\n\n  _clearMemoizedQueries() {\n    this._memoizedQueries = {};\n    const myParent = domSymbolTree.parent(this);\n\n    if (myParent) {\n      myParent._clearMemoizedQueries();\n    }\n  }\n\n  _descendantRemoved(parent, child) {\n    const myParent = domSymbolTree.parent(this);\n\n    if (myParent) {\n      myParent._descendantRemoved(parent, child);\n    }\n  }\n\n  _descendantAdded(parent, child) {\n    const myParent = domSymbolTree.parent(this);\n\n    if (myParent) {\n      myParent._descendantAdded(parent, child);\n    }\n  }\n\n  replaceChild(node, child) {\n    this.insertBefore(node, child);\n    return this.removeChild(child);\n  }\n\n  _attach() {\n    this._attached = true;\n\n    for (const child of domSymbolTree.childrenIterator(this)) {\n      if (child._attach) {\n        child._attach();\n      }\n    }\n  }\n\n  _detach() {\n    this._attached = false;\n\n    if (this._ownerDocument && this._ownerDocument._lastFocusedElement === this) {\n      this._ownerDocument._lastFocusedElement = null;\n    }\n\n    for (const child of domSymbolTree.childrenIterator(this)) {\n      if (child._detach) {\n        child._detach();\n      }\n    }\n  }\n\n  removeChild(\n  /* Node */\n  oldChildImpl) {\n    if (!oldChildImpl || domSymbolTree.parent(oldChildImpl) !== this) {\n      throw new DOMException(\"The object can not be found here.\", \"NotFoundError\");\n    }\n\n    if (this._ownerDocument) {\n      this._ownerDocument._runPreRemovingSteps(oldChildImpl);\n    }\n\n    domSymbolTree.remove(oldChildImpl);\n\n    this._modified();\n\n    oldChildImpl._detach();\n\n    this._descendantRemoved(this, oldChildImpl);\n\n    if (oldChildImpl.nodeType === NODE_TYPE.TEXT_NODE) {\n      this._childTextContentChangeSteps();\n    }\n\n    return oldChildImpl;\n  } // raises(DOMException);\n\n\n  appendChild(newChild) {\n    return this.insertBefore(newChild, null);\n  }\n\n  hasChildNodes() {\n    return domSymbolTree.hasChildren(this);\n  }\n\n  normalize() {\n    for (const child of domSymbolTree.childrenIterator(this)) {\n      if (child.normalize) {\n        child.normalize();\n      } // Normalize should only transform Text nodes, and nothing else.\n\n\n      if (child.nodeType !== NODE_TYPE.TEXT_NODE) {\n        continue;\n      }\n\n      if (child.nodeValue === \"\") {\n        this.removeChild(child);\n        continue;\n      }\n\n      const prevChild = domSymbolTree.previousSibling(child);\n\n      if (prevChild && prevChild.nodeType === NODE_TYPE.TEXT_NODE) {\n        // merge text nodes\n        prevChild.appendData(child.nodeValue);\n        this.removeChild(child);\n      }\n    }\n  }\n\n  get parentElement() {\n    const parentNode = domSymbolTree.parent(this);\n    return parentNode !== null && parentNode.nodeType === NODE_TYPE.ELEMENT_NODE ? parentNode : null;\n  }\n\n  get baseURI() {\n    return documentBaseURLSerialized(this._ownerDocument);\n  }\n\n  compareDocumentPosition(otherImpl) {\n    // Let reference be the context object.\n    const reference = this;\n\n    if (isObsoleteNodeType(reference) || isObsoleteNodeType(otherImpl)) {\n      throw new Error(\"Obsolete node type\");\n    }\n\n    const result = domSymbolTree.compareTreePosition(reference, otherImpl); // “If other and reference are not in the same tree, return the result of adding DOCUMENT_POSITION_DISCONNECTED,\n    //  DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC, and either DOCUMENT_POSITION_PRECEDING or\n    // DOCUMENT_POSITION_FOLLOWING, with the constraint that this is to be consistent, together.”\n\n    if (result === NODE_DOCUMENT_POSITION.DOCUMENT_POSITION_DISCONNECTED) {\n      // symbol-tree does not add these bits required by the spec:\n      return NODE_DOCUMENT_POSITION.DOCUMENT_POSITION_DISCONNECTED | NODE_DOCUMENT_POSITION.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC | NODE_DOCUMENT_POSITION.DOCUMENT_POSITION_FOLLOWING;\n    }\n\n    return result;\n  }\n\n  lookupPrefix(namespace) {\n    if (namespace === null || namespace === \"\") {\n      return null;\n    }\n\n    switch (this.nodeType) {\n      case NODE_TYPE.ELEMENT_NODE:\n        {\n          return locateNamespacePrefix(this, namespace);\n        }\n\n      case NODE_TYPE.DOCUMENT_NODE:\n        {\n          return this.documentElement !== null ? locateNamespacePrefix(this.documentElement, namespace) : null;\n        }\n\n      case NODE_TYPE.DOCUMENT_TYPE_NODE:\n      case NODE_TYPE.DOCUMENT_FRAGMENT_NODE:\n        {\n          return null;\n        }\n\n      case NODE_TYPE.ATTRIBUTE_NODE:\n        {\n          return this._element !== null ? locateNamespacePrefix(this._element, namespace) : null;\n        }\n\n      default:\n        {\n          return this.parentElement !== null ? locateNamespacePrefix(this.parentElement, namespace) : null;\n        }\n    }\n  }\n\n  lookupNamespaceURI(prefix) {\n    if (prefix === \"\") {\n      prefix = null;\n    }\n\n    return locateNamespace(this, prefix);\n  }\n\n  isDefaultNamespace(namespace) {\n    if (namespace === \"\") {\n      namespace = null;\n    }\n\n    const defaultNamespace = locateNamespace(this, null);\n    return defaultNamespace === namespace;\n  }\n\n  contains(other) {\n    if (other === null) {\n      return false;\n    } else if (this === other) {\n      return true;\n    }\n\n    return Boolean(this.compareDocumentPosition(other) & NODE_DOCUMENT_POSITION.DOCUMENT_POSITION_CONTAINED_BY);\n  }\n\n  isEqualNode(node) {\n    if (node === null) {\n      return false;\n    } // Fast-path, not in the spec\n\n\n    if (this === node) {\n      return true;\n    }\n\n    return nodeEquals(this, node);\n  }\n\n  isSameNode(node) {\n    if (this === node) {\n      return true;\n    }\n\n    return false;\n  }\n\n  cloneNode(deep) {\n    deep = Boolean(deep);\n    return clone(this, undefined, deep);\n  }\n\n  get nodeValue() {\n    switch (this.nodeType) {\n      case NODE_TYPE.ATTRIBUTE_NODE:\n        {\n          return this._value;\n        }\n\n      case NODE_TYPE.TEXT_NODE:\n      case NODE_TYPE.CDATA_SECTION_NODE: // CDATASection is a subclass of Text\n\n      case NODE_TYPE.PROCESSING_INSTRUCTION_NODE:\n      case NODE_TYPE.COMMENT_NODE:\n        {\n          return this._data;\n        }\n\n      default:\n        {\n          return null;\n        }\n    }\n  }\n\n  set nodeValue(value) {\n    if (value === null) {\n      value = \"\";\n    }\n\n    switch (this.nodeType) {\n      case NODE_TYPE.ATTRIBUTE_NODE:\n        {\n          attributes.setAnExistingAttributeValue(this, value);\n          break;\n        }\n\n      case NODE_TYPE.TEXT_NODE:\n      case NODE_TYPE.CDATA_SECTION_NODE: // CDATASection is a subclass of Text\n\n      case NODE_TYPE.PROCESSING_INSTRUCTION_NODE:\n      case NODE_TYPE.COMMENT_NODE:\n        {\n          this.replaceData(0, this.length, value);\n          break;\n        }\n    }\n  }\n\n  get textContent() {\n    switch (this.nodeType) {\n      case NODE_TYPE.DOCUMENT_FRAGMENT_NODE:\n      case NODE_TYPE.ELEMENT_NODE:\n        {\n          let text = \"\";\n\n          for (const child of domSymbolTree.treeIterator(this)) {\n            if (child.nodeType === NODE_TYPE.TEXT_NODE || child.nodeType === NODE_TYPE.CDATA_SECTION_NODE) {\n              text += child.nodeValue;\n            }\n          }\n\n          return text;\n        }\n\n      case NODE_TYPE.ATTRIBUTE_NODE:\n        {\n          return this._value;\n        }\n\n      case NODE_TYPE.TEXT_NODE:\n      case NODE_TYPE.CDATA_SECTION_NODE: // CDATASection is a subclass of Text\n\n      case NODE_TYPE.PROCESSING_INSTRUCTION_NODE:\n      case NODE_TYPE.COMMENT_NODE:\n        {\n          return this._data;\n        }\n\n      default:\n        {\n          return null;\n        }\n    }\n  }\n\n  set textContent(value) {\n    switch (this.nodeType) {\n      case NODE_TYPE.DOCUMENT_FRAGMENT_NODE:\n      case NODE_TYPE.ELEMENT_NODE:\n        {\n          let child = domSymbolTree.firstChild(this);\n\n          while (child) {\n            this.removeChild(child);\n            child = domSymbolTree.firstChild(this);\n          }\n\n          if (value !== null && value !== \"\") {\n            this.appendChild(this._ownerDocument.createTextNode(value));\n          }\n\n          break;\n        }\n\n      case NODE_TYPE.ATTRIBUTE_NODE:\n        {\n          attributes.setAnExistingAttributeValue(this, value);\n          break;\n        }\n\n      case NODE_TYPE.TEXT_NODE:\n      case NODE_TYPE.CDATA_SECTION_NODE: // CDATASection is a subclass of Text\n\n      case NODE_TYPE.PROCESSING_INSTRUCTION_NODE:\n      case NODE_TYPE.COMMENT_NODE:\n        {\n          this.replaceData(0, this.length, value);\n          break;\n        }\n    }\n  }\n\n}\n\nmodule.exports = {\n  implementation: NodeImpl\n};","map":null,"metadata":{},"sourceType":"script"}