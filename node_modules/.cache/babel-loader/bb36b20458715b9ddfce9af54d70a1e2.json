{"ast":null,"code":"\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\n\nconst utils = require(\"./utils.js\");\n\nconst impl = utils.implSymbol;\n\nfunction Attr() {\n  throw new TypeError(\"Illegal constructor\");\n}\n\nObject.defineProperty(Attr, \"prototype\", {\n  value: Attr.prototype,\n  writable: false,\n  enumerable: false,\n  configurable: false\n});\nObject.defineProperty(Attr.prototype, \"namespaceURI\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"namespaceURI\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Attr.prototype, \"prefix\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"prefix\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Attr.prototype, \"localName\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"localName\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Attr.prototype, \"name\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"name\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Attr.prototype, \"nodeName\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"nodeName\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Attr.prototype, \"value\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"value\"];\n  },\n\n  set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"DOMString\"](V, {\n      context: \"Failed to set the 'value' property on 'Attr': The provided value\"\n    });\n    this[impl][\"value\"] = V;\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Attr.prototype, \"nodeValue\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"nodeValue\"];\n  },\n\n  set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"DOMString\"](V, {\n      context: \"Failed to set the 'nodeValue' property on 'Attr': The provided value\",\n      treatNullAsEmptyString: true\n    });\n    this[impl][\"nodeValue\"] = V;\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Attr.prototype, \"textContent\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"textContent\"];\n  },\n\n  set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"DOMString\"](V, {\n      context: \"Failed to set the 'textContent' property on 'Attr': The provided value\",\n      treatNullAsEmptyString: true\n    });\n    this[impl][\"textContent\"] = V;\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Attr.prototype, \"ownerElement\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"ownerElement\"]);\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Attr.prototype, \"specified\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"specified\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Attr.prototype, Symbol.toStringTag, {\n  value: \"Attr\",\n  writable: false,\n  enumerable: false,\n  configurable: true\n});\nconst iface = {\n  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`\n  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as\n  // implementing this mixin interface.\n  _mixedIntoPredicates: [],\n\n  is(obj) {\n    if (obj) {\n      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {\n        return true;\n      }\n\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(obj)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n\n  isImpl(obj) {\n    if (obj) {\n      if (obj instanceof Impl.implementation) {\n        return true;\n      }\n\n      const wrapper = utils.wrapperForImpl(obj);\n\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(wrapper)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n\n  convert(obj, {\n    context = \"The provided value\"\n  } = {}) {\n    if (module.exports.is(obj)) {\n      return utils.implForWrapper(obj);\n    }\n\n    throw new TypeError(\"\".concat(context, \" is not of type 'Attr'.\"));\n  },\n\n  create(constructorArgs, privateData) {\n    let obj = Object.create(Attr.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n\n  createImpl(constructorArgs, privateData) {\n    let obj = Object.create(Attr.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return utils.implForWrapper(obj);\n  },\n\n  _internalSetup(obj) {},\n\n  setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n    privateData.wrapper = obj;\n\n    this._internalSetup(obj);\n\n    Object.defineProperty(obj, impl, {\n      value: new Impl.implementation(constructorArgs, privateData),\n      writable: false,\n      enumerable: false,\n      configurable: true\n    });\n    obj[impl][utils.wrapperSymbol] = obj;\n\n    if (Impl.init) {\n      Impl.init(obj[impl], privateData);\n    }\n\n    return obj;\n  },\n\n  interface: Attr,\n  expose: {\n    Window: {\n      Attr\n    }\n  }\n}; // iface\n\nmodule.exports = iface;\n\nconst Impl = require(\"../attributes/Attr-impl.js\");","map":null,"metadata":{},"sourceType":"script"}