{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/benblum/Desktop/Code/webApp/client/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nconst _require = require(\"./infra\"),\n      isASCIIHex = _require.isASCIIHex;\n\nfunction strictlySplitByteSequence(buf, cp) {\n  const list = [];\n  let last = 0;\n  let i = buf.indexOf(cp);\n\n  while (i >= 0) {\n    list.push(buf.slice(last, i));\n    last = i + 1;\n    i = buf.indexOf(cp, last);\n  }\n\n  if (last !== buf.length) {\n    list.push(buf.slice(last));\n  }\n\n  return list;\n}\n\nfunction replaceByteInByteSequence(buf, from, to) {\n  let i = buf.indexOf(from);\n\n  while (i >= 0) {\n    buf[i] = to;\n    i = buf.indexOf(from, i + 1);\n  }\n\n  return buf;\n}\n\nfunction percentEncode(c) {\n  let hex = c.toString(16).toUpperCase();\n\n  if (hex.length === 1) {\n    hex = \"0\" + hex;\n  }\n\n  return \"%\" + hex;\n}\n\nfunction percentDecode(input) {\n  const output = Buffer.alloc(input.byteLength);\n  let ptr = 0;\n\n  for (let i = 0; i < input.length; ++i) {\n    if (input[i] !== 37 || !isASCIIHex(input[i + 1]) || !isASCIIHex(input[i + 2])) {\n      output[ptr++] = input[i];\n    } else {\n      output[ptr++] = parseInt(input.slice(i + 1, i + 3).toString(), 16);\n      i += 2;\n    }\n  }\n\n  return output.slice(0, ptr);\n}\n\nfunction parseUrlencoded(input) {\n  const sequences = strictlySplitByteSequence(input, 38);\n  const output = [];\n\n  for (const bytes of sequences) {\n    if (bytes.length === 0) {\n      continue;\n    }\n\n    let name;\n    let value;\n    const indexOfEqual = bytes.indexOf(61);\n\n    if (indexOfEqual >= 0) {\n      name = bytes.slice(0, indexOfEqual);\n      value = bytes.slice(indexOfEqual + 1);\n    } else {\n      name = bytes;\n      value = Buffer.alloc(0);\n    }\n\n    name = replaceByteInByteSequence(Buffer.from(name), 43, 32);\n    value = replaceByteInByteSequence(Buffer.from(value), 43, 32);\n    output.push([percentDecode(name).toString(), percentDecode(value).toString()]);\n  }\n\n  return output;\n}\n\nfunction serializeUrlencodedByte(input) {\n  let output = \"\";\n\n  for (const byte of input) {\n    if (byte === 32) {\n      output += \"+\";\n    } else if (byte === 42 || byte === 45 || byte === 46 || byte >= 48 && byte <= 57 || byte >= 65 && byte <= 90 || byte === 95 || byte >= 97 && byte <= 122) {\n      output += String.fromCodePoint(byte);\n    } else {\n      output += percentEncode(byte);\n    }\n  }\n\n  return output;\n}\n\nfunction serializeUrlencoded(tuples, encodingOverride = undefined) {\n  let encoding = \"utf-8\";\n\n  if (encodingOverride !== undefined) {\n    encoding = encodingOverride;\n  }\n\n  let output = \"\";\n\n  for (const _ref of tuples.entries()) {\n    var _ref2 = _slicedToArray(_ref, 2);\n\n    const i = _ref2[0];\n    const tuple = _ref2[1];\n    // TODO: handle encoding override\n    const name = serializeUrlencodedByte(Buffer.from(tuple[0]));\n    let value = tuple[1];\n\n    if (tuple.length > 2 && tuple[2] !== undefined) {\n      if (tuple[2] === \"hidden\" && name === \"_charset_\") {\n        value = encoding;\n      } else if (tuple[2] === \"file\") {\n        // value is a File object\n        value = value.name;\n      }\n    }\n\n    value = serializeUrlencodedByte(Buffer.from(value));\n\n    if (i !== 0) {\n      output += \"&\";\n    }\n\n    output += \"\".concat(name, \"=\").concat(value);\n  }\n\n  return output;\n}\n\nmodule.exports = {\n  percentEncode,\n  percentDecode,\n\n  // application/x-www-form-urlencoded string parser\n  parseUrlencoded(input) {\n    return parseUrlencoded(Buffer.from(input));\n  },\n\n  // application/x-www-form-urlencoded serializer\n  serializeUrlencoded\n};","map":null,"metadata":{},"sourceType":"script"}