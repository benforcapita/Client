{"ast":null,"code":"\"use strict\";\n\nconst _require = require(\"../../utils\"),\n      mixin = _require.mixin;\n\nconst NodeImpl = require(\"./Node-impl\").implementation;\n\nconst ChildNodeImpl = require(\"./ChildNode-impl\").implementation;\n\nconst NonDocumentTypeChildNodeImpl = require(\"./NonDocumentTypeChildNode-impl\").implementation;\n\nconst DOMException = require(\"domexception\");\n\nconst _require2 = require(\"../node-type\"),\n      TEXT_NODE = _require2.TEXT_NODE;\n\nclass CharacterDataImpl extends NodeImpl {\n  constructor(args, privateData) {\n    super(args, privateData);\n    this._data = privateData.data;\n  }\n\n  get data() {\n    return this._data;\n  }\n\n  set data(data) {\n    this.replaceData(0, this.length, data);\n  }\n\n  get length() {\n    return this._data.length;\n  }\n\n  substringData(offset, count) {\n    const length = this.length;\n\n    if (offset > length) {\n      throw new DOMException(\"The index is not in the allowed range.\", \"IndexSizeError\");\n    }\n\n    if (offset + count > length) {\n      return this._data.substring(offset);\n    }\n\n    return this._data.substring(offset, offset + count);\n  }\n\n  appendData(data) {\n    this.replaceData(this.length, 0, data);\n  }\n\n  insertData(offset, data) {\n    this.replaceData(offset, 0, data);\n  }\n\n  deleteData(offset, count) {\n    this.replaceData(offset, count, \"\");\n  }\n\n  replaceData(offset, count, data) {\n    const length = this.length;\n\n    if (offset > length) {\n      throw new DOMException(\"The index is not in the allowed range.\", \"IndexSizeError\");\n    }\n\n    if (offset + count > length) {\n      count = length - offset;\n    }\n\n    const start = this._data.substring(0, offset);\n\n    const end = this._data.substring(offset + count);\n\n    this._data = start + data + end; // TODO: range stuff\n\n    if (this.nodeType === TEXT_NODE && this.parentNode) {\n      this.parentNode._childTextContentChangeSteps();\n    }\n  }\n\n}\n\nmixin(CharacterDataImpl.prototype, NonDocumentTypeChildNodeImpl.prototype);\nmixin(CharacterDataImpl.prototype, ChildNodeImpl.prototype);\nmodule.exports = {\n  implementation: CharacterDataImpl\n};","map":null,"metadata":{},"sourceType":"script"}