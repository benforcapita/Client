{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/benblum/Desktop/Code/webApp/client/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nconst conversions = require(\"webidl-conversions\");\n\nconst utils = require(\"./utils.js\");\n\nconst convertHTMLFormElement = require(\"./HTMLFormElement.js\").convert;\n\nconst isBlob = require(\"./Blob.js\").is;\n\nconst convertBlob = require(\"./Blob.js\").convert;\n\nconst impl = utils.implSymbol;\nconst IteratorPrototype = Object.create(utils.IteratorPrototype, {\n  next: {\n    value: function next() {\n      const internal = this[utils.iterInternalSymbol];\n      const target = internal.target,\n            kind = internal.kind,\n            index = internal.index;\n      const values = Array.from(target[impl]);\n      const len = values.length;\n\n      if (index >= len) {\n        return {\n          value: undefined,\n          done: true\n        };\n      }\n\n      const pair = values[index];\n      internal.index = index + 1;\n\n      const _pair$map = pair.map(utils.tryWrapperForImpl),\n            _pair$map2 = _slicedToArray(_pair$map, 2),\n            key = _pair$map2[0],\n            value = _pair$map2[1];\n\n      let result;\n\n      switch (kind) {\n        case \"key\":\n          result = key;\n          break;\n\n        case \"value\":\n          result = value;\n          break;\n\n        case \"key+value\":\n          result = [key, value];\n          break;\n      }\n\n      return {\n        value: result,\n        done: false\n      };\n    },\n    writable: true,\n    enumerable: true,\n    configurable: true\n  },\n  [Symbol.toStringTag]: {\n    value: \"FormDataIterator\",\n    writable: false,\n    enumerable: false,\n    configurable: true\n  }\n});\n\nfunction FormData() {\n  if (new.target === undefined) {\n    throw new TypeError(\"Failed to construct 'FormData'. Please use the 'new' operator; this constructor \" + \"cannot be called as a function.\");\n  }\n\n  const args = [];\n  {\n    let curArg = arguments[0];\n\n    if (curArg !== undefined) {\n      curArg = convertHTMLFormElement(curArg, {\n        context: \"Failed to construct 'FormData': parameter 1\"\n      });\n    }\n\n    args.push(curArg);\n  }\n  iface.setup(this, args);\n}\n\nObject.defineProperty(FormData, \"prototype\", {\n  value: FormData.prototype,\n  writable: false,\n  enumerable: false,\n  configurable: false\n});\nObject.defineProperty(FormData.prototype, Symbol.iterator, {\n  writable: true,\n  enumerable: false,\n  configurable: true,\n  value: function entries() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return module.exports.createDefaultIterator(this, \"key+value\");\n  }\n});\n\nFormData.prototype.forEach = function forEach(callback) {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'forEach' on 'FormData': 1 argument required, \" + \"but only 0 present.\");\n  }\n\n  if (typeof callback !== \"function\") {\n    throw new TypeError(\"Failed to execute 'forEach' on 'FormData': The callback provided \" + \"as parameter 1 is not a function.\");\n  }\n\n  const thisArg = arguments[1];\n  let pairs = Array.from(this[impl]);\n  let i = 0;\n\n  while (i < pairs.length) {\n    const _pairs$i$map = pairs[i].map(utils.tryWrapperForImpl),\n          _pairs$i$map2 = _slicedToArray(_pairs$i$map, 2),\n          key = _pairs$i$map2[0],\n          value = _pairs$i$map2[1];\n\n    callback.call(thisArg, value, key, this);\n    pairs = Array.from(this[impl]);\n    i++;\n  }\n};\n\nFormData.prototype.append = function append(name, value) {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 2) {\n    throw new TypeError(\"Failed to execute 'append' on 'FormData': 2 arguments required, but only \" + arguments.length + \" present.\");\n  }\n\n  const args = [];\n\n  switch (arguments.length) {\n    case 2:\n      {\n        let curArg = arguments[0];\n        curArg = conversions[\"USVString\"](curArg, {\n          context: \"Failed to execute 'append' on 'FormData': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      {\n        let curArg = arguments[1];\n\n        if (isBlob(curArg)) {\n          {\n            let curArg = arguments[1];\n            curArg = convertBlob(curArg, {\n              context: \"Failed to execute 'append' on 'FormData': parameter 2\"\n            });\n            args.push(curArg);\n          }\n        } else {\n          {\n            let curArg = arguments[1];\n            curArg = conversions[\"USVString\"](curArg, {\n              context: \"Failed to execute 'append' on 'FormData': parameter 2\"\n            });\n            args.push(curArg);\n          }\n        }\n      }\n      break;\n\n    default:\n      {\n        let curArg = arguments[0];\n        curArg = conversions[\"USVString\"](curArg, {\n          context: \"Failed to execute 'append' on 'FormData': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      {\n        let curArg = arguments[1];\n        curArg = convertBlob(curArg, {\n          context: \"Failed to execute 'append' on 'FormData': parameter 2\"\n        });\n        args.push(curArg);\n      }\n      {\n        let curArg = arguments[2];\n\n        if (curArg !== undefined) {\n          curArg = conversions[\"USVString\"](curArg, {\n            context: \"Failed to execute 'append' on 'FormData': parameter 3\"\n          });\n        }\n\n        args.push(curArg);\n      }\n  }\n\n  return this[impl].append(...args);\n};\n\nFormData.prototype.delete = function _delete(name) {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'delete' on 'FormData': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  const args = [];\n  {\n    let curArg = arguments[0];\n    curArg = conversions[\"USVString\"](curArg, {\n      context: \"Failed to execute 'delete' on 'FormData': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  return this[impl].delete(...args);\n};\n\nFormData.prototype.get = function get(name) {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'get' on 'FormData': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  const args = [];\n  {\n    let curArg = arguments[0];\n    curArg = conversions[\"USVString\"](curArg, {\n      context: \"Failed to execute 'get' on 'FormData': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  return utils.tryWrapperForImpl(this[impl].get(...args));\n};\n\nFormData.prototype.getAll = function getAll(name) {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'getAll' on 'FormData': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  const args = [];\n  {\n    let curArg = arguments[0];\n    curArg = conversions[\"USVString\"](curArg, {\n      context: \"Failed to execute 'getAll' on 'FormData': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  return utils.tryWrapperForImpl(this[impl].getAll(...args));\n};\n\nFormData.prototype.has = function has(name) {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'has' on 'FormData': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  const args = [];\n  {\n    let curArg = arguments[0];\n    curArg = conversions[\"USVString\"](curArg, {\n      context: \"Failed to execute 'has' on 'FormData': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  return this[impl].has(...args);\n};\n\nFormData.prototype.set = function set(name, value) {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 2) {\n    throw new TypeError(\"Failed to execute 'set' on 'FormData': 2 arguments required, but only \" + arguments.length + \" present.\");\n  }\n\n  const args = [];\n\n  switch (arguments.length) {\n    case 2:\n      {\n        let curArg = arguments[0];\n        curArg = conversions[\"USVString\"](curArg, {\n          context: \"Failed to execute 'set' on 'FormData': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      {\n        let curArg = arguments[1];\n\n        if (isBlob(curArg)) {\n          {\n            let curArg = arguments[1];\n            curArg = convertBlob(curArg, {\n              context: \"Failed to execute 'set' on 'FormData': parameter 2\"\n            });\n            args.push(curArg);\n          }\n        } else {\n          {\n            let curArg = arguments[1];\n            curArg = conversions[\"USVString\"](curArg, {\n              context: \"Failed to execute 'set' on 'FormData': parameter 2\"\n            });\n            args.push(curArg);\n          }\n        }\n      }\n      break;\n\n    default:\n      {\n        let curArg = arguments[0];\n        curArg = conversions[\"USVString\"](curArg, {\n          context: \"Failed to execute 'set' on 'FormData': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      {\n        let curArg = arguments[1];\n        curArg = convertBlob(curArg, {\n          context: \"Failed to execute 'set' on 'FormData': parameter 2\"\n        });\n        args.push(curArg);\n      }\n      {\n        let curArg = arguments[2];\n\n        if (curArg !== undefined) {\n          curArg = conversions[\"USVString\"](curArg, {\n            context: \"Failed to execute 'set' on 'FormData': parameter 3\"\n          });\n        }\n\n        args.push(curArg);\n      }\n  }\n\n  return this[impl].set(...args);\n};\n\nFormData.prototype.entries = FormData.prototype[Symbol.iterator];\n\nFormData.prototype.keys = function keys() {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  return module.exports.createDefaultIterator(this, \"key\");\n};\n\nFormData.prototype.values = function values() {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  return module.exports.createDefaultIterator(this, \"value\");\n};\n\nObject.defineProperty(FormData.prototype, Symbol.toStringTag, {\n  value: \"FormData\",\n  writable: false,\n  enumerable: false,\n  configurable: true\n});\nconst iface = {\n  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`\n  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as\n  // implementing this mixin interface.\n  _mixedIntoPredicates: [],\n\n  is(obj) {\n    if (obj) {\n      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {\n        return true;\n      }\n\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(obj)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n\n  isImpl(obj) {\n    if (obj) {\n      if (obj instanceof Impl.implementation) {\n        return true;\n      }\n\n      const wrapper = utils.wrapperForImpl(obj);\n\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(wrapper)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n\n  convert(obj, {\n    context = \"The provided value\"\n  } = {}) {\n    if (module.exports.is(obj)) {\n      return utils.implForWrapper(obj);\n    }\n\n    throw new TypeError(\"\".concat(context, \" is not of type 'FormData'.\"));\n  },\n\n  createDefaultIterator(target, kind) {\n    const iterator = Object.create(IteratorPrototype);\n    Object.defineProperty(iterator, utils.iterInternalSymbol, {\n      value: {\n        target,\n        kind,\n        index: 0\n      },\n      writable: false,\n      enumerable: false,\n      configurable: true\n    });\n    return iterator;\n  },\n\n  create(constructorArgs, privateData) {\n    let obj = Object.create(FormData.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n\n  createImpl(constructorArgs, privateData) {\n    let obj = Object.create(FormData.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return utils.implForWrapper(obj);\n  },\n\n  _internalSetup(obj) {},\n\n  setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n    privateData.wrapper = obj;\n\n    this._internalSetup(obj);\n\n    Object.defineProperty(obj, impl, {\n      value: new Impl.implementation(constructorArgs, privateData),\n      writable: false,\n      enumerable: false,\n      configurable: true\n    });\n    obj[impl][utils.wrapperSymbol] = obj;\n\n    if (Impl.init) {\n      Impl.init(obj[impl], privateData);\n    }\n\n    return obj;\n  },\n\n  interface: FormData,\n  expose: {\n    Window: {\n      FormData\n    },\n    Worker: {\n      FormData\n    }\n  }\n}; // iface\n\nmodule.exports = iface;\n\nconst Impl = require(\"../xhr/FormData-impl.js\");","map":null,"metadata":{},"sourceType":"script"}