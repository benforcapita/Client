{"ast":null,"code":"'use strict';\n\nconst TREE = Symbol();\nconst ROOT = Symbol();\nconst NEXT = Symbol();\nconst ITERATE_FUNC = Symbol();\n\nclass TreeIterator {\n  constructor(tree, root, firstResult, iterateFunction) {\n    this[TREE] = tree;\n    this[ROOT] = root;\n    this[NEXT] = firstResult;\n    this[ITERATE_FUNC] = iterateFunction;\n  }\n\n  next() {\n    const tree = this[TREE];\n    const iterateFunc = this[ITERATE_FUNC];\n    const root = this[ROOT];\n\n    if (!this[NEXT]) {\n      return {\n        done: true,\n        value: root\n      };\n    }\n\n    const value = this[NEXT];\n\n    if (iterateFunc === 1) {\n      this[NEXT] = tree._node(value).previousSibling;\n    } else if (iterateFunc === 2) {\n      this[NEXT] = tree._node(value).nextSibling;\n    } else if (iterateFunc === 3) {\n      this[NEXT] = tree._node(value).parent;\n    } else if (iterateFunc === 4) {\n      this[NEXT] = tree.preceding(value, {\n        root: root\n      });\n    } else\n      /* if (iterateFunc === 5)*/\n      {\n        this[NEXT] = tree.following(value, {\n          root: root\n        });\n      }\n\n    return {\n      done: false,\n      value: value\n    };\n  }\n\n}\n\nObject.defineProperty(TreeIterator.prototype, Symbol.iterator, {\n  value: function () {\n    return this;\n  },\n  writable: false\n});\nTreeIterator.PREV = 1;\nTreeIterator.NEXT = 2;\nTreeIterator.PARENT = 3;\nTreeIterator.PRECEDING = 4;\nTreeIterator.FOLLOWING = 5;\nObject.freeze(TreeIterator);\nObject.freeze(TreeIterator.prototype);\nmodule.exports = TreeIterator;","map":null,"metadata":{},"sourceType":"script"}