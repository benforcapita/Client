{"ast":null,"code":"\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\n\nconst utils = require(\"./utils.js\");\n\nconst isBlob = require(\"./Blob.js\").is;\n\nconst convertBlob = require(\"./Blob.js\").convert;\n\nconst BinaryType = require(\"./BinaryType.js\");\n\nconst impl = utils.implSymbol;\n\nconst EventTarget = require(\"./EventTarget.js\");\n\nmodule.exports = {\n  createInterface: function (defaultPrivateData = {}) {\n    function WebSocket(url) {\n      if (new.target === undefined) {\n        throw new TypeError(\"Failed to construct 'WebSocket'. Please use the 'new' operator; this constructor \" + \"cannot be called as a function.\");\n      }\n\n      if (arguments.length < 1) {\n        throw new TypeError(\"Failed to construct 'WebSocket': 1 argument required, but only \" + arguments.length + \" present.\");\n      }\n\n      const args = [];\n      {\n        let curArg = arguments[0];\n        curArg = conversions[\"USVString\"](curArg, {\n          context: \"Failed to construct 'WebSocket': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      {\n        let curArg = arguments[1];\n\n        if (curArg !== undefined) {\n          if (utils.isObject(curArg)) {\n            if (curArg[Symbol.iterator] !== undefined) {\n              if (!utils.isObject(curArg)) {\n                throw new TypeError(\"Failed to construct 'WebSocket': parameter 2\" + \" sequence\" + \" is not an iterable object.\");\n              } else {\n                const V = [];\n                const tmp = curArg;\n\n                for (let nextItem of tmp) {\n                  nextItem = conversions[\"DOMString\"](nextItem, {\n                    context: \"Failed to construct 'WebSocket': parameter 2\" + \" sequence\" + \"'s element\"\n                  });\n                  V.push(nextItem);\n                }\n\n                curArg = V;\n              }\n            } else {}\n          } else {\n            curArg = conversions[\"DOMString\"](curArg, {\n              context: \"Failed to construct 'WebSocket': parameter 2\"\n            });\n          }\n        } else {\n          curArg = [];\n        }\n\n        args.push(curArg);\n      }\n      iface.setup(this, args);\n    }\n\n    Object.setPrototypeOf(WebSocket.prototype, EventTarget.interface.prototype);\n    Object.setPrototypeOf(WebSocket, EventTarget.interface);\n    Object.defineProperty(WebSocket, \"prototype\", {\n      value: WebSocket.prototype,\n      writable: false,\n      enumerable: false,\n      configurable: false\n    });\n\n    WebSocket.prototype.close = function close() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      const args = [];\n      {\n        let curArg = arguments[0];\n\n        if (curArg !== undefined) {\n          curArg = conversions[\"unsigned short\"](curArg, {\n            context: \"Failed to execute 'close' on 'WebSocket': parameter 1\",\n            clamp: true\n          });\n        }\n\n        args.push(curArg);\n      }\n      {\n        let curArg = arguments[1];\n\n        if (curArg !== undefined) {\n          curArg = conversions[\"USVString\"](curArg, {\n            context: \"Failed to execute 'close' on 'WebSocket': parameter 2\"\n          });\n        }\n\n        args.push(curArg);\n      }\n      return this[impl].close(...args);\n    };\n\n    WebSocket.prototype.send = function send(data) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (arguments.length < 1) {\n        throw new TypeError(\"Failed to execute 'send' on 'WebSocket': 1 argument required, but only \" + arguments.length + \" present.\");\n      }\n\n      const args = [];\n      {\n        let curArg = arguments[0];\n\n        if (isBlob(curArg)) {\n          {\n            let curArg = arguments[0];\n            curArg = convertBlob(curArg, {\n              context: \"Failed to execute 'send' on 'WebSocket': parameter 1\"\n            });\n            args.push(curArg);\n          }\n        } else if (curArg instanceof ArrayBuffer || typeof SharedArrayBuffer !== \"undefined\" && curArg instanceof SharedArrayBuffer) {\n          {\n            let curArg = arguments[0];\n            curArg = conversions[\"ArrayBuffer\"](curArg, {\n              context: \"Failed to execute 'send' on 'WebSocket': parameter 1\"\n            });\n            args.push(curArg);\n          }\n        } else if (ArrayBuffer.isView(curArg)) {\n          {\n            let curArg = arguments[0];\n\n            if (ArrayBuffer.isView(curArg)) {} else {\n              throw new TypeError(\"Failed to execute 'send' on 'WebSocket': parameter 1\" + \" is not of any supported type.\");\n            }\n\n            args.push(curArg);\n          }\n        } else {\n          {\n            let curArg = arguments[0];\n            curArg = conversions[\"USVString\"](curArg, {\n              context: \"Failed to execute 'send' on 'WebSocket': parameter 1\"\n            });\n            args.push(curArg);\n          }\n        }\n      }\n      return this[impl].send(...args);\n    };\n\n    Object.defineProperty(WebSocket.prototype, \"url\", {\n      get() {\n        if (!this || !module.exports.is(this)) {\n          throw new TypeError(\"Illegal invocation\");\n        }\n\n        return this[impl][\"url\"];\n      },\n\n      enumerable: true,\n      configurable: true\n    });\n    Object.defineProperty(WebSocket.prototype, \"readyState\", {\n      get() {\n        if (!this || !module.exports.is(this)) {\n          throw new TypeError(\"Illegal invocation\");\n        }\n\n        return this[impl][\"readyState\"];\n      },\n\n      enumerable: true,\n      configurable: true\n    });\n    Object.defineProperty(WebSocket.prototype, \"bufferedAmount\", {\n      get() {\n        if (!this || !module.exports.is(this)) {\n          throw new TypeError(\"Illegal invocation\");\n        }\n\n        return this[impl][\"bufferedAmount\"];\n      },\n\n      enumerable: true,\n      configurable: true\n    });\n    Object.defineProperty(WebSocket.prototype, \"onopen\", {\n      get() {\n        if (!this || !module.exports.is(this)) {\n          throw new TypeError(\"Illegal invocation\");\n        }\n\n        return utils.tryWrapperForImpl(this[impl][\"onopen\"]);\n      },\n\n      set(V) {\n        if (!this || !module.exports.is(this)) {\n          throw new TypeError(\"Illegal invocation\");\n        }\n\n        V = utils.tryImplForWrapper(V);\n        this[impl][\"onopen\"] = V;\n      },\n\n      enumerable: true,\n      configurable: true\n    });\n    Object.defineProperty(WebSocket.prototype, \"onerror\", {\n      get() {\n        if (!this || !module.exports.is(this)) {\n          throw new TypeError(\"Illegal invocation\");\n        }\n\n        return utils.tryWrapperForImpl(this[impl][\"onerror\"]);\n      },\n\n      set(V) {\n        if (!this || !module.exports.is(this)) {\n          throw new TypeError(\"Illegal invocation\");\n        }\n\n        V = utils.tryImplForWrapper(V);\n        this[impl][\"onerror\"] = V;\n      },\n\n      enumerable: true,\n      configurable: true\n    });\n    Object.defineProperty(WebSocket.prototype, \"onclose\", {\n      get() {\n        if (!this || !module.exports.is(this)) {\n          throw new TypeError(\"Illegal invocation\");\n        }\n\n        return utils.tryWrapperForImpl(this[impl][\"onclose\"]);\n      },\n\n      set(V) {\n        if (!this || !module.exports.is(this)) {\n          throw new TypeError(\"Illegal invocation\");\n        }\n\n        V = utils.tryImplForWrapper(V);\n        this[impl][\"onclose\"] = V;\n      },\n\n      enumerable: true,\n      configurable: true\n    });\n    Object.defineProperty(WebSocket.prototype, \"extensions\", {\n      get() {\n        if (!this || !module.exports.is(this)) {\n          throw new TypeError(\"Illegal invocation\");\n        }\n\n        return this[impl][\"extensions\"];\n      },\n\n      enumerable: true,\n      configurable: true\n    });\n    Object.defineProperty(WebSocket.prototype, \"protocol\", {\n      get() {\n        if (!this || !module.exports.is(this)) {\n          throw new TypeError(\"Illegal invocation\");\n        }\n\n        return this[impl][\"protocol\"];\n      },\n\n      enumerable: true,\n      configurable: true\n    });\n    Object.defineProperty(WebSocket.prototype, \"onmessage\", {\n      get() {\n        if (!this || !module.exports.is(this)) {\n          throw new TypeError(\"Illegal invocation\");\n        }\n\n        return utils.tryWrapperForImpl(this[impl][\"onmessage\"]);\n      },\n\n      set(V) {\n        if (!this || !module.exports.is(this)) {\n          throw new TypeError(\"Illegal invocation\");\n        }\n\n        V = utils.tryImplForWrapper(V);\n        this[impl][\"onmessage\"] = V;\n      },\n\n      enumerable: true,\n      configurable: true\n    });\n    Object.defineProperty(WebSocket.prototype, \"binaryType\", {\n      get() {\n        if (!this || !module.exports.is(this)) {\n          throw new TypeError(\"Illegal invocation\");\n        }\n\n        return utils.tryWrapperForImpl(this[impl][\"binaryType\"]);\n      },\n\n      set(V) {\n        if (!this || !module.exports.is(this)) {\n          throw new TypeError(\"Illegal invocation\");\n        }\n\n        V = \"\".concat(V);\n\n        if (!BinaryType.enumerationValues.has(V)) {\n          return;\n        }\n\n        this[impl][\"binaryType\"] = V;\n      },\n\n      enumerable: true,\n      configurable: true\n    });\n    Object.defineProperty(WebSocket, \"CONNECTING\", {\n      value: 0,\n      enumerable: true\n    });\n    Object.defineProperty(WebSocket.prototype, \"CONNECTING\", {\n      value: 0,\n      enumerable: true\n    });\n    Object.defineProperty(WebSocket, \"OPEN\", {\n      value: 1,\n      enumerable: true\n    });\n    Object.defineProperty(WebSocket.prototype, \"OPEN\", {\n      value: 1,\n      enumerable: true\n    });\n    Object.defineProperty(WebSocket, \"CLOSING\", {\n      value: 2,\n      enumerable: true\n    });\n    Object.defineProperty(WebSocket.prototype, \"CLOSING\", {\n      value: 2,\n      enumerable: true\n    });\n    Object.defineProperty(WebSocket, \"CLOSED\", {\n      value: 3,\n      enumerable: true\n    });\n    Object.defineProperty(WebSocket.prototype, \"CLOSED\", {\n      value: 3,\n      enumerable: true\n    });\n    Object.defineProperty(WebSocket.prototype, Symbol.toStringTag, {\n      value: \"WebSocket\",\n      writable: false,\n      enumerable: false,\n      configurable: true\n    });\n    const iface = {\n      create(constructorArgs, privateData) {\n        let obj = Object.create(WebSocket.prototype);\n        obj = this.setup(obj, constructorArgs, privateData);\n        return obj;\n      },\n\n      createImpl(constructorArgs, privateData) {\n        let obj = Object.create(WebSocket.prototype);\n        obj = this.setup(obj, constructorArgs, privateData);\n        return utils.implForWrapper(obj);\n      },\n\n      _internalSetup(obj) {\n        EventTarget._internalSetup(obj);\n      },\n\n      setup(obj, constructorArgs, privateData) {\n        if (!privateData) privateData = {};\n\n        for (var prop in defaultPrivateData) {\n          if (!(prop in privateData)) {\n            privateData[prop] = defaultPrivateData[prop];\n          }\n        }\n\n        privateData.wrapper = obj;\n\n        this._internalSetup(obj);\n\n        Object.defineProperty(obj, impl, {\n          value: new Impl.implementation(constructorArgs, privateData),\n          writable: false,\n          enumerable: false,\n          configurable: true\n        });\n        obj[impl][utils.wrapperSymbol] = obj;\n\n        if (Impl.init) {\n          Impl.init(obj[impl], privateData);\n        }\n\n        return obj;\n      },\n\n      interface: WebSocket,\n      expose: {\n        Window: {\n          WebSocket\n        },\n        Worker: {\n          WebSocket\n        }\n      }\n    }; // iface\n\n    return iface;\n  },\n  // createInterface\n  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`\n  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as\n  // implementing this mixin interface.\n  _mixedIntoPredicates: [],\n\n  is(obj) {\n    if (obj) {\n      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {\n        return true;\n      }\n\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(obj)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n\n  isImpl(obj) {\n    if (obj) {\n      if (obj instanceof Impl.implementation) {\n        return true;\n      }\n\n      const wrapper = utils.wrapperForImpl(obj);\n\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(wrapper)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n\n  convert(obj, {\n    context = \"The provided value\"\n  } = {}) {\n    if (module.exports.is(obj)) {\n      return utils.implForWrapper(obj);\n    }\n\n    throw new TypeError(\"\".concat(context, \" is not of type 'WebSocket'.\"));\n  }\n\n}; // module.exports\n\nconst Impl = require(\"../websockets/WebSocket-impl.js\");","map":null,"metadata":{},"sourceType":"script"}