{"ast":null,"code":"\"use strict\";\n\nconst idlUtils = require(\"../generated/utils\");\n\nconst UIEventInit = require(\"../generated/UIEventInit\");\n\nconst EventImpl = require(\"./Event-impl\").implementation; // Until webidl2js gains support for checking for Window, this would have to do.\n\n\nfunction isWindow(val) {\n  if (typeof val !== \"object\") {\n    return false;\n  }\n\n  const wrapper = idlUtils.wrapperForImpl(val);\n\n  if (typeof wrapper === \"object\") {\n    return wrapper === wrapper._globalProxy;\n  } // `val` may be either impl or wrapper currently, because webidl2js currently unwraps Window objects (and their global\n  // proxies) to their underlying EventTargetImpl during conversion, which is not what we want. But at the same time,\n  // some internal usage call this constructor with the actual global proxy.\n\n\n  return isWindow(idlUtils.implForWrapper(val));\n}\n\nclass UIEventImpl extends EventImpl {\n  constructor(args, privateData) {\n    const eventInitDict = args[1]; // undefined check included so that we can omit the property in internal usage.\n\n    if (eventInitDict && eventInitDict.view !== null && eventInitDict.view !== undefined) {\n      if (!isWindow(eventInitDict.view)) {\n        throw new TypeError(\"Failed to construct '\".concat(new.target.name.replace(/Impl$/, \"\"), \"': member view is not of \") + \"type Window.\");\n      }\n    }\n\n    super(args, privateData);\n  }\n\n  initUIEvent(type, bubbles, cancelable, view, detail) {\n    if (view !== null) {\n      if (!isWindow(view)) {\n        throw new TypeError(\"Failed to execute 'initUIEvent' on '\".concat(this.constructor.name.replace(/Impl$/, \"\"), \"': \") + \"parameter 4 is not of type 'Window'.\");\n      }\n    }\n\n    if (this._dispatchFlag) {\n      return;\n    }\n\n    this.initEvent(type, bubbles, cancelable);\n    this.view = view;\n    this.detail = detail;\n  }\n\n}\n\nUIEventImpl.defaultInit = UIEventInit.convert(undefined);\nmodule.exports = {\n  implementation: UIEventImpl\n};","map":null,"metadata":{},"sourceType":"script"}