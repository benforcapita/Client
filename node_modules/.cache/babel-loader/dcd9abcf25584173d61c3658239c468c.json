{"ast":null,"code":"\"use strict\";\n\nconst whatwgURL = require(\"whatwg-url\");\n\nconst DOMException = require(\"domexception\");\n\nconst _require = require(\"../helpers/document-base-url\"),\n      documentBaseURL = _require.documentBaseURL,\n      parseURLToResultingURLRecord = _require.parseURLToResultingURLRecord;\n\nconst _require2 = require(\"./navigation\"),\n      navigate = _require2.navigate; // Not implemented: use of entry settings object's API base URL in href setter, assign, and replace. Instead we just\n// use the document base URL. The difference matters in the case of cross-frame calls.\n\n\nexports.implementation = class LocationImpl {\n  constructor(args, privateData) {\n    this._relevantDocument = privateData.relevantDocument;\n    this.url = null;\n  }\n\n  get _url() {\n    return this._relevantDocument._URL;\n  }\n\n  _locationObjectSetterNavigate(url) {\n    // Not implemented: extra steps here to determine replacement flag.\n    return this._locationObjectNavigate(url);\n  }\n\n  _locationObjectNavigate(url, {\n    replacement = false\n  } = {}) {\n    // Not implemented: the setup for calling navigate, which doesn't apply to our stub navigate anyway.\n    navigate(this._relevantDocument._defaultView, url, {\n      replacement,\n      exceptionsEnabled: true\n    });\n  }\n\n  toString() {\n    return this.href;\n  }\n\n  get href() {\n    return whatwgURL.serializeURL(this._url);\n  }\n\n  set href(v) {\n    const newURL = whatwgURL.parseURL(v, {\n      baseURL: documentBaseURL(this._relevantDocument)\n    });\n\n    if (newURL === null) {\n      throw new TypeError(\"Could not parse \\\"\".concat(v, \"\\\" as a URL\"));\n    }\n\n    this._locationObjectSetterNavigate(newURL);\n  }\n\n  get origin() {\n    return whatwgURL.serializeURLOrigin(this._url);\n  }\n\n  get protocol() {\n    return this._url.scheme + \":\";\n  }\n\n  set protocol(v) {\n    const copyURL = Object.assign({}, this._url);\n    const possibleFailure = whatwgURL.basicURLParse(v + \":\", {\n      url: copyURL,\n      stateOverride: \"scheme start\"\n    });\n\n    if (possibleFailure === null) {\n      throw new TypeError(\"Could not parse the URL after setting the procol to \\\"\".concat(v, \"\\\"\"));\n    }\n\n    if (copyURL.scheme !== \"http\" && copyURL.scheme !== \"https\") {\n      return;\n    }\n\n    this._locationObjectSetterNavigate(copyURL);\n  }\n\n  get host() {\n    const url = this._url;\n\n    if (url.host === null) {\n      return \"\";\n    }\n\n    if (url.port === null) {\n      return whatwgURL.serializeHost(url.host);\n    }\n\n    return whatwgURL.serializeHost(url.host) + \":\" + whatwgURL.serializeInteger(url.port);\n  }\n\n  set host(v) {\n    const copyURL = Object.assign({}, this._url);\n\n    if (copyURL.cannotBeABaseURL) {\n      return;\n    }\n\n    whatwgURL.basicURLParse(v, {\n      url: copyURL,\n      stateOverride: \"host\"\n    });\n\n    this._locationObjectSetterNavigate(copyURL);\n  }\n\n  get hostname() {\n    if (this._url.host === null) {\n      return \"\";\n    }\n\n    return whatwgURL.serializeHost(this._url.host);\n  }\n\n  set hostname(v) {\n    const copyURL = Object.assign({}, this._url);\n\n    if (copyURL.cannotBeABaseURL) {\n      return;\n    }\n\n    whatwgURL.basicURLParse(v, {\n      url: copyURL,\n      stateOverride: \"hostname\"\n    });\n\n    this._locationObjectSetterNavigate(copyURL);\n  }\n\n  get port() {\n    if (this._url.port === null) {\n      return \"\";\n    }\n\n    return whatwgURL.serializeInteger(this._url.port);\n  }\n\n  set port(v) {\n    const copyURL = Object.assign({}, this._url);\n\n    if (copyURL.host === null || copyURL.cannotBeABaseURL || copyURL.scheme === \"file\") {\n      return;\n    }\n\n    whatwgURL.basicURLParse(v, {\n      url: copyURL,\n      stateOverride: \"port\"\n    });\n\n    this._locationObjectSetterNavigate(copyURL);\n  }\n\n  get pathname() {\n    const url = this._url;\n\n    if (url.cannotBeABaseURL) {\n      return url.path[0];\n    }\n\n    return \"/\" + url.path.join(\"/\");\n  }\n\n  set pathname(v) {\n    const copyURL = Object.assign({}, this._url);\n\n    if (copyURL.cannotBeABaseURL) {\n      return;\n    }\n\n    copyURL.path = [];\n    whatwgURL.basicURLParse(v, {\n      url: copyURL,\n      stateOverride: \"path start\"\n    });\n\n    this._locationObjectSetterNavigate(copyURL);\n  }\n\n  get search() {\n    if (this._url.query === null || this._url.query === \"\") {\n      return \"\";\n    }\n\n    return \"?\" + this._url.query;\n  }\n\n  set search(v) {\n    const copyURL = Object.assign({}, this._url);\n\n    if (v === \"\") {\n      copyURL.query = null;\n    } else {\n      const input = v[0] === \"?\" ? v.substring(1) : v;\n      copyURL.query = \"\";\n      whatwgURL.basicURLParse(input, {\n        url: copyURL,\n        stateOverride: \"query\",\n        encodingOverride: this._relevantDocument.charset\n      });\n    }\n\n    this._locationObjectSetterNavigate(copyURL);\n  }\n\n  get hash() {\n    if (this._url.fragment === null || this._url.fragment === \"\") {\n      return \"\";\n    }\n\n    return \"#\" + this._url.fragment;\n  }\n\n  set hash(v) {\n    const copyURL = Object.assign({}, this._url);\n\n    if (copyURL.scheme === \"javascript\") {\n      return;\n    }\n\n    if (v === \"\") {\n      copyURL.fragment = null;\n    } else {\n      const input = v[0] === \"#\" ? v.substring(1) : v;\n      copyURL.fragment = \"\";\n      whatwgURL.basicURLParse(input, {\n        url: copyURL,\n        stateOverride: \"fragment\"\n      });\n    }\n\n    this._locationObjectSetterNavigate(copyURL);\n  }\n\n  assign(url) {\n    // Should be entry settings object; oh well\n    const parsedURL = parseURLToResultingURLRecord(url, this._relevantDocument);\n\n    if (parsedURL === null) {\n      throw new DOMException(\"Could not resolve the given string \\\"\".concat(url, \"\\\" relative to the \") + \"base URL \\\"\".concat(this._relevantDocument.URL, \"\\\"\"), \"SyntaxError\");\n    }\n\n    this._locationObjectNavigate(parsedURL);\n  }\n\n  replace(url) {\n    // Should be entry settings object; oh well\n    const parsedURL = parseURLToResultingURLRecord(url, this._relevantDocument);\n\n    if (parsedURL === null) {\n      throw new DOMException(\"Could not resolve the given string \\\"\".concat(url, \"\\\" relative to the \") + \"base URL \\\"\".concat(this._relevantDocument.URL, \"\\\"\"), \"SyntaxError\");\n    }\n\n    this._locationObjectNavigate(parsedURL, {\n      replacement: true\n    });\n  }\n\n  reload() {\n    const flags = {\n      replace: true,\n      reloadTriggered: true,\n      exceptionsEnabled: true\n    };\n    navigate(this._relevantDocument._defaultView, this._url, flags);\n  }\n\n};","map":null,"metadata":{},"sourceType":"script"}