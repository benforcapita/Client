{"ast":null,"code":"\"use strict\";\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nconst _require = require(\"../helpers/traversal\"),\n      isConnected = _require.isConnected,\n      descendantsByHTMLLocalNames = _require.descendantsByHTMLLocalNames;\n\nconst _require2 = require(\"../helpers/internal-constants\"),\n      domSymbolTree = _require2.domSymbolTree;\n\nconst HTMLCollection = require(\"../generated/HTMLCollection\");\n\nconst notImplemented = require(\"../../browser/not-implemented\");\n\nconst _require3 = require(\"../../utils\"),\n      reflectURLAttribute = _require3.reflectURLAttribute;\n\nconst Event = require(\"../generated/Event\"); // http://www.whatwg.org/specs/web-apps/current-work/#category-listed\n\n\nconst listedElements = new Set([\"button\", \"fieldset\", \"input\", \"keygen\", \"object\", \"select\", \"textarea\"]); // https://html.spec.whatwg.org/multipage/forms.html#category-submit\n\nconst submittableElements = new Set([\"button\", \"input\", \"object\", \"select\", \"textarea\"]);\nconst encTypes = new Set([\"application/x-www-form-urlencoded\", \"multipart/form-data\", \"text/plain\"]);\nconst methods = new Set([\"get\", \"post\", \"dialog\"]);\nconst constraintValidationPositiveResult = Symbol(\"positive\");\nconst constraintValidationNegativeResult = Symbol(\"negative\");\n\nclass HTMLFormElementImpl extends HTMLElementImpl {\n  _descendantAdded(parent, child) {\n    const form = this;\n\n    for (const el of domSymbolTree.treeIterator(child)) {\n      if (typeof el._changedFormOwner === \"function\") {\n        el._changedFormOwner(form);\n      }\n    }\n\n    super._descendantAdded.apply(this, arguments);\n  }\n\n  _descendantRemoved(parent, child) {\n    for (const el of domSymbolTree.treeIterator(child)) {\n      if (typeof el._changedFormOwner === \"function\") {\n        el._changedFormOwner(null);\n      }\n    }\n\n    super._descendantRemoved.apply(this, arguments);\n  }\n\n  get elements() {\n    return HTMLCollection.createImpl([], {\n      element: this,\n      query: () => descendantsByHTMLLocalNames(this, listedElements)\n    });\n  }\n\n  get length() {\n    return this.elements.length;\n  }\n\n  _doSubmit() {\n    if (!isConnected(this)) {\n      return;\n    }\n\n    const ev = this._ownerDocument.createEvent(\"HTMLEvents\");\n\n    ev.initEvent(\"submit\", true, true);\n\n    if (this.dispatchEvent(ev)) {\n      this.submit();\n    }\n  }\n\n  submit() {\n    notImplemented(\"HTMLFormElement.prototype.submit\", this._ownerDocument._defaultView);\n  }\n\n  reset() {\n    for (const el of this.elements) {\n      if (typeof el._formReset === \"function\") {\n        el._formReset();\n      }\n    }\n  }\n\n  get method() {\n    let method = this.getAttribute(\"method\");\n\n    if (method) {\n      method = method.toLowerCase();\n    }\n\n    if (methods.has(method)) {\n      return method;\n    }\n\n    return \"get\";\n  }\n\n  set method(V) {\n    this.setAttribute(\"method\", V);\n  }\n\n  get enctype() {\n    let type = this.getAttribute(\"enctype\");\n\n    if (type) {\n      type = type.toLowerCase();\n    }\n\n    if (encTypes.has(type)) {\n      return type;\n    }\n\n    return \"application/x-www-form-urlencoded\";\n  }\n\n  set enctype(V) {\n    this.setAttribute(\"enctype\", V);\n  }\n\n  get action() {\n    const attributeValue = this.getAttribute(\"action\");\n\n    if (attributeValue === null || attributeValue === \"\") {\n      return this._ownerDocument.URL;\n    }\n\n    return reflectURLAttribute(this, \"action\");\n  }\n\n  set action(V) {\n    this.setAttribute(\"action\", V);\n  } // If the checkValidity() method is invoked, the user agent must statically validate the\n  // constraints of the form element, and return true if the constraint validation returned\n  // a positive result, and false if it returned a negative result.\n\n\n  checkValidity() {\n    return this._staticallyValidateConstraints().result === constraintValidationPositiveResult;\n  } // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#interactively-validate-the-constraints\n\n\n  reportValidity() {\n    return this.checkValidity();\n  } // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#statically-validate-the-constraints\n\n\n  _staticallyValidateConstraints() {\n    const controls = [];\n\n    for (const el of domSymbolTree.treeIterator(this)) {\n      if (el.form === this && submittableElements.has(el.nodeName.toLowerCase())) {\n        controls.push(el);\n      }\n    }\n\n    const invalidControls = [];\n\n    for (const control of controls) {\n      if (control._isCandidateForConstraintValidation() && !control._satisfiesConstraints()) {\n        invalidControls.push(control);\n      }\n    }\n\n    if (invalidControls.length === 0) {\n      return {\n        result: constraintValidationPositiveResult\n      };\n    }\n\n    const unhandledInvalidControls = [];\n\n    for (const invalidControl of invalidControls) {\n      const notCancelled = invalidControl.dispatchEvent(Event.createImpl([\"invalid\", {\n        cancelable: true\n      }]));\n\n      if (notCancelled) {\n        unhandledInvalidControls.push(invalidControl);\n      }\n    }\n\n    return {\n      result: constraintValidationNegativeResult,\n      unhandledInvalidControls\n    };\n  }\n\n}\n\nmodule.exports = {\n  implementation: HTMLFormElementImpl\n};","map":null,"metadata":{},"sourceType":"script"}