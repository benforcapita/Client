{"ast":null,"code":"\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\n\nconst utils = require(\"./utils.js\");\n\nconst impl = utils.implSymbol;\n\nconst HTMLElement = require(\"./HTMLElement.js\");\n\nconst LinkStyle = require(\"./LinkStyle.js\");\n\nfunction HTMLLinkElement() {\n  throw new TypeError(\"Illegal constructor\");\n}\n\nObject.setPrototypeOf(HTMLLinkElement.prototype, HTMLElement.interface.prototype);\nObject.setPrototypeOf(HTMLLinkElement, HTMLElement.interface);\nObject.defineProperty(HTMLLinkElement, \"prototype\", {\n  value: HTMLLinkElement.prototype,\n  writable: false,\n  enumerable: false,\n  configurable: false\n});\nObject.defineProperty(HTMLLinkElement.prototype, \"href\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"href\"];\n  },\n\n  set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"USVString\"](V, {\n      context: \"Failed to set the 'href' property on 'HTMLLinkElement': The provided value\"\n    });\n    this[impl][\"href\"] = V;\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLLinkElement.prototype, \"crossOrigin\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    const value = this.getAttribute(\"crossOrigin\");\n    return value === null ? \"\" : value;\n  },\n\n  set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    if (V === null || V === undefined) {\n      V = null;\n    } else {\n      V = conversions[\"DOMString\"](V, {\n        context: \"Failed to set the 'crossOrigin' property on 'HTMLLinkElement': The provided value\"\n      });\n    }\n\n    this.setAttribute(\"crossOrigin\", V);\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLLinkElement.prototype, \"rel\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    const value = this.getAttribute(\"rel\");\n    return value === null ? \"\" : value;\n  },\n\n  set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"DOMString\"](V, {\n      context: \"Failed to set the 'rel' property on 'HTMLLinkElement': The provided value\"\n    });\n    this.setAttribute(\"rel\", V);\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLLinkElement.prototype, \"media\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    const value = this.getAttribute(\"media\");\n    return value === null ? \"\" : value;\n  },\n\n  set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"DOMString\"](V, {\n      context: \"Failed to set the 'media' property on 'HTMLLinkElement': The provided value\"\n    });\n    this.setAttribute(\"media\", V);\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLLinkElement.prototype, \"hreflang\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    const value = this.getAttribute(\"hreflang\");\n    return value === null ? \"\" : value;\n  },\n\n  set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"DOMString\"](V, {\n      context: \"Failed to set the 'hreflang' property on 'HTMLLinkElement': The provided value\"\n    });\n    this.setAttribute(\"hreflang\", V);\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLLinkElement.prototype, \"type\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    const value = this.getAttribute(\"type\");\n    return value === null ? \"\" : value;\n  },\n\n  set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"DOMString\"](V, {\n      context: \"Failed to set the 'type' property on 'HTMLLinkElement': The provided value\"\n    });\n    this.setAttribute(\"type\", V);\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLLinkElement.prototype, \"charset\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    const value = this.getAttribute(\"charset\");\n    return value === null ? \"\" : value;\n  },\n\n  set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"DOMString\"](V, {\n      context: \"Failed to set the 'charset' property on 'HTMLLinkElement': The provided value\"\n    });\n    this.setAttribute(\"charset\", V);\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLLinkElement.prototype, \"rev\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    const value = this.getAttribute(\"rev\");\n    return value === null ? \"\" : value;\n  },\n\n  set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"DOMString\"](V, {\n      context: \"Failed to set the 'rev' property on 'HTMLLinkElement': The provided value\"\n    });\n    this.setAttribute(\"rev\", V);\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLLinkElement.prototype, \"target\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    const value = this.getAttribute(\"target\");\n    return value === null ? \"\" : value;\n  },\n\n  set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"DOMString\"](V, {\n      context: \"Failed to set the 'target' property on 'HTMLLinkElement': The provided value\"\n    });\n    this.setAttribute(\"target\", V);\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLLinkElement.prototype, \"sheet\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"sheet\"]);\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLLinkElement.prototype, Symbol.toStringTag, {\n  value: \"HTMLLinkElement\",\n  writable: false,\n  enumerable: false,\n  configurable: true\n});\nconst iface = {\n  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`\n  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as\n  // implementing this mixin interface.\n  _mixedIntoPredicates: [],\n\n  is(obj) {\n    if (obj) {\n      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {\n        return true;\n      }\n\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(obj)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n\n  isImpl(obj) {\n    if (obj) {\n      if (obj instanceof Impl.implementation) {\n        return true;\n      }\n\n      const wrapper = utils.wrapperForImpl(obj);\n\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(wrapper)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n\n  convert(obj, {\n    context = \"The provided value\"\n  } = {}) {\n    if (module.exports.is(obj)) {\n      return utils.implForWrapper(obj);\n    }\n\n    throw new TypeError(\"\".concat(context, \" is not of type 'HTMLLinkElement'.\"));\n  },\n\n  create(constructorArgs, privateData) {\n    let obj = Object.create(HTMLLinkElement.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n\n  createImpl(constructorArgs, privateData) {\n    let obj = Object.create(HTMLLinkElement.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return utils.implForWrapper(obj);\n  },\n\n  _internalSetup(obj) {\n    HTMLElement._internalSetup(obj);\n  },\n\n  setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n    privateData.wrapper = obj;\n\n    this._internalSetup(obj);\n\n    Object.defineProperty(obj, impl, {\n      value: new Impl.implementation(constructorArgs, privateData),\n      writable: false,\n      enumerable: false,\n      configurable: true\n    });\n    obj[impl][utils.wrapperSymbol] = obj;\n\n    if (Impl.init) {\n      Impl.init(obj[impl], privateData);\n    }\n\n    return obj;\n  },\n\n  interface: HTMLLinkElement,\n  expose: {\n    Window: {\n      HTMLLinkElement\n    }\n  }\n}; // iface\n\nmodule.exports = iface;\n\nLinkStyle._mixedIntoPredicates.push(module.exports.is);\n\nconst Impl = require(\"../nodes/HTMLLinkElement-impl.js\");","map":null,"metadata":{},"sourceType":"script"}