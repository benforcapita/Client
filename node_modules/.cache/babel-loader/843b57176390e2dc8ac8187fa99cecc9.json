{"ast":null,"code":"\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\n\nconst utils = require(\"./utils.js\");\n\nconst impl = utils.implSymbol;\n\nconst HTMLElement = require(\"./HTMLElement.js\");\n\nfunction HTMLTrackElement() {\n  throw new TypeError(\"Illegal constructor\");\n}\n\nObject.setPrototypeOf(HTMLTrackElement.prototype, HTMLElement.interface.prototype);\nObject.setPrototypeOf(HTMLTrackElement, HTMLElement.interface);\nObject.defineProperty(HTMLTrackElement, \"prototype\", {\n  value: HTMLTrackElement.prototype,\n  writable: false,\n  enumerable: false,\n  configurable: false\n});\nObject.defineProperty(HTMLTrackElement.prototype, \"kind\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    const value = this.getAttribute(\"kind\");\n    return value === null ? \"\" : value;\n  },\n\n  set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"DOMString\"](V, {\n      context: \"Failed to set the 'kind' property on 'HTMLTrackElement': The provided value\"\n    });\n    this.setAttribute(\"kind\", V);\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLTrackElement.prototype, \"src\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"src\"];\n  },\n\n  set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"USVString\"](V, {\n      context: \"Failed to set the 'src' property on 'HTMLTrackElement': The provided value\"\n    });\n    this[impl][\"src\"] = V;\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLTrackElement.prototype, \"srclang\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    const value = this.getAttribute(\"srclang\");\n    return value === null ? \"\" : value;\n  },\n\n  set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"DOMString\"](V, {\n      context: \"Failed to set the 'srclang' property on 'HTMLTrackElement': The provided value\"\n    });\n    this.setAttribute(\"srclang\", V);\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLTrackElement.prototype, \"label\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    const value = this.getAttribute(\"label\");\n    return value === null ? \"\" : value;\n  },\n\n  set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"DOMString\"](V, {\n      context: \"Failed to set the 'label' property on 'HTMLTrackElement': The provided value\"\n    });\n    this.setAttribute(\"label\", V);\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLTrackElement.prototype, \"default\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this.hasAttribute(\"default\");\n  },\n\n  set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"boolean\"](V, {\n      context: \"Failed to set the 'default' property on 'HTMLTrackElement': The provided value\"\n    });\n\n    if (V) {\n      this.setAttribute(\"default\", \"\");\n    } else {\n      this.removeAttribute(\"default\");\n    }\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLTrackElement.prototype, \"readyState\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"readyState\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLTrackElement, \"NONE\", {\n  value: 0,\n  enumerable: true\n});\nObject.defineProperty(HTMLTrackElement.prototype, \"NONE\", {\n  value: 0,\n  enumerable: true\n});\nObject.defineProperty(HTMLTrackElement, \"LOADING\", {\n  value: 1,\n  enumerable: true\n});\nObject.defineProperty(HTMLTrackElement.prototype, \"LOADING\", {\n  value: 1,\n  enumerable: true\n});\nObject.defineProperty(HTMLTrackElement, \"LOADED\", {\n  value: 2,\n  enumerable: true\n});\nObject.defineProperty(HTMLTrackElement.prototype, \"LOADED\", {\n  value: 2,\n  enumerable: true\n});\nObject.defineProperty(HTMLTrackElement, \"ERROR\", {\n  value: 3,\n  enumerable: true\n});\nObject.defineProperty(HTMLTrackElement.prototype, \"ERROR\", {\n  value: 3,\n  enumerable: true\n});\nObject.defineProperty(HTMLTrackElement.prototype, Symbol.toStringTag, {\n  value: \"HTMLTrackElement\",\n  writable: false,\n  enumerable: false,\n  configurable: true\n});\nconst iface = {\n  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`\n  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as\n  // implementing this mixin interface.\n  _mixedIntoPredicates: [],\n\n  is(obj) {\n    if (obj) {\n      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {\n        return true;\n      }\n\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(obj)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n\n  isImpl(obj) {\n    if (obj) {\n      if (obj instanceof Impl.implementation) {\n        return true;\n      }\n\n      const wrapper = utils.wrapperForImpl(obj);\n\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(wrapper)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n\n  convert(obj, {\n    context = \"The provided value\"\n  } = {}) {\n    if (module.exports.is(obj)) {\n      return utils.implForWrapper(obj);\n    }\n\n    throw new TypeError(\"\".concat(context, \" is not of type 'HTMLTrackElement'.\"));\n  },\n\n  create(constructorArgs, privateData) {\n    let obj = Object.create(HTMLTrackElement.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n\n  createImpl(constructorArgs, privateData) {\n    let obj = Object.create(HTMLTrackElement.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return utils.implForWrapper(obj);\n  },\n\n  _internalSetup(obj) {\n    HTMLElement._internalSetup(obj);\n  },\n\n  setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n    privateData.wrapper = obj;\n\n    this._internalSetup(obj);\n\n    Object.defineProperty(obj, impl, {\n      value: new Impl.implementation(constructorArgs, privateData),\n      writable: false,\n      enumerable: false,\n      configurable: true\n    });\n    obj[impl][utils.wrapperSymbol] = obj;\n\n    if (Impl.init) {\n      Impl.init(obj[impl], privateData);\n    }\n\n    return obj;\n  },\n\n  interface: HTMLTrackElement,\n  expose: {\n    Window: {\n      HTMLTrackElement\n    }\n  }\n}; // iface\n\nmodule.exports = iface;\n\nconst Impl = require(\"../nodes/HTMLTrackElement-impl.js\");","map":null,"metadata":{},"sourceType":"script"}