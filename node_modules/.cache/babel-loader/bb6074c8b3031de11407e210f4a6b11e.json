{"ast":null,"code":"\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\n\nconst utils = require(\"./utils.js\");\n\nconst convertDocumentType = require(\"./DocumentType.js\").convert;\n\nconst impl = utils.implSymbol;\n\nfunction DOMImplementation() {\n  throw new TypeError(\"Illegal constructor\");\n}\n\nObject.defineProperty(DOMImplementation, \"prototype\", {\n  value: DOMImplementation.prototype,\n  writable: false,\n  enumerable: false,\n  configurable: false\n});\n\nDOMImplementation.prototype.createDocumentType = function createDocumentType(qualifiedName, publicId, systemId) {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 3) {\n    throw new TypeError(\"Failed to execute 'createDocumentType' on 'DOMImplementation': 3 arguments required, but only \" + arguments.length + \" present.\");\n  }\n\n  const args = [];\n  {\n    let curArg = arguments[0];\n    curArg = conversions[\"DOMString\"](curArg, {\n      context: \"Failed to execute 'createDocumentType' on 'DOMImplementation': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  {\n    let curArg = arguments[1];\n    curArg = conversions[\"DOMString\"](curArg, {\n      context: \"Failed to execute 'createDocumentType' on 'DOMImplementation': parameter 2\"\n    });\n    args.push(curArg);\n  }\n  {\n    let curArg = arguments[2];\n    curArg = conversions[\"DOMString\"](curArg, {\n      context: \"Failed to execute 'createDocumentType' on 'DOMImplementation': parameter 3\"\n    });\n    args.push(curArg);\n  }\n  return utils.tryWrapperForImpl(this[impl].createDocumentType(...args));\n};\n\nDOMImplementation.prototype.createDocument = function createDocument(namespace, qualifiedName) {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 2) {\n    throw new TypeError(\"Failed to execute 'createDocument' on 'DOMImplementation': 2 arguments required, but only \" + arguments.length + \" present.\");\n  }\n\n  const args = [];\n  {\n    let curArg = arguments[0];\n\n    if (curArg === null || curArg === undefined) {\n      curArg = null;\n    } else {\n      curArg = conversions[\"DOMString\"](curArg, {\n        context: \"Failed to execute 'createDocument' on 'DOMImplementation': parameter 1\"\n      });\n    }\n\n    args.push(curArg);\n  }\n  {\n    let curArg = arguments[1];\n    curArg = conversions[\"DOMString\"](curArg, {\n      context: \"Failed to execute 'createDocument' on 'DOMImplementation': parameter 2\",\n      treatNullAsEmptyString: true\n    });\n    args.push(curArg);\n  }\n  {\n    let curArg = arguments[2];\n\n    if (curArg !== undefined) {\n      if (curArg === null || curArg === undefined) {\n        curArg = null;\n      } else {\n        curArg = convertDocumentType(curArg, {\n          context: \"Failed to execute 'createDocument' on 'DOMImplementation': parameter 3\"\n        });\n      }\n    } else {\n      curArg = null;\n    }\n\n    args.push(curArg);\n  }\n  return utils.tryWrapperForImpl(this[impl].createDocument(...args));\n};\n\nDOMImplementation.prototype.createHTMLDocument = function createHTMLDocument() {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  const args = [];\n  {\n    let curArg = arguments[0];\n\n    if (curArg !== undefined) {\n      curArg = conversions[\"DOMString\"](curArg, {\n        context: \"Failed to execute 'createHTMLDocument' on 'DOMImplementation': parameter 1\"\n      });\n    }\n\n    args.push(curArg);\n  }\n  return utils.tryWrapperForImpl(this[impl].createHTMLDocument(...args));\n};\n\nDOMImplementation.prototype.hasFeature = function hasFeature() {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  return this[impl].hasFeature();\n};\n\nObject.defineProperty(DOMImplementation.prototype, Symbol.toStringTag, {\n  value: \"DOMImplementation\",\n  writable: false,\n  enumerable: false,\n  configurable: true\n});\nconst iface = {\n  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`\n  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as\n  // implementing this mixin interface.\n  _mixedIntoPredicates: [],\n\n  is(obj) {\n    if (obj) {\n      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {\n        return true;\n      }\n\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(obj)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n\n  isImpl(obj) {\n    if (obj) {\n      if (obj instanceof Impl.implementation) {\n        return true;\n      }\n\n      const wrapper = utils.wrapperForImpl(obj);\n\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(wrapper)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n\n  convert(obj, {\n    context = \"The provided value\"\n  } = {}) {\n    if (module.exports.is(obj)) {\n      return utils.implForWrapper(obj);\n    }\n\n    throw new TypeError(\"\".concat(context, \" is not of type 'DOMImplementation'.\"));\n  },\n\n  create(constructorArgs, privateData) {\n    let obj = Object.create(DOMImplementation.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n\n  createImpl(constructorArgs, privateData) {\n    let obj = Object.create(DOMImplementation.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return utils.implForWrapper(obj);\n  },\n\n  _internalSetup(obj) {},\n\n  setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n    privateData.wrapper = obj;\n\n    this._internalSetup(obj);\n\n    Object.defineProperty(obj, impl, {\n      value: new Impl.implementation(constructorArgs, privateData),\n      writable: false,\n      enumerable: false,\n      configurable: true\n    });\n    obj[impl][utils.wrapperSymbol] = obj;\n\n    if (Impl.init) {\n      Impl.init(obj[impl], privateData);\n    }\n\n    return obj;\n  },\n\n  interface: DOMImplementation,\n  expose: {\n    Window: {\n      DOMImplementation\n    }\n  }\n}; // iface\n\nmodule.exports = iface;\n\nconst Impl = require(\"../nodes/DOMImplementation-impl.js\");","map":null,"metadata":{},"sourceType":"script"}