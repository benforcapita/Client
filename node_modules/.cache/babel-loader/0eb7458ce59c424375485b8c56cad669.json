{"ast":null,"code":"\"use strict\";\n\nconst vm = require(\"vm\");\n\nconst idlUtils = require(\"../living/generated/utils\");\n\nexports.availableDocumentFeatures = [\"FetchExternalResources\", \"SkipExternalResources\"];\nexports.defaultDocumentFeatures = {\n  FetchExternalResources: [\"script\", \"link\"],\n  // omitted by default: \"frame\"\n  SkipExternalResources: false\n};\n\nexports.applyDocumentFeatures = (documentImpl, features = {}) => {\n  for (let i = 0; i < exports.availableDocumentFeatures.length; ++i) {\n    const featureName = exports.availableDocumentFeatures[i];\n    let featureSource;\n\n    if (features[featureName] !== undefined) {\n      featureSource = features[featureName]; // We have to check the lowercase version also because the Document feature\n      // methods convert everything to lowercase.\n    } else if (typeof features[featureName.toLowerCase()] !== \"undefined\") {\n      featureSource = features[featureName.toLowerCase()];\n    } else if (exports.defaultDocumentFeatures[featureName]) {\n      featureSource = exports.defaultDocumentFeatures[featureName];\n    } else {\n      continue;\n    }\n\n    const implImpl = documentImpl._implementation;\n\n    implImpl._removeFeature(featureName);\n\n    if (featureSource !== undefined) {\n      if (Array.isArray(featureSource)) {\n        for (let j = 0; j < featureSource.length; ++j) {\n          implImpl._addFeature(featureName, featureSource[j]);\n        }\n      } else {\n        implImpl._addFeature(featureName, featureSource);\n      }\n    }\n  }\n};\n\nexports.contextifyWindow = window => {\n  if (vm.isContext(window)) {\n    return;\n  }\n\n  vm.createContext(window);\n  const documentImpl = idlUtils.implForWrapper(window._document);\n  documentImpl._defaultView = window._globalProxy = vm.runInContext(\"this\", window);\n};","map":null,"metadata":{},"sourceType":"script"}