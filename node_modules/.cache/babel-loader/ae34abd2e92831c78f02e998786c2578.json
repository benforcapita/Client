{"ast":null,"code":"\"use strict\";\n\nconst DOMException = require(\"domexception\");\n\nconst OrderedSet = require(\"../helpers/ordered-set.js\");\n\nconst _require = require(\"../helpers/strings.js\"),\n      asciiLowercase = _require.asciiLowercase;\n\nconst idlUtils = require(\"../generated/utils.js\");\n\nconst _require2 = require(\"../attributes.js\"),\n      getAttributeValue = _require2.getAttributeValue,\n      setAttributeValue = _require2.setAttributeValue,\n      hasAttributeByName = _require2.hasAttributeByName;\n\nfunction validateTokens(...tokens) {\n  for (const token of tokens) {\n    if (token === \"\") {\n      throw new DOMException(\"The token provided must not be empty.\", \"SyntaxError\");\n    }\n  }\n\n  for (const token of tokens) {\n    if (/[\\t\\n\\f\\r ]/.test(token)) {\n      const whitespaceMsg = \"The token provided contains HTML space characters, which are not valid in tokens.\";\n      throw new DOMException(whitespaceMsg, \"InvalidCharacterError\");\n    }\n  }\n} // https://dom.spec.whatwg.org/#domtokenlist\n\n\nclass DOMTokenListImpl {\n  constructor(constructorArgs, privateData) {\n    // _syncWithElement() must always be called before any _tokenSet access.\n    this._tokenSet = new OrderedSet();\n    this._element = privateData.element;\n    this._attributeLocalName = privateData.attributeLocalName;\n    this._supportedTokens = privateData.supportedTokens; // Needs synchronization with element if token set is to be accessed.\n\n    this._dirty = true;\n  }\n\n  attrModified() {\n    this._dirty = true;\n  }\n\n  _syncWithElement() {\n    if (!this._dirty) {\n      return;\n    }\n\n    const val = getAttributeValue(this._element, this._attributeLocalName);\n\n    if (val === null) {\n      this._tokenSet.empty();\n    } else {\n      this._tokenSet = OrderedSet.parse(val);\n    }\n\n    this._dirty = false;\n  }\n\n  _validationSteps(token) {\n    if (!this._supportedTokens) {\n      throw new TypeError(\"\".concat(this._attributeLocalName, \" attribute has no supported tokens\"));\n    }\n\n    const lowerToken = asciiLowercase(token);\n    return this._supportedTokens.has(lowerToken);\n  }\n\n  _updateSteps() {\n    if (!hasAttributeByName(this._element, this._attributeLocalName) && this._tokenSet.isEmpty()) {\n      return;\n    }\n\n    setAttributeValue(this._element, this._attributeLocalName, this._tokenSet.serialize());\n  }\n\n  _serializeSteps() {\n    return getAttributeValue(this._element, this._attributeLocalName);\n  } // Used by other parts of jsdom\n\n\n  get tokenSet() {\n    this._syncWithElement();\n\n    return this._tokenSet;\n  }\n\n  get length() {\n    this._syncWithElement();\n\n    return this._tokenSet.size;\n  }\n\n  get [idlUtils.supportedPropertyIndices]() {\n    this._syncWithElement();\n\n    return this._tokenSet.keys();\n  }\n\n  item(index) {\n    this._syncWithElement();\n\n    if (index >= this._tokenSet.size) {\n      return null;\n    }\n\n    return this._tokenSet.get(index);\n  }\n\n  contains(token) {\n    this._syncWithElement();\n\n    return this._tokenSet.contains(token);\n  }\n\n  add(...tokens) {\n    for (const token of tokens) {\n      validateTokens(token);\n    }\n\n    this._syncWithElement();\n\n    for (const token of tokens) {\n      this._tokenSet.append(token);\n    }\n\n    this._updateSteps();\n  }\n\n  remove(...tokens) {\n    for (const token of tokens) {\n      validateTokens(token);\n    }\n\n    this._syncWithElement();\n\n    this._tokenSet.remove(...tokens);\n\n    this._updateSteps();\n  }\n\n  toggle(token, force = undefined) {\n    validateTokens(token);\n\n    this._syncWithElement();\n\n    if (this._tokenSet.contains(token)) {\n      if (force === undefined || force === false) {\n        this._tokenSet.remove(token);\n\n        this._updateSteps();\n\n        return false;\n      }\n\n      return true;\n    }\n\n    if (force === undefined || force === true) {\n      this._tokenSet.append(token);\n\n      this._updateSteps();\n\n      return true;\n    }\n\n    return false;\n  }\n\n  replace(token, newToken) {\n    validateTokens(token, newToken);\n\n    this._syncWithElement();\n\n    if (!this._tokenSet.contains(token)) {\n      return false;\n    }\n\n    this._tokenSet.replace(token, newToken);\n\n    this._updateSteps();\n\n    return true;\n  }\n\n  supports(token) {\n    return this._validationSteps(token);\n  }\n\n  get value() {\n    return this._serializeSteps();\n  }\n\n  set value(V) {\n    setAttributeValue(this._element, this._attributeLocalName, V);\n  }\n\n}\n\nexports.implementation = DOMTokenListImpl;","map":null,"metadata":{},"sourceType":"script"}