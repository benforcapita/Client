{"ast":null,"code":"\"use strict\";\n\nconst _require = require(\"events\"),\n      EventEmitter = _require.EventEmitter;\n\nmodule.exports = class VirtualConsole extends EventEmitter {\n  constructor() {\n    super();\n    this.on(\"error\", () => {// If \"error\" event has no listeners,\n      // EventEmitter throws an exception\n    });\n  }\n\n  sendTo(anyConsole, options) {\n    if (options === undefined) {\n      options = {};\n    }\n\n    for (const method of Object.keys(anyConsole)) {\n      if (typeof anyConsole[method] === \"function\") {\n        function onMethodCall() {\n          anyConsole[method](...arguments);\n        }\n\n        this.on(method, onMethodCall);\n      }\n    }\n\n    if (!options.omitJSDOMErrors) {\n      this.on(\"jsdomError\", e => anyConsole.error(e.stack, e.detail));\n    }\n\n    return this;\n  }\n\n};","map":null,"metadata":{},"sourceType":"script"}