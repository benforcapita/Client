{"ast":null,"code":"\"use strict\";\n\nconst whatwgEncoding = require(\"whatwg-encoding\");\n\nconst MIMEType = require(\"whatwg-mimetype\");\n\nconst querystring = require(\"querystring\");\n\nconst DOMException = require(\"domexception\");\n\nconst EventTargetImpl = require(\"../events/EventTarget-impl\").implementation;\n\nconst ProgressEvent = require(\"../generated/ProgressEvent\");\n\nconst _require = require(\"../helpers/create-event-accessor\"),\n      setupForSimpleEventAccessors = _require.setupForSimpleEventAccessors;\n\nconst READY_STATES = Object.freeze({\n  EMPTY: 0,\n  LOADING: 1,\n  DONE: 2\n});\nconst events = [\"loadstart\", \"progress\", \"load\", \"abort\", \"error\", \"loadend\"];\n\nclass FileReaderImpl extends EventTargetImpl {\n  constructor(args, privateData) {\n    super([], privateData);\n    this.error = null;\n    this.readyState = READY_STATES.EMPTY;\n    this.result = null;\n    this._ownerDocument = privateData.window.document;\n    this._terminated = false;\n  }\n\n  readAsArrayBuffer(file) {\n    this._readFile(file, \"buffer\");\n  }\n\n  readAsBinaryString(file) {\n    this._readFile(file, \"binaryString\");\n  }\n\n  readAsDataURL(file) {\n    this._readFile(file, \"dataURL\");\n  }\n\n  readAsText(file, encoding) {\n    this._readFile(file, \"text\", whatwgEncoding.labelToName(encoding) || \"UTF-8\");\n  }\n\n  abort() {\n    if (this.readyState === READY_STATES.EMPTY || this.readyState === READY_STATES.DONE) {\n      this.result = null;\n      return;\n    }\n\n    if (this.readyState === READY_STATES.LOADING) {\n      this.readyState = READY_STATES.DONE;\n      this.result = null;\n    }\n\n    this._terminated = true;\n\n    this._fireProgressEvent(\"abort\");\n\n    this._fireProgressEvent(\"loadend\");\n  }\n\n  _fireProgressEvent(name, props) {\n    const event = ProgressEvent.createImpl([name, Object.assign({\n      bubbles: false,\n      cancelable: false\n    }, props)], {});\n    this.dispatchEvent(event);\n  }\n\n  _readFile(file, format, encoding) {\n    if (this.readyState === READY_STATES.LOADING) {\n      throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n    }\n\n    this.readyState = READY_STATES.LOADING;\n    setImmediate(() => {\n      if (this._terminated) {\n        this._terminated = false;\n        return;\n      }\n\n      this._fireProgressEvent(\"loadstart\");\n\n      let data = file._buffer;\n\n      if (!data) {\n        data = Buffer.alloc(0);\n      }\n\n      this._fireProgressEvent(\"progress\", {\n        lengthComputable: !isNaN(file.size),\n        total: file.size,\n        loaded: data.length\n      });\n\n      setImmediate(() => {\n        if (this._terminated) {\n          this._terminated = false;\n          return;\n        }\n\n        switch (format) {\n          default:\n          case \"buffer\":\n            {\n              this.result = new Uint8Array(data).buffer;\n              break;\n            }\n\n          case \"binaryString\":\n            {\n              this.result = data.toString(\"binary\");\n              break;\n            }\n\n          case \"dataURL\":\n            {\n              // Spec seems very unclear here; see https://github.com/whatwg/fetch/issues/665#issuecomment-362930079.\n              let dataUrl = \"data:\";\n              const contentType = MIMEType.parse(file.type);\n\n              if (contentType && contentType.type === \"text\") {\n                const fallbackEncoding = whatwgEncoding.getBOMEncoding(data) || whatwgEncoding.labelToName(contentType.parameters.get(\"charset\")) || \"UTF-8\";\n                const decoded = whatwgEncoding.decode(data, fallbackEncoding);\n                contentType.parameters.set(\"charset\", encoding);\n                dataUrl += contentType.toString();\n                dataUrl += \",\";\n                dataUrl += querystring.escape(decoded);\n              } else {\n                if (contentType) {\n                  dataUrl += contentType.toString();\n                }\n\n                dataUrl += \";base64,\";\n                dataUrl += data.toString(\"base64\");\n              }\n\n              this.result = dataUrl;\n              break;\n            }\n\n          case \"text\":\n            {\n              this.result = whatwgEncoding.decode(data, encoding);\n              break;\n            }\n        }\n\n        this.readyState = READY_STATES.DONE;\n\n        this._fireProgressEvent(\"load\");\n\n        this._fireProgressEvent(\"loadend\");\n      });\n    });\n  }\n\n}\n\nsetupForSimpleEventAccessors(FileReaderImpl.prototype, events);\nexports.implementation = FileReaderImpl;","map":null,"metadata":{},"sourceType":"script"}