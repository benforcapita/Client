{"ast":null,"code":"\"use strict\";\n\nconst whatwgURL = require(\"whatwg-url\");\n\nconst _require = require(\"../helpers/document-base-url\"),\n      parseURLToResultingURLRecord = _require.parseURLToResultingURLRecord;\n\nexports.implementation = class HTMLHyperlinkElementUtilsImpl {\n  _htmlHyperlinkElementUtilsSetup() {\n    this.url = null;\n  }\n\n  toString() {\n    return this.href;\n  }\n\n  get href() {\n    reinitializeURL(this);\n    const url = this.url;\n\n    if (url === null) {\n      const href = this.getAttribute(\"href\");\n      return href === null ? \"\" : href;\n    }\n\n    return whatwgURL.serializeURL(url);\n  }\n\n  set href(v) {\n    this.setAttribute(\"href\", v);\n  }\n\n  get origin() {\n    reinitializeURL(this);\n\n    if (this.url === null) {\n      return \"\";\n    }\n\n    return whatwgURL.serializeURLOrigin(this.url);\n  }\n\n  get protocol() {\n    reinitializeURL(this);\n\n    if (this.url === null) {\n      return \":\";\n    }\n\n    return this.url.scheme + \":\";\n  }\n\n  set protocol(v) {\n    reinitializeURL(this);\n\n    if (this.url === null) {\n      return;\n    }\n\n    whatwgURL.basicURLParse(v + \":\", {\n      url: this.url,\n      stateOverride: \"scheme start\"\n    });\n    updateHref(this);\n  }\n\n  get username() {\n    reinitializeURL(this);\n\n    if (this.url === null) {\n      return \"\";\n    }\n\n    return this.url.username;\n  }\n\n  set username(v) {\n    reinitializeURL(this);\n    const url = this.url;\n\n    if (url === null || url.host === null || url.host === \"\" || url.cannotBeABaseURL || url.scheme === \"file\") {\n      return;\n    }\n\n    whatwgURL.setTheUsername(url, v);\n    updateHref(this);\n  }\n\n  get password() {\n    reinitializeURL(this);\n    const url = this.url;\n\n    if (url === null) {\n      return \"\";\n    }\n\n    return url.password;\n  }\n\n  set password(v) {\n    reinitializeURL(this);\n    const url = this.url;\n\n    if (url === null || url.host === null || url.host === \"\" || url.cannotBeABaseURL || url.scheme === \"file\") {\n      return;\n    }\n\n    whatwgURL.setThePassword(url, v);\n    updateHref(this);\n  }\n\n  get host() {\n    reinitializeURL(this);\n    const url = this.url;\n\n    if (url === null || url.host === null) {\n      return \"\";\n    }\n\n    if (url.port === null) {\n      return whatwgURL.serializeHost(url.host);\n    }\n\n    return whatwgURL.serializeHost(url.host) + \":\" + whatwgURL.serializeInteger(url.port);\n  }\n\n  set host(v) {\n    reinitializeURL(this);\n    const url = this.url;\n\n    if (url === null || url.cannotBeABaseURL) {\n      return;\n    }\n\n    whatwgURL.basicURLParse(v, {\n      url,\n      stateOverride: \"host\"\n    });\n    updateHref(this);\n  }\n\n  get hostname() {\n    reinitializeURL(this);\n    const url = this.url;\n\n    if (url === null || url.host === null) {\n      return \"\";\n    }\n\n    return whatwgURL.serializeHost(url.host);\n  }\n\n  set hostname(v) {\n    reinitializeURL(this);\n    const url = this.url;\n\n    if (url === null || url.cannotBeABaseURL) {\n      return;\n    }\n\n    whatwgURL.basicURLParse(v, {\n      url,\n      stateOverride: \"hostname\"\n    });\n    updateHref(this);\n  }\n\n  get port() {\n    reinitializeURL(this);\n    const url = this.url;\n\n    if (url === null || url.port === null) {\n      return \"\";\n    }\n\n    return whatwgURL.serializeInteger(url.port);\n  }\n\n  set port(v) {\n    reinitializeURL(this);\n    const url = this.url;\n\n    if (url === null || url.host === null || url.host === \"\" || url.cannotBeABaseURL || url.scheme === \"file\") {\n      return;\n    }\n\n    if (v === \"\") {\n      url.port = null;\n    } else {\n      whatwgURL.basicURLParse(v, {\n        url,\n        stateOverride: \"port\"\n      });\n    }\n\n    updateHref(this);\n  }\n\n  get pathname() {\n    reinitializeURL(this);\n    const url = this.url;\n\n    if (url === null) {\n      return \"\";\n    }\n\n    if (url.cannotBeABaseURL) {\n      return url.path[0];\n    }\n\n    return \"/\" + url.path.join(\"/\");\n  }\n\n  set pathname(v) {\n    reinitializeURL(this);\n    const url = this.url;\n\n    if (url === null || url.cannotBeABaseURL) {\n      return;\n    }\n\n    url.path = [];\n    whatwgURL.basicURLParse(v, {\n      url,\n      stateOverride: \"path start\"\n    });\n    updateHref(this);\n  }\n\n  get search() {\n    reinitializeURL(this);\n    const url = this.url;\n\n    if (url === null || url.query === null || url.query === \"\") {\n      return \"\";\n    }\n\n    return \"?\" + url.query;\n  }\n\n  set search(v) {\n    reinitializeURL(this);\n    const url = this.url;\n\n    if (url === null) {\n      return;\n    }\n\n    if (v === \"\") {\n      url.query = null;\n    } else {\n      const input = v[0] === \"?\" ? v.substring(1) : v;\n      url.query = \"\";\n      whatwgURL.basicURLParse(input, {\n        url,\n        stateOverride: \"query\",\n        encodingOverride: this._ownerDocument.charset\n      });\n    }\n\n    updateHref(this);\n  }\n\n  get hash() {\n    reinitializeURL(this);\n    const url = this.url;\n\n    if (url === null || url.fragment === null || url.fragment === \"\") {\n      return \"\";\n    }\n\n    return \"#\" + url.fragment;\n  }\n\n  set hash(v) {\n    reinitializeURL(this);\n    const url = this.url;\n\n    if (url === null) {\n      return;\n    }\n\n    if (v === \"\") {\n      url.fragment = null;\n    } else {\n      const input = v[0] === \"#\" ? v.substring(1) : v;\n      url.fragment = \"\";\n      whatwgURL.basicURLParse(input, {\n        url,\n        stateOverride: \"fragment\"\n      });\n    }\n\n    updateHref(this);\n  }\n\n};\n\nfunction reinitializeURL(hheu) {\n  if (hheu.url !== null && hheu.url.scheme === \"blob\" && hheu.url.cannotBeABaseURL) {\n    return;\n  }\n\n  setTheURL(hheu);\n}\n\nfunction setTheURL(hheu) {\n  const href = hheu.getAttribute(\"href\");\n\n  if (href === null) {\n    hheu.url = null;\n    return;\n  }\n\n  const parsed = parseURLToResultingURLRecord(href, hheu._ownerDocument);\n  hheu.url = parsed === null ? null : parsed;\n}\n\nfunction updateHref(hheu) {\n  hheu.setAttribute(\"href\", whatwgURL.serializeURL(hheu.url));\n}","map":null,"metadata":{},"sourceType":"script"}