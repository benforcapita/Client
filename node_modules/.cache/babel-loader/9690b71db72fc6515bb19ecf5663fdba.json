{"ast":null,"code":"/* eslint-env browser */\n\"use strict\";\n\nconst DOMException = require(\"domexception\");\n\nconst _require = require(\"whatwg-url\"),\n      parseURL = _require.parseURL,\n      serializeURL = _require.serializeURL,\n      serializeURLOrigin = _require.serializeURLOrigin;\n\nconst _require2 = require(\"../helpers/create-event-accessor\"),\n      setupForSimpleEventAccessors = _require2.setupForSimpleEventAccessors;\n\nconst EventTargetImpl = require(\"../events/EventTarget-impl\").implementation;\n\nconst idlUtils = require(\"../generated/utils\");\n\nconst Blob = require(\"../generated/Blob\");\n\nconst CloseEvent = require(\"../generated/CloseEvent\");\n\nconst Event = require(\"../generated/Event\");\n\nconst MessageEvent = require(\"../generated/MessageEvent\");\n\nconst productions = {\n  // https://tools.ietf.org/html/rfc7230#section-3.2.6\n  token: /^[!#$%&'*+\\-.^_`|~\\dA-Za-z]+$/\n}; // https://tools.ietf.org/html/rfc6455#section-4.3\n// See Sec-WebSocket-Protocol-Client, which is for the syntax of an entire header value. This function checks if a\n// single header conforms to the rules.\n\nfunction verifySecWebSocketProtocol(str) {\n  return productions.token.test(str);\n}\n\nconst openSockets = new WeakMap();\n\nclass WebSocketImpl extends EventTargetImpl {\n  constructor(constructorArgs, privateData) {\n    super([], privateData);\n    const window = privateData.window;\n    this._ownerDocument = idlUtils.implForWrapper(window._document);\n    const url = constructorArgs[0];\n    let protocols = constructorArgs[1] !== undefined ? constructorArgs[1] : [];\n    const urlRecord = parseURL(url);\n\n    if (urlRecord === null) {\n      throw new DOMException(\"The URL '\".concat(url, \"' is invalid.\"), \"SyntaxError\");\n    }\n\n    if (urlRecord.scheme !== \"ws\" && urlRecord.scheme !== \"wss\") {\n      throw new DOMException(\"The URL's scheme must be either 'ws' or 'wss'. '\".concat(urlRecord.scheme, \"' is not allowed.\"), \"SyntaxError\");\n    }\n\n    if (urlRecord.fragment !== null) {\n      throw new DOMException(\"The URL contains a fragment identifier ('\".concat(urlRecord.fragment, \"'). Fragment identifiers \") + \"are not allowed in WebSocket URLs.\", \"SyntaxError\");\n    }\n\n    if (typeof protocols === \"string\") {\n      protocols = [protocols];\n    }\n\n    const protocolSet = new Set();\n\n    for (const protocol of protocols) {\n      if (!verifySecWebSocketProtocol(protocol)) {\n        throw new DOMException(\"The subprotocol '\".concat(protocol, \"' is invalid.\"), \"SyntaxError\");\n      }\n\n      const lowered = protocol.toLowerCase();\n\n      if (protocolSet.has(lowered)) {\n        throw new DOMException(\"The subprotocol '\".concat(protocol, \"' is duplicated.\"), \"SyntaxError\");\n      }\n\n      protocolSet.add(lowered);\n    }\n\n    this._urlRecord = urlRecord;\n    this.url = serializeURL(urlRecord);\n    this._ws = new WebSocket(this.url, protocols);\n\n    this._ws.onopen = () => {\n      this._dispatch(Event.createImpl([\"open\"], {\n        isTrusted: true\n      }));\n    };\n\n    this._ws.onerror = () => {\n      this._dispatch(Event.createImpl([\"error\"], {\n        isTrusted: true\n      }));\n    };\n\n    this._ws.onclose = event => {\n      this._dispatch(CloseEvent.createImpl([\"close\", {\n        wasClean: event.wasClean,\n        code: event.code,\n        reason: event.reason\n      }], {\n        isTrusted: true\n      }));\n    };\n\n    this._ws.onmessage = event => {\n      this._dispatch(MessageEvent.createImpl([\"message\", {\n        data: event.data,\n        origin: serializeURLOrigin(this._urlRecord)\n      }], {\n        isTrusted: true\n      }));\n    };\n\n    let openSocketsForWindow = openSockets.get(window._globalProxy);\n\n    if (openSocketsForWindow === undefined) {\n      openSocketsForWindow = new Set();\n      openSockets.set(window._globalProxy, openSocketsForWindow);\n    }\n\n    openSocketsForWindow.add(this);\n  } // https://html.spec.whatwg.org/multipage/web-sockets.html#make-disappear\n\n\n  _makeDisappear() {\n    this._eventListeners = Object.create(null);\n\n    this._ws.close(1001);\n  }\n\n  static cleanUpWindow(window) {\n    const openSocketsForWindow = openSockets.get(window._globalProxy);\n\n    if (openSocketsForWindow !== undefined) {\n      for (const ws of openSocketsForWindow) {\n        ws._makeDisappear();\n      }\n    }\n  }\n\n  get readyState() {\n    return this._ws.readyState;\n  }\n\n  get bufferedAmount() {\n    return this._ws.bufferedAmount;\n  }\n\n  get extensions() {\n    return this._ws.extensions;\n  }\n\n  get protocol() {\n    return this._ws.protocol;\n  }\n\n  close(code = undefined, reason = undefined) {\n    if (code !== undefined && code !== 1000 && !(code >= 3000 && code <= 4999)) {\n      throw new DOMException(\"The code must be either 1000, or between 3000 and 4999. \".concat(code, \" is neither.\"), \"InvalidAccessError\");\n    }\n\n    if (reason !== undefined && Buffer.byteLength(reason, \"utf8\") > 123) {\n      throw new DOMException(\"The message must not be greater than 123 bytes.\", \"SyntaxError\");\n    }\n\n    return this._ws.close(code, reason);\n  }\n\n  get binaryType() {\n    return this._ws.binaryType;\n  }\n\n  set binaryType(val) {\n    this._ws.binaryType = val;\n  }\n\n  send(data) {\n    if (Blob.isImpl(data)) {\n      data = data._buffer;\n    }\n\n    this._ws.send(data);\n  }\n\n}\n\nsetupForSimpleEventAccessors(WebSocketImpl.prototype, [\"open\", \"message\", \"error\", \"close\"]);\nexports.implementation = WebSocketImpl;","map":null,"metadata":{},"sourceType":"script"}