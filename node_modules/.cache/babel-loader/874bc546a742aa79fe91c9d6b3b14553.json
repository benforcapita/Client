{"ast":null,"code":"\"use strict\";\n/* eslint-disable no-new-func */\n\nconst acorn = require(\"acorn\");\n\nconst findGlobals = require(\"acorn-globals\");\n\nconst escodegen = require(\"escodegen\"); // We can't use the default browserify vm shim because it doesn't work in a web worker.\n// From ES spec table of contents. Also, don't forget the Annex B additions.\n// If someone feels ambitious maybe make this into an npm package.\n\n\nconst builtInConsts = [\"Infinity\", \"NaN\", \"undefined\"];\nconst otherBuiltIns = [\"isFinite\", \"isNaN\", \"parseFloat\", \"parseInt\", \"decodeURI\", \"decodeURIComponent\", \"encodeURI\", \"encodeURIComponent\", \"Array\", \"ArrayBuffer\", \"Boolean\", \"DataView\", \"Date\", \"Error\", \"EvalError\", \"Float32Array\", \"Float64Array\", \"Function\", \"Int8Array\", \"Int16Array\", \"Int32Array\", \"Map\", \"Number\", \"Object\", \"Proxy\", \"Promise\", \"RangeError\", \"ReferenceError\", \"RegExp\", \"Set\", \"String\", \"Symbol\", \"SyntaxError\", \"TypeError\", \"Uint8Array\", \"Uint8ClampedArray\", \"Uint16Array\", \"Uint32Array\", \"URIError\", \"WeakMap\", \"WeakSet\", \"JSON\", \"Math\", \"Reflect\", \"escape\", \"unescape\"];\n\nexports.createContext = function (sandbox) {\n  Object.defineProperty(sandbox, \"__isVMShimContext\", {\n    value: true,\n    writable: true,\n    configurable: true,\n    enumerable: false\n  });\n\n  for (const builtIn of builtInConsts) {\n    Object.defineProperty(sandbox, builtIn, {\n      value: global[builtIn],\n      writable: false,\n      configurable: false,\n      enumerable: false\n    });\n  }\n\n  for (const builtIn of otherBuiltIns) {\n    Object.defineProperty(sandbox, builtIn, {\n      value: global[builtIn],\n      writable: true,\n      configurable: true,\n      enumerable: false\n    });\n  }\n\n  Object.defineProperty(sandbox, \"eval\", {\n    value(code) {\n      return exports.runInContext(code, sandbox);\n    },\n\n    writable: true,\n    configurable: true,\n    enumerable: false\n  });\n};\n\nexports.isContext = function (sandbox) {\n  return sandbox.__isVMShimContext;\n};\n\nexports.runInContext = function (code, contextifiedSandbox, options) {\n  if (code === \"this\") {\n    // Special case for during window creation.\n    return contextifiedSandbox;\n  }\n\n  if (options === undefined) {\n    options = {};\n  }\n\n  const comments = [];\n  const tokens = [];\n  const ast = acorn.parse(code, {\n    allowReturnOutsideFunction: true,\n    ranges: true,\n    // collect comments in Esprima's format\n    onComment: comments,\n    // collect token ranges\n    onToken: tokens\n  }); // make sure we keep comments\n\n  escodegen.attachComments(ast, comments, tokens);\n  const globals = findGlobals(ast);\n\n  for (let i = 0; i < globals.length; ++i) {\n    if (globals[i].name === \"window\" || globals[i].name === \"this\") {\n      continue;\n    }\n\n    const nodes = globals[i].nodes;\n\n    for (let j = 0; j < nodes.length; ++j) {\n      const _nodes$j = nodes[j],\n            type = _nodes$j.type,\n            name = _nodes$j.name;\n      nodes[j].type = \"MemberExpression\";\n      nodes[j].property = {\n        name,\n        type\n      };\n      nodes[j].computed = false;\n      nodes[j].object = {\n        name: \"window\",\n        type: \"Identifier\"\n      };\n    }\n  }\n\n  const lastNode = ast.body[ast.body.length - 1];\n\n  if (lastNode.type === \"ExpressionStatement\") {\n    lastNode.type = \"ReturnStatement\";\n    lastNode.argument = lastNode.expression;\n    delete lastNode.expression;\n  }\n\n  const rewrittenCode = escodegen.generate(ast, {\n    comment: true\n  });\n  const suffix = options.filename !== undefined ? \"\\n//# sourceURL=\" + options.filename : \"\";\n  return Function(\"window\", rewrittenCode + suffix).bind(contextifiedSandbox)(contextifiedSandbox);\n};\n\nexports.Script = class VMShimScript {\n  constructor(code, options) {\n    this._code = code;\n    this._options = options;\n  }\n\n  runInContext(sandbox, options) {\n    return exports.runInContext(this._code, sandbox, Object.assign({}, this._options, options));\n  }\n\n};","map":null,"metadata":{},"sourceType":"script"}