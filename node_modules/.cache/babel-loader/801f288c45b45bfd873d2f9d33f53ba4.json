{"ast":null,"code":"\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\n\nconst focusing = require(\"../helpers/focusing\");\n\nconst DOMStringMap = require(\"../generated/DOMStringMap\");\n\nclass HTMLAndSVGElementSharedImpl {\n  _initHTMLAndSVGElement() {\n    this._tabIndex = 0;\n    this._dataset = DOMStringMap.createImpl([], {\n      element: this\n    });\n  }\n\n  get dataset() {\n    return this._dataset;\n  } // TODO this should be [Reflect]able if we added default value support to webidl2js's [Reflect]\n\n\n  get tabIndex() {\n    if (!this.hasAttribute(\"tabindex\")) {\n      return focusing.isFocusableAreaElement(this) ? 0 : -1;\n    }\n\n    return conversions.long(this.getAttribute(\"tabindex\"));\n  }\n\n  set tabIndex(value) {\n    this.setAttribute(\"tabindex\", String(value));\n  }\n\n  focus() {\n    if (!focusing.isFocusableAreaElement(this)) {\n      return;\n    }\n\n    const previous = this._ownerDocument._lastFocusedElement;\n    focusing.fireFocusEventWithTargetAdjustment(\"blur\", previous, this);\n    this._ownerDocument._lastFocusedElement = this;\n    focusing.fireFocusEventWithTargetAdjustment(\"focus\", this, previous);\n\n    if (this._ownerDocument._defaultView._frameElement) {\n      this._ownerDocument._defaultView._frameElement.focus();\n    }\n  }\n\n  blur() {\n    if (this._ownerDocument._lastFocusedElement !== this || !focusing.isFocusableAreaElement(this)) {\n      return;\n    }\n\n    focusing.fireFocusEventWithTargetAdjustment(\"blur\", this, this._ownerDocument);\n    this._ownerDocument._lastFocusedElement = null;\n    focusing.fireFocusEventWithTargetAdjustment(\"focus\", this._ownerDocument, this);\n  }\n\n}\n\nexports.implementation = HTMLAndSVGElementSharedImpl;","map":null,"metadata":{},"sourceType":"script"}