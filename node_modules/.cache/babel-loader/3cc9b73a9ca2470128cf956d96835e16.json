{"ast":null,"code":"\"use strict\";\n\nconst _require = require(\"../node\"),\n      convertNodesIntoNode = _require.convertNodesIntoNode;\n\nclass ChildNodeImpl {\n  remove() {\n    if (!this.parentNode) {\n      return;\n    }\n\n    this.parentNode.removeChild(this);\n  }\n\n  after(...nodes) {\n    const parent = this.parentNode;\n\n    if (parent) {\n      let viableNextSibling = this.nextSibling;\n      let idx = viableNextSibling ? nodes.indexOf(viableNextSibling) : -1;\n\n      while (idx !== -1) {\n        viableNextSibling = viableNextSibling.nextSibling;\n\n        if (!viableNextSibling) {\n          break;\n        }\n\n        idx = nodes.indexOf(viableNextSibling);\n      }\n\n      parent.insertBefore(convertNodesIntoNode(this._ownerDocument, nodes), viableNextSibling);\n    }\n  }\n\n  before(...nodes) {\n    const parent = this.parentNode;\n\n    if (parent) {\n      let viablePreviousSibling = this.previousSibling;\n      let idx = viablePreviousSibling ? nodes.indexOf(viablePreviousSibling) : -1;\n\n      while (idx !== -1) {\n        viablePreviousSibling = viablePreviousSibling.previousSibling;\n\n        if (!viablePreviousSibling) {\n          break;\n        }\n\n        idx = nodes.indexOf(viablePreviousSibling);\n      }\n\n      parent.insertBefore(convertNodesIntoNode(this._ownerDocument, nodes), viablePreviousSibling ? viablePreviousSibling.nextSibling : parent.firstChild);\n    }\n  }\n\n  replaceWith(...nodes) {\n    const parent = this.parentNode;\n\n    if (parent) {\n      let viableNextSibling = this.nextSibling;\n      let idx = viableNextSibling ? nodes.indexOf(viableNextSibling) : -1;\n\n      while (idx !== -1) {\n        viableNextSibling = viableNextSibling.nextSibling;\n\n        if (!viableNextSibling) {\n          break;\n        }\n\n        idx = nodes.indexOf(viableNextSibling);\n      }\n\n      const node = convertNodesIntoNode(this._ownerDocument, nodes);\n\n      if (this.parentNode === parent) {\n        parent.replaceChild(node, this);\n      } else {\n        parent.insertBefore(node, viableNextSibling);\n      }\n    }\n  }\n\n}\n\nmodule.exports = {\n  implementation: ChildNodeImpl\n};","map":null,"metadata":{},"sourceType":"script"}