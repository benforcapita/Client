{"ast":null,"code":"\"use strict\";\n\nconst idlUtils = require(\"../generated/utils\");\n\nconst NodeList = require(\"../generated/NodeList\");\n\nconst HTMLCollection = require(\"../generated/HTMLCollection\");\n\nconst _require = require(\"../helpers/selectors\"),\n      addNwsapi = _require.addNwsapi;\n\nconst _require2 = require(\"../helpers/internal-constants\"),\n      domSymbolTree = _require2.domSymbolTree;\n\nconst NODE_TYPE = require(\"../node-type\");\n\nconst _require3 = require(\"../../utils\"),\n      memoizeQuery = _require3.memoizeQuery;\n\nconst _require4 = require(\"../node\"),\n      convertNodesIntoNode = _require4.convertNodesIntoNode;\n\nclass ParentNodeImpl {\n  get children() {\n    if (!this._childrenList) {\n      this._childrenList = HTMLCollection.createImpl([], {\n        element: this,\n        query: () => domSymbolTree.childrenToArray(this, {\n          filter: node => node.nodeType === NODE_TYPE.ELEMENT_NODE\n        })\n      });\n    } else {\n      this._childrenList._update();\n    }\n\n    return this._childrenList;\n  }\n\n  get firstElementChild() {\n    for (const child of domSymbolTree.childrenIterator(this)) {\n      if (child.nodeType === NODE_TYPE.ELEMENT_NODE) {\n        return child;\n      }\n    }\n\n    return null;\n  }\n\n  get lastElementChild() {\n    for (const child of domSymbolTree.childrenIterator(this, {\n      reverse: true\n    })) {\n      if (child.nodeType === NODE_TYPE.ELEMENT_NODE) {\n        return child;\n      }\n    }\n\n    return null;\n  }\n\n  get childElementCount() {\n    return this.children.length;\n  }\n\n  append(...nodes) {\n    this.appendChild(convertNodesIntoNode(this._ownerDocument, nodes));\n  }\n\n  prepend(...nodes) {\n    this.insertBefore(convertNodesIntoNode(this._ownerDocument, nodes), this.firstChild);\n  }\n\n}\n\nParentNodeImpl.prototype.querySelector = memoizeQuery(function (selectors) {\n  if (shouldAlwaysSelectNothing(this)) {\n    return null;\n  }\n\n  const matcher = addNwsapi(this);\n  return idlUtils.implForWrapper(matcher.first(selectors, idlUtils.wrapperForImpl(this)));\n}); // WARNING: this returns a NodeList containing IDL wrappers instead of impls\n\nParentNodeImpl.prototype.querySelectorAll = memoizeQuery(function (selectors) {\n  if (shouldAlwaysSelectNothing(this)) {\n    return NodeList.create([], {\n      nodes: []\n    });\n  }\n\n  const matcher = addNwsapi(this);\n  const list = matcher.select(selectors, idlUtils.wrapperForImpl(this));\n  return NodeList.create([], {\n    nodes: list.map(n => idlUtils.tryImplForWrapper(n))\n  });\n});\n\nfunction shouldAlwaysSelectNothing(elImpl) {\n  // The latter clause is true during initialization.\n  return !domSymbolTree.hasChildren(elImpl) || elImpl === elImpl._ownerDocument && !elImpl.documentElement;\n}\n\nmodule.exports = {\n  implementation: ParentNodeImpl\n};","map":null,"metadata":{},"sourceType":"script"}