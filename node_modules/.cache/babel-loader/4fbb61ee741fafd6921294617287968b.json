{"ast":null,"code":"\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\n\nconst utils = require(\"./utils.js\");\n\nconst convertGetRootNodeOptions = require(\"./GetRootNodeOptions.js\").convert;\n\nconst impl = utils.implSymbol;\n\nconst EventTarget = require(\"./EventTarget.js\");\n\nfunction Node() {\n  throw new TypeError(\"Illegal constructor\");\n}\n\nObject.setPrototypeOf(Node.prototype, EventTarget.interface.prototype);\nObject.setPrototypeOf(Node, EventTarget.interface);\nObject.defineProperty(Node, \"prototype\", {\n  value: Node.prototype,\n  writable: false,\n  enumerable: false,\n  configurable: false\n});\n\nNode.prototype.getRootNode = function getRootNode() {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  const args = [];\n  {\n    let curArg = arguments[0];\n    curArg = convertGetRootNodeOptions(curArg, {\n      context: \"Failed to execute 'getRootNode' on 'Node': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  return utils.tryWrapperForImpl(this[impl].getRootNode(...args));\n};\n\nNode.prototype.hasChildNodes = function hasChildNodes() {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  return this[impl].hasChildNodes();\n};\n\nNode.prototype.normalize = function normalize() {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  return this[impl].normalize();\n};\n\nNode.prototype.cloneNode = function cloneNode() {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  const args = [];\n  {\n    let curArg = arguments[0];\n\n    if (curArg !== undefined) {\n      curArg = conversions[\"boolean\"](curArg, {\n        context: \"Failed to execute 'cloneNode' on 'Node': parameter 1\"\n      });\n    } else {\n      curArg = false;\n    }\n\n    args.push(curArg);\n  }\n  return utils.tryWrapperForImpl(this[impl].cloneNode(...args));\n};\n\nNode.prototype.isEqualNode = function isEqualNode(otherNode) {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'isEqualNode' on 'Node': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  const args = [];\n  {\n    let curArg = arguments[0];\n\n    if (curArg === null || curArg === undefined) {\n      curArg = null;\n    } else {\n      curArg = module.exports.convert(curArg, {\n        context: \"Failed to execute 'isEqualNode' on 'Node': parameter 1\"\n      });\n    }\n\n    args.push(curArg);\n  }\n  return this[impl].isEqualNode(...args);\n};\n\nNode.prototype.isSameNode = function isSameNode(otherNode) {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'isSameNode' on 'Node': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  const args = [];\n  {\n    let curArg = arguments[0];\n\n    if (curArg === null || curArg === undefined) {\n      curArg = null;\n    } else {\n      curArg = module.exports.convert(curArg, {\n        context: \"Failed to execute 'isSameNode' on 'Node': parameter 1\"\n      });\n    }\n\n    args.push(curArg);\n  }\n  return this[impl].isSameNode(...args);\n};\n\nNode.prototype.compareDocumentPosition = function compareDocumentPosition(other) {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'compareDocumentPosition' on 'Node': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  const args = [];\n  {\n    let curArg = arguments[0];\n    curArg = module.exports.convert(curArg, {\n      context: \"Failed to execute 'compareDocumentPosition' on 'Node': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  return this[impl].compareDocumentPosition(...args);\n};\n\nNode.prototype.contains = function contains(other) {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'contains' on 'Node': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  const args = [];\n  {\n    let curArg = arguments[0];\n\n    if (curArg === null || curArg === undefined) {\n      curArg = null;\n    } else {\n      curArg = module.exports.convert(curArg, {\n        context: \"Failed to execute 'contains' on 'Node': parameter 1\"\n      });\n    }\n\n    args.push(curArg);\n  }\n  return this[impl].contains(...args);\n};\n\nNode.prototype.lookupPrefix = function lookupPrefix(namespace) {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'lookupPrefix' on 'Node': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  const args = [];\n  {\n    let curArg = arguments[0];\n\n    if (curArg === null || curArg === undefined) {\n      curArg = null;\n    } else {\n      curArg = conversions[\"DOMString\"](curArg, {\n        context: \"Failed to execute 'lookupPrefix' on 'Node': parameter 1\"\n      });\n    }\n\n    args.push(curArg);\n  }\n  return this[impl].lookupPrefix(...args);\n};\n\nNode.prototype.lookupNamespaceURI = function lookupNamespaceURI(prefix) {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'lookupNamespaceURI' on 'Node': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  const args = [];\n  {\n    let curArg = arguments[0];\n\n    if (curArg === null || curArg === undefined) {\n      curArg = null;\n    } else {\n      curArg = conversions[\"DOMString\"](curArg, {\n        context: \"Failed to execute 'lookupNamespaceURI' on 'Node': parameter 1\"\n      });\n    }\n\n    args.push(curArg);\n  }\n  return this[impl].lookupNamespaceURI(...args);\n};\n\nNode.prototype.isDefaultNamespace = function isDefaultNamespace(namespace) {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'isDefaultNamespace' on 'Node': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  const args = [];\n  {\n    let curArg = arguments[0];\n\n    if (curArg === null || curArg === undefined) {\n      curArg = null;\n    } else {\n      curArg = conversions[\"DOMString\"](curArg, {\n        context: \"Failed to execute 'isDefaultNamespace' on 'Node': parameter 1\"\n      });\n    }\n\n    args.push(curArg);\n  }\n  return this[impl].isDefaultNamespace(...args);\n};\n\nNode.prototype.insertBefore = function insertBefore(node, child) {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 2) {\n    throw new TypeError(\"Failed to execute 'insertBefore' on 'Node': 2 arguments required, but only \" + arguments.length + \" present.\");\n  }\n\n  const args = [];\n  {\n    let curArg = arguments[0];\n    curArg = module.exports.convert(curArg, {\n      context: \"Failed to execute 'insertBefore' on 'Node': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  {\n    let curArg = arguments[1];\n\n    if (curArg === null || curArg === undefined) {\n      curArg = null;\n    } else {\n      curArg = module.exports.convert(curArg, {\n        context: \"Failed to execute 'insertBefore' on 'Node': parameter 2\"\n      });\n    }\n\n    args.push(curArg);\n  }\n  return utils.tryWrapperForImpl(this[impl].insertBefore(...args));\n};\n\nNode.prototype.appendChild = function appendChild(node) {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'appendChild' on 'Node': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  const args = [];\n  {\n    let curArg = arguments[0];\n    curArg = module.exports.convert(curArg, {\n      context: \"Failed to execute 'appendChild' on 'Node': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  return utils.tryWrapperForImpl(this[impl].appendChild(...args));\n};\n\nNode.prototype.replaceChild = function replaceChild(node, child) {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 2) {\n    throw new TypeError(\"Failed to execute 'replaceChild' on 'Node': 2 arguments required, but only \" + arguments.length + \" present.\");\n  }\n\n  const args = [];\n  {\n    let curArg = arguments[0];\n    curArg = module.exports.convert(curArg, {\n      context: \"Failed to execute 'replaceChild' on 'Node': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  {\n    let curArg = arguments[1];\n    curArg = module.exports.convert(curArg, {\n      context: \"Failed to execute 'replaceChild' on 'Node': parameter 2\"\n    });\n    args.push(curArg);\n  }\n  return utils.tryWrapperForImpl(this[impl].replaceChild(...args));\n};\n\nNode.prototype.removeChild = function removeChild(child) {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'removeChild' on 'Node': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  const args = [];\n  {\n    let curArg = arguments[0];\n    curArg = module.exports.convert(curArg, {\n      context: \"Failed to execute 'removeChild' on 'Node': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  return utils.tryWrapperForImpl(this[impl].removeChild(...args));\n};\n\nObject.defineProperty(Node.prototype, \"nodeType\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"nodeType\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Node.prototype, \"nodeName\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"nodeName\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Node.prototype, \"baseURI\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"baseURI\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Node.prototype, \"isConnected\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"isConnected\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Node.prototype, \"ownerDocument\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"ownerDocument\"]);\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Node.prototype, \"parentNode\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"parentNode\"]);\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Node.prototype, \"parentElement\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"parentElement\"]);\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Node.prototype, \"childNodes\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.getSameObject(this, \"childNodes\", () => {\n      return utils.tryWrapperForImpl(this[impl][\"childNodes\"]);\n    });\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Node.prototype, \"firstChild\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"firstChild\"]);\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Node.prototype, \"lastChild\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"lastChild\"]);\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Node.prototype, \"previousSibling\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"previousSibling\"]);\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Node.prototype, \"nextSibling\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"nextSibling\"]);\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Node.prototype, \"nodeValue\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"nodeValue\"];\n  },\n\n  set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    if (V === null || V === undefined) {\n      V = null;\n    } else {\n      V = conversions[\"DOMString\"](V, {\n        context: \"Failed to set the 'nodeValue' property on 'Node': The provided value\"\n      });\n    }\n\n    this[impl][\"nodeValue\"] = V;\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Node.prototype, \"textContent\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"textContent\"];\n  },\n\n  set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    if (V === null || V === undefined) {\n      V = null;\n    } else {\n      V = conversions[\"DOMString\"](V, {\n        context: \"Failed to set the 'textContent' property on 'Node': The provided value\"\n      });\n    }\n\n    this[impl][\"textContent\"] = V;\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Node, \"ELEMENT_NODE\", {\n  value: 1,\n  enumerable: true\n});\nObject.defineProperty(Node.prototype, \"ELEMENT_NODE\", {\n  value: 1,\n  enumerable: true\n});\nObject.defineProperty(Node, \"ATTRIBUTE_NODE\", {\n  value: 2,\n  enumerable: true\n});\nObject.defineProperty(Node.prototype, \"ATTRIBUTE_NODE\", {\n  value: 2,\n  enumerable: true\n});\nObject.defineProperty(Node, \"TEXT_NODE\", {\n  value: 3,\n  enumerable: true\n});\nObject.defineProperty(Node.prototype, \"TEXT_NODE\", {\n  value: 3,\n  enumerable: true\n});\nObject.defineProperty(Node, \"CDATA_SECTION_NODE\", {\n  value: 4,\n  enumerable: true\n});\nObject.defineProperty(Node.prototype, \"CDATA_SECTION_NODE\", {\n  value: 4,\n  enumerable: true\n});\nObject.defineProperty(Node, \"ENTITY_REFERENCE_NODE\", {\n  value: 5,\n  enumerable: true\n});\nObject.defineProperty(Node.prototype, \"ENTITY_REFERENCE_NODE\", {\n  value: 5,\n  enumerable: true\n});\nObject.defineProperty(Node, \"ENTITY_NODE\", {\n  value: 6,\n  enumerable: true\n});\nObject.defineProperty(Node.prototype, \"ENTITY_NODE\", {\n  value: 6,\n  enumerable: true\n});\nObject.defineProperty(Node, \"PROCESSING_INSTRUCTION_NODE\", {\n  value: 7,\n  enumerable: true\n});\nObject.defineProperty(Node.prototype, \"PROCESSING_INSTRUCTION_NODE\", {\n  value: 7,\n  enumerable: true\n});\nObject.defineProperty(Node, \"COMMENT_NODE\", {\n  value: 8,\n  enumerable: true\n});\nObject.defineProperty(Node.prototype, \"COMMENT_NODE\", {\n  value: 8,\n  enumerable: true\n});\nObject.defineProperty(Node, \"DOCUMENT_NODE\", {\n  value: 9,\n  enumerable: true\n});\nObject.defineProperty(Node.prototype, \"DOCUMENT_NODE\", {\n  value: 9,\n  enumerable: true\n});\nObject.defineProperty(Node, \"DOCUMENT_TYPE_NODE\", {\n  value: 10,\n  enumerable: true\n});\nObject.defineProperty(Node.prototype, \"DOCUMENT_TYPE_NODE\", {\n  value: 10,\n  enumerable: true\n});\nObject.defineProperty(Node, \"DOCUMENT_FRAGMENT_NODE\", {\n  value: 11,\n  enumerable: true\n});\nObject.defineProperty(Node.prototype, \"DOCUMENT_FRAGMENT_NODE\", {\n  value: 11,\n  enumerable: true\n});\nObject.defineProperty(Node, \"NOTATION_NODE\", {\n  value: 12,\n  enumerable: true\n});\nObject.defineProperty(Node.prototype, \"NOTATION_NODE\", {\n  value: 12,\n  enumerable: true\n});\nObject.defineProperty(Node, \"DOCUMENT_POSITION_DISCONNECTED\", {\n  value: 0x01,\n  enumerable: true\n});\nObject.defineProperty(Node.prototype, \"DOCUMENT_POSITION_DISCONNECTED\", {\n  value: 0x01,\n  enumerable: true\n});\nObject.defineProperty(Node, \"DOCUMENT_POSITION_PRECEDING\", {\n  value: 0x02,\n  enumerable: true\n});\nObject.defineProperty(Node.prototype, \"DOCUMENT_POSITION_PRECEDING\", {\n  value: 0x02,\n  enumerable: true\n});\nObject.defineProperty(Node, \"DOCUMENT_POSITION_FOLLOWING\", {\n  value: 0x04,\n  enumerable: true\n});\nObject.defineProperty(Node.prototype, \"DOCUMENT_POSITION_FOLLOWING\", {\n  value: 0x04,\n  enumerable: true\n});\nObject.defineProperty(Node, \"DOCUMENT_POSITION_CONTAINS\", {\n  value: 0x08,\n  enumerable: true\n});\nObject.defineProperty(Node.prototype, \"DOCUMENT_POSITION_CONTAINS\", {\n  value: 0x08,\n  enumerable: true\n});\nObject.defineProperty(Node, \"DOCUMENT_POSITION_CONTAINED_BY\", {\n  value: 0x10,\n  enumerable: true\n});\nObject.defineProperty(Node.prototype, \"DOCUMENT_POSITION_CONTAINED_BY\", {\n  value: 0x10,\n  enumerable: true\n});\nObject.defineProperty(Node, \"DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC\", {\n  value: 0x20,\n  enumerable: true\n});\nObject.defineProperty(Node.prototype, \"DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC\", {\n  value: 0x20,\n  enumerable: true\n});\nObject.defineProperty(Node.prototype, Symbol.toStringTag, {\n  value: \"Node\",\n  writable: false,\n  enumerable: false,\n  configurable: true\n});\nconst iface = {\n  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`\n  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as\n  // implementing this mixin interface.\n  _mixedIntoPredicates: [],\n\n  is(obj) {\n    if (obj) {\n      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {\n        return true;\n      }\n\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(obj)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n\n  isImpl(obj) {\n    if (obj) {\n      if (obj instanceof Impl.implementation) {\n        return true;\n      }\n\n      const wrapper = utils.wrapperForImpl(obj);\n\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(wrapper)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n\n  convert(obj, {\n    context = \"The provided value\"\n  } = {}) {\n    if (module.exports.is(obj)) {\n      return utils.implForWrapper(obj);\n    }\n\n    throw new TypeError(\"\".concat(context, \" is not of type 'Node'.\"));\n  },\n\n  create(constructorArgs, privateData) {\n    let obj = Object.create(Node.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n\n  createImpl(constructorArgs, privateData) {\n    let obj = Object.create(Node.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return utils.implForWrapper(obj);\n  },\n\n  _internalSetup(obj) {\n    EventTarget._internalSetup(obj);\n  },\n\n  setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n    privateData.wrapper = obj;\n\n    this._internalSetup(obj);\n\n    Object.defineProperty(obj, impl, {\n      value: new Impl.implementation(constructorArgs, privateData),\n      writable: false,\n      enumerable: false,\n      configurable: true\n    });\n    obj[impl][utils.wrapperSymbol] = obj;\n\n    if (Impl.init) {\n      Impl.init(obj[impl], privateData);\n    }\n\n    return obj;\n  },\n\n  interface: Node,\n  expose: {\n    Window: {\n      Node\n    }\n  }\n}; // iface\n\nmodule.exports = iface;\n\nconst Impl = require(\"../nodes/Node-impl.js\");","map":null,"metadata":{},"sourceType":"script"}