{"ast":null,"code":"\"use strict\";\n\nconst _require = require(\"./internal-constants\"),\n      domSymbolTree = _require.domSymbolTree;\n\nconst _require2 = require(\"../node-type\"),\n      DOCUMENT_NODE = _require2.DOCUMENT_NODE;\n\nconst _require3 = require(\"./namespaces\"),\n      HTML_NS = _require3.HTML_NS; // All these operate on and return impls, not wrappers!\n\n\nexports.closest = (e, localName) => {\n  while (e) {\n    if (e.localName === localName && e.namespaceURI === HTML_NS) {\n      return e;\n    }\n\n    e = domSymbolTree.parent(e);\n  }\n\n  return null;\n};\n\nexports.isConnected = node => {\n  while (node) {\n    if (node.nodeType === DOCUMENT_NODE) {\n      return true;\n    }\n\n    node = domSymbolTree.parent(node);\n  }\n\n  return false;\n};\n\nexports.childrenByHTMLLocalName = (parent, localName) => {\n  return domSymbolTree.childrenToArray(parent, {\n    filter(node) {\n      return node._localName === localName && node._namespaceURI === HTML_NS;\n    }\n\n  });\n};\n\nexports.descendantsByHTMLLocalName = (parent, localName) => {\n  return domSymbolTree.treeToArray(parent, {\n    filter(node) {\n      return node._localName === localName && node._namespaceURI === HTML_NS && node !== parent;\n    }\n\n  });\n};\n\nexports.childrenByHTMLLocalNames = (parent, localNamesSet) => {\n  return domSymbolTree.childrenToArray(parent, {\n    filter(node) {\n      return localNamesSet.has(node._localName) && node._namespaceURI === HTML_NS;\n    }\n\n  });\n};\n\nexports.descendantsByHTMLLocalNames = (parent, localNamesSet) => {\n  return domSymbolTree.treeToArray(parent, {\n    filter(node) {\n      return localNamesSet.has(node._localName) && node._namespaceURI === HTML_NS && node !== parent;\n    }\n\n  });\n};\n\nexports.firstChildWithHTMLLocalName = (parent, localName) => {\n  const iterator = domSymbolTree.childrenIterator(parent);\n\n  for (const child of iterator) {\n    if (child._localName === localName && child._namespaceURI === HTML_NS) {\n      return child;\n    }\n  }\n\n  return null;\n};\n\nexports.firstChildWithHTMLLocalNames = (parent, localNamesSet) => {\n  const iterator = domSymbolTree.childrenIterator(parent);\n\n  for (const child of iterator) {\n    if (localNamesSet.has(child._localName) && child._namespaceURI === HTML_NS) {\n      return child;\n    }\n  }\n\n  return null;\n};\n\nexports.firstDescendantWithHTMLLocalName = (parent, localName) => {\n  const iterator = domSymbolTree.treeIterator(parent);\n\n  for (const descendant of iterator) {\n    if (descendant._localName === localName && descendant._namespaceURI === HTML_NS) {\n      return descendant;\n    }\n  }\n\n  return null;\n};","map":null,"metadata":{},"sourceType":"script"}