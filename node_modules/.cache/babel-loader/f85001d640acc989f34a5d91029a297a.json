{"ast":null,"code":"\"use strict\";\n\nconst idlUtils = require(\"../generated/utils.js\");\n\nconst _require = require(\"../attributes\"),\n      setAttributeValue = _require.setAttributeValue,\n      removeAttributeByName = _require.removeAttributeByName;\n\nconst validateName = require(\"../helpers/validate-names\").name;\n\nconst DOMException = require(\"domexception\");\n\nconst dataAttrRe = /^data-([^A-Z]*)$/;\n\nfunction attrCamelCase(name) {\n  return name.replace(/-([a-z])/g, (match, alpha) => alpha.toUpperCase());\n}\n\nfunction attrSnakeCase(name) {\n  return name.replace(/[A-Z]/g, match => \"-\".concat(match.toLowerCase()));\n}\n\nexports.implementation = class DOMStringMapImpl {\n  constructor(args, privateData) {\n    this._element = privateData.element;\n  }\n\n  get [idlUtils.supportedPropertyNames]() {\n    const result = new Set();\n    const attributes = this._element.attributes;\n\n    for (let i = 0; i < attributes.length; i++) {\n      const attr = attributes.item(i);\n      const matches = dataAttrRe.exec(attr.localName);\n\n      if (matches) {\n        result.add(attrCamelCase(matches[1]));\n      }\n    }\n\n    return result;\n  }\n\n  [idlUtils.namedGet](name) {\n    const attributes = this._element.attributes;\n\n    for (let i = 0; i < attributes.length; i++) {\n      const attr = attributes.item(i);\n      const matches = dataAttrRe.exec(attr.localName);\n\n      if (matches && attrCamelCase(matches[1]) === name) {\n        return attr.value;\n      }\n    }\n\n    return undefined;\n  }\n\n  [idlUtils.namedSetNew](name, value) {\n    if (/-[a-z]/.test(name)) {\n      throw new DOMException(\"'\".concat(name, \"' is not a valid property name\"), \"SyntaxError\");\n    }\n\n    name = \"data-\".concat(attrSnakeCase(name));\n    validateName(name);\n    setAttributeValue(this._element, name, value);\n  }\n\n  [idlUtils.namedSetExisting](name, value) {\n    this[idlUtils.namedSetNew](name, value);\n  }\n\n  [idlUtils.namedDelete](name) {\n    name = \"data-\".concat(attrSnakeCase(name));\n    removeAttributeByName(this._element, name);\n  }\n\n};","map":null,"metadata":{},"sourceType":"script"}