{"ast":null,"code":"\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\n\nconst utils = require(\"./utils.js\");\n\nconst convertHTMLTableCaptionElement = require(\"./HTMLTableCaptionElement.js\").convert;\n\nconst convertHTMLTableSectionElement = require(\"./HTMLTableSectionElement.js\").convert;\n\nconst impl = utils.implSymbol;\n\nconst HTMLElement = require(\"./HTMLElement.js\");\n\nfunction HTMLTableElement() {\n  throw new TypeError(\"Illegal constructor\");\n}\n\nObject.setPrototypeOf(HTMLTableElement.prototype, HTMLElement.interface.prototype);\nObject.setPrototypeOf(HTMLTableElement, HTMLElement.interface);\nObject.defineProperty(HTMLTableElement, \"prototype\", {\n  value: HTMLTableElement.prototype,\n  writable: false,\n  enumerable: false,\n  configurable: false\n});\n\nHTMLTableElement.prototype.createCaption = function createCaption() {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  return utils.tryWrapperForImpl(this[impl].createCaption());\n};\n\nHTMLTableElement.prototype.deleteCaption = function deleteCaption() {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  return this[impl].deleteCaption();\n};\n\nHTMLTableElement.prototype.createTHead = function createTHead() {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  return utils.tryWrapperForImpl(this[impl].createTHead());\n};\n\nHTMLTableElement.prototype.deleteTHead = function deleteTHead() {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  return this[impl].deleteTHead();\n};\n\nHTMLTableElement.prototype.createTFoot = function createTFoot() {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  return utils.tryWrapperForImpl(this[impl].createTFoot());\n};\n\nHTMLTableElement.prototype.deleteTFoot = function deleteTFoot() {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  return this[impl].deleteTFoot();\n};\n\nHTMLTableElement.prototype.createTBody = function createTBody() {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  return utils.tryWrapperForImpl(this[impl].createTBody());\n};\n\nHTMLTableElement.prototype.insertRow = function insertRow() {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  const args = [];\n  {\n    let curArg = arguments[0];\n\n    if (curArg !== undefined) {\n      curArg = conversions[\"long\"](curArg, {\n        context: \"Failed to execute 'insertRow' on 'HTMLTableElement': parameter 1\"\n      });\n    } else {\n      curArg = -1;\n    }\n\n    args.push(curArg);\n  }\n  return utils.tryWrapperForImpl(this[impl].insertRow(...args));\n};\n\nHTMLTableElement.prototype.deleteRow = function deleteRow(index) {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'deleteRow' on 'HTMLTableElement': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  const args = [];\n  {\n    let curArg = arguments[0];\n    curArg = conversions[\"long\"](curArg, {\n      context: \"Failed to execute 'deleteRow' on 'HTMLTableElement': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  return this[impl].deleteRow(...args);\n};\n\nObject.defineProperty(HTMLTableElement.prototype, \"caption\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"caption\"]);\n  },\n\n  set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    if (V === null || V === undefined) {\n      V = null;\n    } else {\n      V = convertHTMLTableCaptionElement(V, {\n        context: \"Failed to set the 'caption' property on 'HTMLTableElement': The provided value\"\n      });\n    }\n\n    this[impl][\"caption\"] = V;\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLTableElement.prototype, \"tHead\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"tHead\"]);\n  },\n\n  set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    if (V === null || V === undefined) {\n      V = null;\n    } else {\n      V = convertHTMLTableSectionElement(V, {\n        context: \"Failed to set the 'tHead' property on 'HTMLTableElement': The provided value\"\n      });\n    }\n\n    this[impl][\"tHead\"] = V;\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLTableElement.prototype, \"tFoot\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"tFoot\"]);\n  },\n\n  set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    if (V === null || V === undefined) {\n      V = null;\n    } else {\n      V = convertHTMLTableSectionElement(V, {\n        context: \"Failed to set the 'tFoot' property on 'HTMLTableElement': The provided value\"\n      });\n    }\n\n    this[impl][\"tFoot\"] = V;\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLTableElement.prototype, \"tBodies\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.getSameObject(this, \"tBodies\", () => {\n      return utils.tryWrapperForImpl(this[impl][\"tBodies\"]);\n    });\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLTableElement.prototype, \"rows\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.getSameObject(this, \"rows\", () => {\n      return utils.tryWrapperForImpl(this[impl][\"rows\"]);\n    });\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLTableElement.prototype, \"align\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    const value = this.getAttribute(\"align\");\n    return value === null ? \"\" : value;\n  },\n\n  set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"DOMString\"](V, {\n      context: \"Failed to set the 'align' property on 'HTMLTableElement': The provided value\"\n    });\n    this.setAttribute(\"align\", V);\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLTableElement.prototype, \"border\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    const value = this.getAttribute(\"border\");\n    return value === null ? \"\" : value;\n  },\n\n  set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"DOMString\"](V, {\n      context: \"Failed to set the 'border' property on 'HTMLTableElement': The provided value\"\n    });\n    this.setAttribute(\"border\", V);\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLTableElement.prototype, \"frame\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    const value = this.getAttribute(\"frame\");\n    return value === null ? \"\" : value;\n  },\n\n  set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"DOMString\"](V, {\n      context: \"Failed to set the 'frame' property on 'HTMLTableElement': The provided value\"\n    });\n    this.setAttribute(\"frame\", V);\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLTableElement.prototype, \"rules\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    const value = this.getAttribute(\"rules\");\n    return value === null ? \"\" : value;\n  },\n\n  set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"DOMString\"](V, {\n      context: \"Failed to set the 'rules' property on 'HTMLTableElement': The provided value\"\n    });\n    this.setAttribute(\"rules\", V);\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLTableElement.prototype, \"summary\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    const value = this.getAttribute(\"summary\");\n    return value === null ? \"\" : value;\n  },\n\n  set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"DOMString\"](V, {\n      context: \"Failed to set the 'summary' property on 'HTMLTableElement': The provided value\"\n    });\n    this.setAttribute(\"summary\", V);\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLTableElement.prototype, \"width\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    const value = this.getAttribute(\"width\");\n    return value === null ? \"\" : value;\n  },\n\n  set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"DOMString\"](V, {\n      context: \"Failed to set the 'width' property on 'HTMLTableElement': The provided value\"\n    });\n    this.setAttribute(\"width\", V);\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLTableElement.prototype, \"bgColor\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    const value = this.getAttribute(\"bgColor\");\n    return value === null ? \"\" : value;\n  },\n\n  set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"DOMString\"](V, {\n      context: \"Failed to set the 'bgColor' property on 'HTMLTableElement': The provided value\",\n      treatNullAsEmptyString: true\n    });\n    this.setAttribute(\"bgColor\", V);\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLTableElement.prototype, \"cellPadding\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    const value = this.getAttribute(\"cellPadding\");\n    return value === null ? \"\" : value;\n  },\n\n  set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"DOMString\"](V, {\n      context: \"Failed to set the 'cellPadding' property on 'HTMLTableElement': The provided value\",\n      treatNullAsEmptyString: true\n    });\n    this.setAttribute(\"cellPadding\", V);\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLTableElement.prototype, \"cellSpacing\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    const value = this.getAttribute(\"cellSpacing\");\n    return value === null ? \"\" : value;\n  },\n\n  set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"DOMString\"](V, {\n      context: \"Failed to set the 'cellSpacing' property on 'HTMLTableElement': The provided value\",\n      treatNullAsEmptyString: true\n    });\n    this.setAttribute(\"cellSpacing\", V);\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLTableElement.prototype, Symbol.toStringTag, {\n  value: \"HTMLTableElement\",\n  writable: false,\n  enumerable: false,\n  configurable: true\n});\nconst iface = {\n  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`\n  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as\n  // implementing this mixin interface.\n  _mixedIntoPredicates: [],\n\n  is(obj) {\n    if (obj) {\n      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {\n        return true;\n      }\n\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(obj)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n\n  isImpl(obj) {\n    if (obj) {\n      if (obj instanceof Impl.implementation) {\n        return true;\n      }\n\n      const wrapper = utils.wrapperForImpl(obj);\n\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(wrapper)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n\n  convert(obj, {\n    context = \"The provided value\"\n  } = {}) {\n    if (module.exports.is(obj)) {\n      return utils.implForWrapper(obj);\n    }\n\n    throw new TypeError(\"\".concat(context, \" is not of type 'HTMLTableElement'.\"));\n  },\n\n  create(constructorArgs, privateData) {\n    let obj = Object.create(HTMLTableElement.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n\n  createImpl(constructorArgs, privateData) {\n    let obj = Object.create(HTMLTableElement.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return utils.implForWrapper(obj);\n  },\n\n  _internalSetup(obj) {\n    HTMLElement._internalSetup(obj);\n  },\n\n  setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n    privateData.wrapper = obj;\n\n    this._internalSetup(obj);\n\n    Object.defineProperty(obj, impl, {\n      value: new Impl.implementation(constructorArgs, privateData),\n      writable: false,\n      enumerable: false,\n      configurable: true\n    });\n    obj[impl][utils.wrapperSymbol] = obj;\n\n    if (Impl.init) {\n      Impl.init(obj[impl], privateData);\n    }\n\n    return obj;\n  },\n\n  interface: HTMLTableElement,\n  expose: {\n    Window: {\n      HTMLTableElement\n    }\n  }\n}; // iface\n\nmodule.exports = iface;\n\nconst Impl = require(\"../nodes/HTMLTableElement-impl.js\");","map":null,"metadata":{},"sourceType":"script"}