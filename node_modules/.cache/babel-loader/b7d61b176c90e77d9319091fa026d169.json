{"ast":null,"code":"\"use strict\";\n\nconst DOMException = require(\"domexception\");\n\nconst idlUtils = require(\"../generated/utils.js\");\n\nconst attributes = require(\"../attributes.js\");\n\nconst _require = require(\"../helpers/namespaces\"),\n      HTML_NS = _require.HTML_NS;\n\nexports.implementation = class NamedNodeMapImpl {\n  constructor(args, privateData) {\n    this._element = privateData.element;\n  }\n\n  get _attributeList() {\n    return this._element._attributeList;\n  }\n\n  get [idlUtils.supportedPropertyIndices]() {\n    return this._attributeList.keys();\n  }\n\n  get length() {\n    return this._attributeList.length;\n  }\n\n  item(index) {\n    if (index >= this._attributeList.length) {\n      return null;\n    }\n\n    return this._attributeList[index];\n  }\n\n  get [idlUtils.supportedPropertyNames]() {\n    const names = new Set(this._attributeList.map(a => a._qualifiedName));\n    const el = this._element;\n\n    if (el._namespaceURI === HTML_NS && el._ownerDocument._parsingMode === \"html\") {\n      for (const name of names) {\n        const lowercaseName = name.toLowerCase();\n\n        if (lowercaseName !== name) {\n          names.delete(name);\n        }\n      }\n    }\n\n    return names;\n  }\n\n  getNamedItem(qualifiedName) {\n    return attributes.getAttributeByName(this._element, qualifiedName);\n  }\n\n  getNamedItemNS(namespace, localName) {\n    return attributes.getAttributeByNameNS(this._element, namespace, localName);\n  }\n\n  setNamedItem(attr) {\n    return attributes.setAttribute(this._element, attr);\n  }\n\n  setNamedItemNS(attr) {\n    return attributes.setAttribute(this._element, attr);\n  }\n\n  removeNamedItem(qualifiedName) {\n    const attr = attributes.removeAttributeByName(this._element, qualifiedName);\n\n    if (attr === null) {\n      throw new DOMException(\"Tried to remove an attribute that was not present\", \"NotFoundError\");\n    }\n\n    return attr;\n  }\n\n  removeNamedItemNS(namespace, localName) {\n    const attr = attributes.removeAttributeByNameNS(this._element, namespace, localName);\n\n    if (attr === null) {\n      throw new DOMException(\"Tried to remove an attribute that was not present\", \"NotFoundError\");\n    }\n\n    return attr;\n  }\n\n};","map":null,"metadata":{},"sourceType":"script"}