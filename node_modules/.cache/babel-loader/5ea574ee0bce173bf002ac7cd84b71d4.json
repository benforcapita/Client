{"ast":null,"code":"\"use strict\";\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nconst _require = require(\"../helpers/strings\"),\n      asciiLowercase = _require.asciiLowercase;\n\nconst _require2 = require(\"../helpers/traversal\"),\n      closest = _require2.closest;\n\nfunction reflectedAttributeClampedToRange(attrValue, min, max, defaultValue = 0) {\n  if (attrValue === null) {\n    return defaultValue;\n  } // We don't allow hexadecimal numbers here.\n  // eslint-disable-next-line radix\n\n\n  const parsed = parseInt(attrValue, 10);\n\n  if (isNaN(parsed) || parsed < 0) {\n    return defaultValue;\n  }\n\n  if (parsed < min) {\n    return min;\n  }\n\n  if (parsed > max) {\n    return max;\n  }\n\n  return parsed;\n}\n\nclass HTMLTableCellElementImpl extends HTMLElementImpl {\n  get colSpan() {\n    return reflectedAttributeClampedToRange(this.getAttribute(\"colspan\"), 1, 1000, 1);\n  }\n\n  set colSpan(V) {\n    this.setAttribute(\"colspan\", String(V));\n  }\n\n  get rowSpan() {\n    return reflectedAttributeClampedToRange(this.getAttribute(\"rowspan\"), 0, 65534, 1);\n  }\n\n  set rowSpan(V) {\n    this.setAttribute(\"rowspan\", String(V));\n  }\n\n  get cellIndex() {\n    const tr = closest(this, \"tr\");\n\n    if (tr === null) {\n      return -1;\n    }\n\n    return tr.cells.indexOf(this);\n  }\n\n  get scope() {\n    let value = this.getAttribute(\"scope\");\n\n    if (value === null) {\n      return \"\";\n    } // Enumerated attribute is matched ASCII-case-insensitively.\n\n\n    value = asciiLowercase(value);\n\n    if (value === \"row\" || value === \"col\" || value === \"rowgroup\" || value === \"colgroup\") {\n      return value;\n    }\n\n    return \"\";\n  }\n\n  set scope(V) {\n    this.setAttribute(\"scope\", V);\n  }\n\n}\n\nmodule.exports = {\n  implementation: HTMLTableCellElementImpl\n};","map":null,"metadata":{},"sourceType":"script"}