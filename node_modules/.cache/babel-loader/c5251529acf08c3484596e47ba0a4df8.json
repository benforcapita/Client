{"ast":null,"code":"\"use strict\";\n\nconst _require = require(\"../../utils\"),\n      mixin = _require.mixin;\n\nconst ElementImpl = require(\"./Element-impl\").implementation;\n\nconst MouseEvent = require(\"../generated/MouseEvent\");\n\nconst ElementCSSInlineStyleImpl = require(\"./ElementCSSInlineStyle-impl\").implementation;\n\nconst GlobalEventHandlersImpl = require(\"./GlobalEventHandlers-impl\").implementation;\n\nconst HTMLAndSVGElementSharedImpl = require(\"./HTMLAndSVGElementShared-impl\").implementation;\n\nconst _require2 = require(\"../helpers/form-controls\"),\n      isDisabled = _require2.isDisabled;\n\nclass HTMLElementImpl extends ElementImpl {\n  constructor(args, privateData) {\n    super(args, privateData);\n\n    this._initHTMLAndSVGElement();\n\n    this._initElementCSSInlineStyle();\n\n    this._initGlobalEvents();\n\n    this._settingCssText = false;\n    this._clickInProgress = false;\n  } // Add default event behavior (click link to navigate, click button to submit\n  // form, etc). We start by wrapping dispatchEvent so we can forward events to\n  // the element's default functions (only events that did not incur\n  // preventDefault).\n\n\n  dispatchEvent(event) {\n    if (event.type === \"click\") {\n      callEventBehaviorHook(event, \"_preClickActivationSteps\", this);\n    }\n\n    const outcome = super.dispatchEvent(event);\n\n    if (event.type === \"click\") {\n      if (event.defaultPrevented) {\n        callEventBehaviorHook(event, \"_canceledActivationSteps\");\n      } else {\n        callEventBehaviorHook(event, \"_activationBehavior\");\n      }\n    }\n\n    return outcome;\n  }\n\n  click() {\n    // https://html.spec.whatwg.org/multipage/interaction.html#dom-click\n    // https://html.spec.whatwg.org/multipage/interaction.html#run-synthetic-click-activation-steps\n    // Not completely spec compliant due to e.g. incomplete implementations of disabled for form controls, or no\n    // implementation at all of isTrusted.\n    if (this._clickInProgress) {\n      return;\n    }\n\n    this._clickInProgress = true;\n\n    if (isDisabled(this)) {\n      return;\n    }\n\n    const event = MouseEvent.createImpl([\"click\", {\n      bubbles: true,\n      cancelable: true,\n      view: this.ownerDocument.defaultView\n    }], {}); // Run synthetic click activation steps. According to the spec,\n    // this should not be calling dispatchEvent, but it matches browser behavior.\n    // See: https://www.w3.org/Bugs/Public/show_bug.cgi?id=12230\n    // See also: https://github.com/whatwg/html/issues/805\n\n    this.dispatchEvent(event);\n    this._clickInProgress = false;\n  }\n\n  get dir() {\n    let dirValue = this.getAttribute(\"dir\");\n\n    if (dirValue !== null) {\n      dirValue = dirValue.toLowerCase();\n\n      if ([\"ltr\", \"rtl\", \"auto\"].includes(dirValue)) {\n        return dirValue;\n      }\n    }\n\n    return \"\";\n  }\n\n  set dir(value) {\n    this.setAttribute(\"dir\", value);\n  }\n\n  _attrModified(name, value, oldValue) {\n    if (name === \"style\" && value !== oldValue && !this._settingCssText) {\n      this._settingCssText = true;\n      this._style.cssText = value;\n      this._settingCssText = false;\n    } else if (name.startsWith(\"on\")) {\n      this._globalEventChanged(name.substring(2));\n    }\n\n    super._attrModified.apply(this, arguments);\n  }\n\n  get offsetParent() {\n    return null;\n  }\n\n  get offsetTop() {\n    return 0;\n  }\n\n  get offsetLeft() {\n    return 0;\n  }\n\n  get offsetWidth() {\n    return 0;\n  }\n\n  get offsetHeight() {\n    return 0;\n  }\n\n}\n\nfunction callEventBehaviorHook(event, name, targetOverride) {\n  if (event) {\n    const target = targetOverride || event.target;\n\n    if (target && typeof target[name] === \"function\") {\n      target[name]();\n    }\n  }\n}\n\nmixin(HTMLElementImpl.prototype, ElementCSSInlineStyleImpl.prototype);\nmixin(HTMLElementImpl.prototype, GlobalEventHandlersImpl.prototype);\nmixin(HTMLElementImpl.prototype, HTMLAndSVGElementSharedImpl.prototype);\nmodule.exports = {\n  implementation: HTMLElementImpl\n};","map":null,"metadata":{},"sourceType":"script"}