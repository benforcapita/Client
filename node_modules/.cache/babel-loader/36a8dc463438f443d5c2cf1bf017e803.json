{"ast":null,"code":"\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\n\nconst utils = require(\"./utils.js\");\n\nconst impl = utils.implSymbol;\n\nclass URL {\n  constructor(url) {\n    if (arguments.length < 1) {\n      throw new TypeError(\"Failed to construct 'URL': 1 argument required, but only \" + arguments.length + \" present.\");\n    }\n\n    const args = [];\n    {\n      let curArg = arguments[0];\n      curArg = conversions[\"USVString\"](curArg, {\n        context: \"Failed to construct 'URL': parameter 1\"\n      });\n      args.push(curArg);\n    }\n    {\n      let curArg = arguments[1];\n\n      if (curArg !== undefined) {\n        curArg = conversions[\"USVString\"](curArg, {\n          context: \"Failed to construct 'URL': parameter 2\"\n        });\n      }\n\n      args.push(curArg);\n    }\n    return iface.setup(Object.create(new.target.prototype), args);\n  }\n\n  toJSON() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl].toJSON();\n  }\n\n  get href() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"href\"];\n  }\n\n  set href(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"USVString\"](V, {\n      context: \"Failed to set the 'href' property on 'URL': The provided value\"\n    });\n    this[impl][\"href\"] = V;\n  }\n\n  toString() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"href\"];\n  }\n\n  get origin() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"origin\"];\n  }\n\n  get protocol() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"protocol\"];\n  }\n\n  set protocol(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"USVString\"](V, {\n      context: \"Failed to set the 'protocol' property on 'URL': The provided value\"\n    });\n    this[impl][\"protocol\"] = V;\n  }\n\n  get username() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"username\"];\n  }\n\n  set username(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"USVString\"](V, {\n      context: \"Failed to set the 'username' property on 'URL': The provided value\"\n    });\n    this[impl][\"username\"] = V;\n  }\n\n  get password() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"password\"];\n  }\n\n  set password(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"USVString\"](V, {\n      context: \"Failed to set the 'password' property on 'URL': The provided value\"\n    });\n    this[impl][\"password\"] = V;\n  }\n\n  get host() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"host\"];\n  }\n\n  set host(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"USVString\"](V, {\n      context: \"Failed to set the 'host' property on 'URL': The provided value\"\n    });\n    this[impl][\"host\"] = V;\n  }\n\n  get hostname() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"hostname\"];\n  }\n\n  set hostname(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"USVString\"](V, {\n      context: \"Failed to set the 'hostname' property on 'URL': The provided value\"\n    });\n    this[impl][\"hostname\"] = V;\n  }\n\n  get port() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"port\"];\n  }\n\n  set port(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"USVString\"](V, {\n      context: \"Failed to set the 'port' property on 'URL': The provided value\"\n    });\n    this[impl][\"port\"] = V;\n  }\n\n  get pathname() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"pathname\"];\n  }\n\n  set pathname(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"USVString\"](V, {\n      context: \"Failed to set the 'pathname' property on 'URL': The provided value\"\n    });\n    this[impl][\"pathname\"] = V;\n  }\n\n  get search() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"search\"];\n  }\n\n  set search(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"USVString\"](V, {\n      context: \"Failed to set the 'search' property on 'URL': The provided value\"\n    });\n    this[impl][\"search\"] = V;\n  }\n\n  get searchParams() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.getSameObject(this, \"searchParams\", () => {\n      return utils.tryWrapperForImpl(this[impl][\"searchParams\"]);\n    });\n  }\n\n  get hash() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"hash\"];\n  }\n\n  set hash(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"USVString\"](V, {\n      context: \"Failed to set the 'hash' property on 'URL': The provided value\"\n    });\n    this[impl][\"hash\"] = V;\n  }\n\n}\n\nObject.defineProperties(URL.prototype, {\n  toJSON: {\n    enumerable: true\n  },\n  href: {\n    enumerable: true\n  },\n  toString: {\n    enumerable: true\n  },\n  origin: {\n    enumerable: true\n  },\n  protocol: {\n    enumerable: true\n  },\n  username: {\n    enumerable: true\n  },\n  password: {\n    enumerable: true\n  },\n  host: {\n    enumerable: true\n  },\n  hostname: {\n    enumerable: true\n  },\n  port: {\n    enumerable: true\n  },\n  pathname: {\n    enumerable: true\n  },\n  search: {\n    enumerable: true\n  },\n  searchParams: {\n    enumerable: true\n  },\n  hash: {\n    enumerable: true\n  },\n  [Symbol.toStringTag]: {\n    value: \"URL\",\n    configurable: true\n  }\n});\nconst iface = {\n  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`\n  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as\n  // implementing this mixin interface.\n  _mixedIntoPredicates: [],\n\n  is(obj) {\n    if (obj) {\n      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {\n        return true;\n      }\n\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(obj)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n\n  isImpl(obj) {\n    if (obj) {\n      if (obj instanceof Impl.implementation) {\n        return true;\n      }\n\n      const wrapper = utils.wrapperForImpl(obj);\n\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(wrapper)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n\n  convert(obj, {\n    context = \"The provided value\"\n  } = {}) {\n    if (module.exports.is(obj)) {\n      return utils.implForWrapper(obj);\n    }\n\n    throw new TypeError(\"\".concat(context, \" is not of type 'URL'.\"));\n  },\n\n  create(constructorArgs, privateData) {\n    let obj = Object.create(URL.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n\n  createImpl(constructorArgs, privateData) {\n    let obj = Object.create(URL.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return utils.implForWrapper(obj);\n  },\n\n  _internalSetup(obj) {},\n\n  setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n    privateData.wrapper = obj;\n\n    this._internalSetup(obj);\n\n    Object.defineProperty(obj, impl, {\n      value: new Impl.implementation(constructorArgs, privateData),\n      configurable: true\n    });\n    obj[impl][utils.wrapperSymbol] = obj;\n\n    if (Impl.init) {\n      Impl.init(obj[impl], privateData);\n    }\n\n    return obj;\n  },\n\n  interface: URL,\n  expose: {\n    Window: {\n      URL\n    },\n    Worker: {\n      URL\n    }\n  }\n}; // iface\n\nmodule.exports = iface;\n\nconst Impl = require(\"./URL-impl.js\");","map":null,"metadata":{},"sourceType":"script"}