{"ast":null,"code":"\"use strict\";\n\nconst DOMException = require(\"domexception\");\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nconst _require = require(\"../helpers/namespaces\"),\n      HTML_NS = _require.HTML_NS;\n\nconst _require2 = require(\"../helpers/internal-constants\"),\n      domSymbolTree = _require2.domSymbolTree;\n\nconst _require3 = require(\"../helpers/traversal\"),\n      firstChildWithHTMLLocalName = _require3.firstChildWithHTMLLocalName,\n      childrenByHTMLLocalName = _require3.childrenByHTMLLocalName;\n\nconst HTMLCollection = require(\"../generated/HTMLCollection\");\n\nconst NODE_TYPE = require(\"../node-type\");\n\nfunction tHeadInsertionPoint(table) {\n  const iterator = domSymbolTree.childrenIterator(table);\n\n  for (const child of iterator) {\n    if (child.nodeType !== NODE_TYPE.ELEMENT_NODE) {\n      continue;\n    }\n\n    if (child._namespaceURI !== HTML_NS || child._localName !== \"caption\" && child._localName !== \"colgroup\") {\n      return child;\n    }\n  }\n\n  return null;\n}\n\nclass HTMLTableElementImpl extends HTMLElementImpl {\n  get caption() {\n    return firstChildWithHTMLLocalName(this, \"caption\");\n  }\n\n  set caption(value) {\n    const currentCaption = this.caption;\n\n    if (currentCaption !== null) {\n      this.removeChild(currentCaption);\n    }\n\n    if (value !== null) {\n      const insertionPoint = this.firstChild;\n      this.insertBefore(value, insertionPoint);\n    }\n\n    return value;\n  }\n\n  get tHead() {\n    return firstChildWithHTMLLocalName(this, \"thead\");\n  }\n\n  set tHead(value) {\n    if (value !== null && value._localName !== \"thead\") {\n      throw new DOMException(\"Cannot set a non-thead element as a table header\", \"HierarchyRequestError\");\n    }\n\n    const currentHead = this.tHead;\n\n    if (currentHead !== null) {\n      this.removeChild(currentHead);\n    }\n\n    if (value !== null) {\n      const insertionPoint = tHeadInsertionPoint(this);\n      this.insertBefore(value, insertionPoint);\n    }\n  }\n\n  get tFoot() {\n    return firstChildWithHTMLLocalName(this, \"tfoot\");\n  }\n\n  set tFoot(value) {\n    if (value !== null && value._localName !== \"tfoot\") {\n      throw new DOMException(\"Cannot set a non-tfoot element as a table footer\", \"HierarchyRequestError\");\n    }\n\n    const currentFoot = this.tFoot;\n\n    if (currentFoot !== null) {\n      this.removeChild(currentFoot);\n    }\n\n    if (value !== null) {\n      this.appendChild(value);\n    }\n  }\n\n  get rows() {\n    if (!this._rows) {\n      this._rows = HTMLCollection.createImpl([], {\n        element: this,\n        query: () => {\n          const headerRows = [];\n          const bodyRows = [];\n          const footerRows = [];\n          const iterator = domSymbolTree.childrenIterator(this);\n\n          for (const child of iterator) {\n            if (child.nodeType !== NODE_TYPE.ELEMENT_NODE || child._namespaceURI !== HTML_NS) {\n              continue;\n            }\n\n            if (child._localName === \"thead\") {\n              headerRows.push(...childrenByHTMLLocalName(child, \"tr\"));\n            } else if (child._localName === \"tbody\") {\n              bodyRows.push(...childrenByHTMLLocalName(child, \"tr\"));\n            } else if (child._localName === \"tfoot\") {\n              footerRows.push(...childrenByHTMLLocalName(child, \"tr\"));\n            } else if (child._localName === \"tr\") {\n              bodyRows.push(child);\n            }\n          }\n\n          return [...headerRows, ...bodyRows, ...footerRows];\n        }\n      });\n    }\n\n    return this._rows;\n  }\n\n  get tBodies() {\n    if (!this._tBodies) {\n      this._tBodies = HTMLCollection.createImpl([], {\n        element: this,\n        query: () => childrenByHTMLLocalName(this, \"tbody\")\n      });\n    }\n\n    return this._tBodies;\n  }\n\n  createTBody() {\n    const el = this._ownerDocument.createElement(\"TBODY\");\n\n    const tbodies = childrenByHTMLLocalName(this, \"tbody\");\n    const insertionPoint = tbodies[tbodies.length - 1];\n\n    if (insertionPoint) {\n      this.insertBefore(el, insertionPoint.nextSibling);\n    } else {\n      this.appendChild(el);\n    }\n\n    return el;\n  }\n\n  createTHead() {\n    let el = this.tHead;\n\n    if (!el) {\n      el = this.tHead = this._ownerDocument.createElement(\"THEAD\");\n    }\n\n    return el;\n  }\n\n  deleteTHead() {\n    this.tHead = null;\n  }\n\n  createTFoot() {\n    let el = this.tFoot;\n\n    if (!el) {\n      el = this.tFoot = this._ownerDocument.createElement(\"TFOOT\");\n    }\n\n    return el;\n  }\n\n  deleteTFoot() {\n    this.tFoot = null;\n  }\n\n  createCaption() {\n    let el = this.caption;\n\n    if (!el) {\n      el = this.caption = this._ownerDocument.createElement(\"CAPTION\");\n    }\n\n    return el;\n  }\n\n  deleteCaption() {\n    const c = this.caption;\n\n    if (c) {\n      c.parentNode.removeChild(c);\n    }\n  }\n\n  insertRow(index) {\n    if (index < -1 || index > this.rows.length) {\n      throw new DOMException(\"Cannot insert a row at an index that is less than -1 or greater than the number of \" + \"existing rows\", \"IndexSizeError\");\n    }\n\n    const tr = this._ownerDocument.createElement(\"tr\");\n\n    if (this.rows.length === 0 && this.tBodies.length === 0) {\n      const tBody = this._ownerDocument.createElement(\"tbody\");\n\n      tBody.appendChild(tr);\n      this.appendChild(tBody);\n    } else if (this.rows.length === 0) {\n      const tBody = this.tBodies.item(this.tBodies.length - 1);\n      tBody.appendChild(tr);\n    } else if (index === -1 || index === this.rows.length) {\n      const tSection = this.rows.item(this.rows.length - 1).parentNode;\n      tSection.appendChild(tr);\n    } else {\n      const beforeTR = this.rows.item(index);\n      const tSection = beforeTR.parentNode;\n      tSection.insertBefore(tr, beforeTR);\n    }\n\n    return tr;\n  }\n\n  deleteRow(index) {\n    const rowLength = this.rows.length;\n\n    if (index < -1 || index >= rowLength) {\n      throw new DOMException(\"Cannot delete a row at index \".concat(index, \", where no row exists\"), \"IndexSizeError\");\n    }\n\n    if (index === -1) {\n      if (rowLength === 0) {\n        return;\n      }\n\n      index = rowLength - 1;\n    }\n\n    const tr = this.rows.item(index);\n    tr.parentNode.removeChild(tr);\n  }\n\n}\n\nmodule.exports = {\n  implementation: HTMLTableElementImpl\n};","map":null,"metadata":{},"sourceType":"script"}