{"ast":null,"code":"\"use strict\";\n\nconst _require = require(\"./strings\"),\n      isValidFloatingPointNumber = _require.isValidFloatingPointNumber,\n      isValidSimpleColor = _require.isValidSimpleColor,\n      parseFloatingPointNumber = _require.parseFloatingPointNumber,\n      stripLeadingAndTrailingASCIIWhitespace = _require.stripLeadingAndTrailingASCIIWhitespace,\n      stripNewlines = _require.stripNewlines,\n      splitOnCommas = _require.splitOnCommas;\n\nconst _require2 = require(\"./dates-and-times\"),\n      isValidDateString = _require2.isValidDateString,\n      isValidMonthString = _require2.isValidMonthString,\n      isValidTimeString = _require2.isValidTimeString,\n      isValidWeekString = _require2.isValidWeekString,\n      parseLocalDateAndTimeString = _require2.parseLocalDateAndTimeString,\n      serializeNormalizedDateAndTime = _require2.serializeNormalizedDateAndTime;\n\nconst whatwgURL = require(\"whatwg-url\");\n\nconst NodeList = require(\"../generated/NodeList\");\n\nconst _require3 = require(\"../helpers/internal-constants\"),\n      domSymbolTree = _require3.domSymbolTree;\n\nconst NODE_TYPE = require(\"../node-type\");\n\nconst submittableLocalNames = new Set([\"button\", \"input\", \"keygen\", \"object\", \"select\", \"textarea\"]);\n\nexports.isDisabled = formControl => {\n  if (formControl.localName === \"button\" || formControl.localName === \"input\" || formControl.localName === \"select\" || formControl.localName === \"textarea\") {\n    if (formControl.hasAttribute(\"disabled\")) {\n      return true;\n    }\n  }\n\n  let e = formControl.parentNode;\n\n  while (e) {\n    if (e.localName === \"fieldset\" && e.hasAttribute(\"disabled\")) {\n      const firstLegendElementChild = e.querySelector(\"legend\");\n\n      if (!firstLegendElementChild || !firstLegendElementChild.contains(formControl)) {\n        return true;\n      }\n    }\n\n    e = e.parentNode;\n  }\n\n  return false;\n};\n\nexports.isSubmittable = formControl => {\n  // https://html.spec.whatwg.org/multipage/forms.html#category-submit\n  return submittableLocalNames.has(formControl.localName);\n};\n\nexports.isButton = formControl => {\n  // https://html.spec.whatwg.org/multipage/forms.html#concept-button\n  return formControl.type === \"button\" || formControl.type === \"submit\" || formControl.type === \"reset\" || formControl.type === \"image\" || formControl.localName === \"button\";\n};\n\nexports.normalizeToCRLF = string => {\n  return string.replace(/\\r([^\\n])/g, \"\\r\\n$1\").replace(/\\r$/, \"\\r\\n\").replace(/([^\\r])\\n/g, \"$1\\r\\n\").replace(/^\\n/, \"\\r\\n\");\n};\n\nexports.isLabelable = node => {\n  // labelable logic defined at: https://html.spec.whatwg.org/multipage/forms.html#category-label\n  if (node.nodeType !== NODE_TYPE.ELEMENT_NODE) {\n    return false;\n  }\n\n  switch (node.tagName) {\n    case \"BUTTON\":\n    case \"METER\":\n    case \"OUTPUT\":\n    case \"PROGRESS\":\n    case \"SELECT\":\n    case \"TEXTAREA\":\n      return true;\n\n    case \"INPUT\":\n      return node.type !== \"hidden\";\n  }\n\n  return false;\n};\n\nexports.getLabelsForLabelable = labelable => {\n  if (!exports.isLabelable(labelable)) {\n    return null;\n  }\n\n  if (!labelable._labels) {\n    const root = labelable.getRootNode();\n    labelable._labels = NodeList.create([], {\n      element: root,\n      query: () => {\n        const nodes = [];\n\n        for (const descendant of domSymbolTree.treeIterator(root)) {\n          if (descendant.control === labelable) {\n            nodes.push(descendant);\n          }\n        }\n\n        return nodes;\n      }\n    });\n  }\n\n  return labelable._labels;\n}; // https://html.spec.whatwg.org/multipage/forms.html#valid-e-mail-address\n\n\nexports.isValidEmailAddress = (emailAddress, multiple = false) => {\n  const emailAddressRegExp = new RegExp(\"^[a-zA-Z0-9.!#$%&'*+\\\\/=?^_`{|}~-]+@[a-zA-Z0-9]\" + \"(?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}\" + \"[a-zA-Z0-9])?)*$\"); // A valid e-mail address list is a set of comma-separated tokens, where each token is itself\n  // a valid e - mail address.To obtain the list of tokens from a valid e - mail address list,\n  // an implementation must split the string on commas.\n\n  if (multiple) {\n    return splitOnCommas(emailAddress).every(value => emailAddressRegExp.test(value));\n  }\n\n  return emailAddressRegExp.test(emailAddress);\n};\n\nexports.isValidAbsoluteURL = url => {\n  return whatwgURL.parseURL(url) !== null;\n};\n\nexports.sanitizeValueByType = (input, val) => {\n  switch (input.type.toLowerCase()) {\n    case \"password\":\n    case \"search\":\n    case \"tel\":\n    case \"text\":\n      val = stripNewlines(val);\n      break;\n\n    case \"color\":\n      // https://html.spec.whatwg.org/multipage/forms.html#color-state-(type=color):value-sanitization-algorithm\n      val = isValidSimpleColor(val) ? val.toLowerCase() : \"#000000\";\n      break;\n\n    case \"date\":\n      // https://html.spec.whatwg.org/multipage/input.html#date-state-(type=date):value-sanitization-algorithm\n      if (!isValidDateString(val)) {\n        val = \"\";\n      }\n\n      break;\n\n    case \"datetime-local\":\n      {\n        // https://html.spec.whatwg.org/multipage/input.html#local-date-and-time-state-(type=datetime-local):value-sanitization-algorithm\n        const dateAndTime = parseLocalDateAndTimeString(val);\n        val = dateAndTime !== null ? serializeNormalizedDateAndTime(dateAndTime) : \"\";\n        break;\n      }\n\n    case \"email\":\n      // https://html.spec.whatwg.org/multipage/forms.html#e-mail-state-(type=email):value-sanitization-algorithm\n      // https://html.spec.whatwg.org/multipage/forms.html#e-mail-state-(type=email):value-sanitization-algorithm-2\n      if (input.hasAttribute(\"multiple\")) {\n        val = val.split(\",\").map(token => stripLeadingAndTrailingASCIIWhitespace(token)).join(\",\");\n      } else {\n        val = stripNewlines(val);\n        val = stripLeadingAndTrailingASCIIWhitespace(val);\n      }\n\n      break;\n\n    case \"month\":\n      // https://html.spec.whatwg.org/multipage/input.html#month-state-(type=month):value-sanitization-algorithm\n      if (!isValidMonthString(val)) {\n        val = \"\";\n      }\n\n      break;\n\n    case \"number\":\n      // https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number):value-sanitization-algorithm\n      // TODO: using parseFloatingPointNumber in addition to isValidFloatingPointNumber to pass number.html WPT.\n      // Possible spec bug.\n      if (!isValidFloatingPointNumber(val) || isNaN(parseFloatingPointNumber(val))) {\n        val = \"\";\n      }\n\n      break;\n\n    case \"range\":\n      // https://html.spec.whatwg.org/multipage/input.html#range-state-(type=range):value-sanitization-algorithm\n      // TODO: using parseFloatingPointNumber in addition to isValidFloatingPointNumber to pass number.html WPT.\n      // Possible spec bug.\n      if (!isValidFloatingPointNumber(val) || isNaN(parseFloatingPointNumber(val))) {\n        const minimum = input._minimum;\n        const maximum = input._maximum;\n        const defaultValue = maximum < minimum ? minimum : (minimum + maximum) / 2;\n        val = \"\".concat(defaultValue);\n      }\n\n      break;\n\n    case \"time\":\n      // https://html.spec.whatwg.org/multipage/input.html#time-state-(type=time):value-sanitization-algorithm\n      if (!isValidTimeString(val)) {\n        val = \"\";\n      }\n\n      break;\n\n    case \"url\":\n      // https://html.spec.whatwg.org/multipage/forms.html#url-state-(type=url):value-sanitization-algorithm\n      val = stripNewlines(val);\n      val = stripLeadingAndTrailingASCIIWhitespace(val);\n      break;\n\n    case \"week\":\n      // https://html.spec.whatwg.org/multipage/input.html#week-state-(type=week):value-sanitization-algorithm\n      if (!isValidWeekString(val)) {\n        val = \"\";\n      }\n\n  }\n\n  return val;\n};","map":null,"metadata":{},"sourceType":"script"}