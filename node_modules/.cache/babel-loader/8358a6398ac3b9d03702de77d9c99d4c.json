{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/benblum/Desktop/Code/webApp/client/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nconst DOMException = require(\"domexception\");\n\nconst StorageEvent = require(\"../generated/StorageEvent\");\n\nconst idlUtils = require(\"../generated/utils\"); // https://html.spec.whatwg.org/multipage/webstorage.html#the-storage-interface\n\n\nclass StorageImpl {\n  constructor(args, {\n    associatedWindow,\n    storageArea,\n    url,\n    type,\n    storageQuota\n  }) {\n    this._associatedWindow = associatedWindow;\n    this._items = storageArea;\n    this._url = url;\n    this._type = type;\n    this._quota = storageQuota;\n  }\n\n  _dispatchStorageEvent(key, oldValue, newValue) {\n    return this._associatedWindow._currentOriginData.windowsInSameOrigin.filter(target => target !== this._associatedWindow).forEach(target => target.dispatchEvent(StorageEvent.create([\"storage\", {\n      bubbles: false,\n      cancelable: false,\n      key,\n      oldValue,\n      newValue,\n      url: this._url,\n      storageArea: target[\"_\" + this._type]\n    }])));\n  }\n\n  get length() {\n    return this._items.size;\n  }\n\n  key(n) {\n    if (n >= this._items.size) {\n      return null;\n    }\n\n    return [...this._items.keys()][n];\n  }\n\n  getItem(key) {\n    if (this._items.has(key)) {\n      return this._items.get(key);\n    }\n\n    return null;\n  }\n\n  setItem(key, value) {\n    const oldValue = this._items.get(key) || null;\n\n    if (oldValue === value) {\n      return;\n    } // Concatenate all keys and values to measure their length against the quota\n\n\n    let itemsTotalLength = key.length + value.length;\n\n    for (const _ref of this._items) {\n      var _ref2 = _slicedToArray(_ref, 2);\n\n      const curKey = _ref2[0];\n      const curValue = _ref2[1];\n\n      // If the key already exists, skip it as it will be set to the new value instead\n      if (key !== curKey) {\n        itemsTotalLength += curKey.length + curValue.length;\n      }\n    }\n\n    if (itemsTotalLength > this._quota) {\n      throw new DOMException(\"The \".concat(this._quota, \"-code unit storage quota has been exceeded.\"), \"QuotaExceededError\");\n    }\n\n    setTimeout(this._dispatchStorageEvent.bind(this), 0, key, oldValue, value);\n\n    this._items.set(key, value);\n  }\n\n  removeItem(key) {\n    if (this._items.has(key)) {\n      setTimeout(this._dispatchStorageEvent.bind(this), 0, key, this._items.get(key), null);\n\n      this._items.delete(key);\n    }\n  }\n\n  clear() {\n    if (this._items.size > 0) {\n      setTimeout(this._dispatchStorageEvent.bind(this), 0, null, null, null);\n\n      this._items.clear();\n    }\n  }\n\n  get [idlUtils.supportedPropertyNames]() {\n    return this._items.keys();\n  }\n\n}\n\nmodule.exports = {\n  implementation: StorageImpl\n};","map":null,"metadata":{},"sourceType":"script"}