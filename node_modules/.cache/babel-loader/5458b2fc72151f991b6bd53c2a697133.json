{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/benblum/Desktop/Code/webApp/client/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nconst conversions = require(\"webidl-conversions\");\n\nconst utils = require(\"./utils.js\");\n\nconst impl = utils.implSymbol;\nconst IteratorPrototype = Object.create(utils.IteratorPrototype, {\n  next: {\n    value: function next() {\n      const internal = this[utils.iterInternalSymbol];\n      const target = internal.target,\n            kind = internal.kind,\n            index = internal.index;\n      const values = Array.from(target[impl]);\n      const len = values.length;\n\n      if (index >= len) {\n        return {\n          value: undefined,\n          done: true\n        };\n      }\n\n      const pair = values[index];\n      internal.index = index + 1;\n\n      const _pair$map = pair.map(utils.tryWrapperForImpl),\n            _pair$map2 = _slicedToArray(_pair$map, 2),\n            key = _pair$map2[0],\n            value = _pair$map2[1];\n\n      let result;\n\n      switch (kind) {\n        case \"key\":\n          result = key;\n          break;\n\n        case \"value\":\n          result = value;\n          break;\n\n        case \"key+value\":\n          result = [key, value];\n          break;\n      }\n\n      return {\n        value: result,\n        done: false\n      };\n    },\n    writable: true,\n    enumerable: true,\n    configurable: true\n  },\n  [Symbol.toStringTag]: {\n    value: \"URLSearchParams Iterator\",\n    configurable: true\n  }\n});\n\nclass URLSearchParams {\n  constructor() {\n    const args = [];\n    {\n      let curArg = arguments[0];\n\n      if (curArg !== undefined) {\n        if (utils.isObject(curArg)) {\n          if (curArg[Symbol.iterator] !== undefined) {\n            if (!utils.isObject(curArg)) {\n              throw new TypeError(\"Failed to construct 'URLSearchParams': parameter 1\" + \" sequence\" + \" is not an iterable object.\");\n            } else {\n              const V = [];\n              const tmp = curArg;\n\n              for (let nextItem of tmp) {\n                if (!utils.isObject(nextItem)) {\n                  throw new TypeError(\"Failed to construct 'URLSearchParams': parameter 1\" + \" sequence\" + \"'s element\" + \" is not an iterable object.\");\n                } else {\n                  const V = [];\n                  const tmp = nextItem;\n\n                  for (let nextItem of tmp) {\n                    nextItem = conversions[\"USVString\"](nextItem, {\n                      context: \"Failed to construct 'URLSearchParams': parameter 1\" + \" sequence\" + \"'s element\" + \"'s element\"\n                    });\n                    V.push(nextItem);\n                  }\n\n                  nextItem = V;\n                }\n\n                V.push(nextItem);\n              }\n\n              curArg = V;\n            }\n          } else {\n            if (!utils.isObject(curArg)) {\n              throw new TypeError(\"Failed to construct 'URLSearchParams': parameter 1\" + \" record\" + \" is not an object.\");\n            } else {\n              const result = Object.create(null);\n\n              for (const key of Reflect.ownKeys(curArg)) {\n                const desc = Object.getOwnPropertyDescriptor(curArg, key);\n\n                if (desc && desc.enumerable) {\n                  let typedKey = key;\n                  let typedValue = curArg[key];\n                  typedKey = conversions[\"USVString\"](typedKey, {\n                    context: \"Failed to construct 'URLSearchParams': parameter 1\" + \" record\" + \"'s key\"\n                  });\n                  typedValue = conversions[\"USVString\"](typedValue, {\n                    context: \"Failed to construct 'URLSearchParams': parameter 1\" + \" record\" + \"'s value\"\n                  });\n                  result[typedKey] = typedValue;\n                }\n              }\n\n              curArg = result;\n            }\n          }\n        } else {\n          curArg = conversions[\"USVString\"](curArg, {\n            context: \"Failed to construct 'URLSearchParams': parameter 1\"\n          });\n        }\n      } else {\n        curArg = \"\";\n      }\n\n      args.push(curArg);\n    }\n    return iface.setup(Object.create(new.target.prototype), args);\n  }\n\n  append(name, value) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    if (arguments.length < 2) {\n      throw new TypeError(\"Failed to execute 'append' on 'URLSearchParams': 2 arguments required, but only \" + arguments.length + \" present.\");\n    }\n\n    const args = [];\n    {\n      let curArg = arguments[0];\n      curArg = conversions[\"USVString\"](curArg, {\n        context: \"Failed to execute 'append' on 'URLSearchParams': parameter 1\"\n      });\n      args.push(curArg);\n    }\n    {\n      let curArg = arguments[1];\n      curArg = conversions[\"USVString\"](curArg, {\n        context: \"Failed to execute 'append' on 'URLSearchParams': parameter 2\"\n      });\n      args.push(curArg);\n    }\n    return this[impl].append(...args);\n  }\n\n  delete(name) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    if (arguments.length < 1) {\n      throw new TypeError(\"Failed to execute 'delete' on 'URLSearchParams': 1 argument required, but only \" + arguments.length + \" present.\");\n    }\n\n    const args = [];\n    {\n      let curArg = arguments[0];\n      curArg = conversions[\"USVString\"](curArg, {\n        context: \"Failed to execute 'delete' on 'URLSearchParams': parameter 1\"\n      });\n      args.push(curArg);\n    }\n    return this[impl].delete(...args);\n  }\n\n  get(name) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    if (arguments.length < 1) {\n      throw new TypeError(\"Failed to execute 'get' on 'URLSearchParams': 1 argument required, but only \" + arguments.length + \" present.\");\n    }\n\n    const args = [];\n    {\n      let curArg = arguments[0];\n      curArg = conversions[\"USVString\"](curArg, {\n        context: \"Failed to execute 'get' on 'URLSearchParams': parameter 1\"\n      });\n      args.push(curArg);\n    }\n    return this[impl].get(...args);\n  }\n\n  getAll(name) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    if (arguments.length < 1) {\n      throw new TypeError(\"Failed to execute 'getAll' on 'URLSearchParams': 1 argument required, but only \" + arguments.length + \" present.\");\n    }\n\n    const args = [];\n    {\n      let curArg = arguments[0];\n      curArg = conversions[\"USVString\"](curArg, {\n        context: \"Failed to execute 'getAll' on 'URLSearchParams': parameter 1\"\n      });\n      args.push(curArg);\n    }\n    return utils.tryWrapperForImpl(this[impl].getAll(...args));\n  }\n\n  has(name) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    if (arguments.length < 1) {\n      throw new TypeError(\"Failed to execute 'has' on 'URLSearchParams': 1 argument required, but only \" + arguments.length + \" present.\");\n    }\n\n    const args = [];\n    {\n      let curArg = arguments[0];\n      curArg = conversions[\"USVString\"](curArg, {\n        context: \"Failed to execute 'has' on 'URLSearchParams': parameter 1\"\n      });\n      args.push(curArg);\n    }\n    return this[impl].has(...args);\n  }\n\n  set(name, value) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    if (arguments.length < 2) {\n      throw new TypeError(\"Failed to execute 'set' on 'URLSearchParams': 2 arguments required, but only \" + arguments.length + \" present.\");\n    }\n\n    const args = [];\n    {\n      let curArg = arguments[0];\n      curArg = conversions[\"USVString\"](curArg, {\n        context: \"Failed to execute 'set' on 'URLSearchParams': parameter 1\"\n      });\n      args.push(curArg);\n    }\n    {\n      let curArg = arguments[1];\n      curArg = conversions[\"USVString\"](curArg, {\n        context: \"Failed to execute 'set' on 'URLSearchParams': parameter 2\"\n      });\n      args.push(curArg);\n    }\n    return this[impl].set(...args);\n  }\n\n  sort() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl].sort();\n  }\n\n  toString() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl].toString();\n  }\n\n  keys() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return module.exports.createDefaultIterator(this, \"key\");\n  }\n\n  values() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return module.exports.createDefaultIterator(this, \"value\");\n  }\n\n  entries() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return module.exports.createDefaultIterator(this, \"key+value\");\n  }\n\n  forEach(callback) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    if (arguments.length < 1) {\n      throw new TypeError(\"Failed to execute 'forEach' on 'iterable': 1 argument required, \" + \"but only 0 present.\");\n    }\n\n    if (typeof callback !== \"function\") {\n      throw new TypeError(\"Failed to execute 'forEach' on 'iterable': The callback provided \" + \"as parameter 1 is not a function.\");\n    }\n\n    const thisArg = arguments[1];\n    let pairs = Array.from(this[impl]);\n    let i = 0;\n\n    while (i < pairs.length) {\n      const _pairs$i$map = pairs[i].map(utils.tryWrapperForImpl),\n            _pairs$i$map2 = _slicedToArray(_pairs$i$map, 2),\n            key = _pairs$i$map2[0],\n            value = _pairs$i$map2[1];\n\n      callback.call(thisArg, value, key, this);\n      pairs = Array.from(this[impl]);\n      i++;\n    }\n  }\n\n}\n\nObject.defineProperties(URLSearchParams.prototype, {\n  append: {\n    enumerable: true\n  },\n  delete: {\n    enumerable: true\n  },\n  get: {\n    enumerable: true\n  },\n  getAll: {\n    enumerable: true\n  },\n  has: {\n    enumerable: true\n  },\n  set: {\n    enumerable: true\n  },\n  sort: {\n    enumerable: true\n  },\n  toString: {\n    enumerable: true\n  },\n  keys: {\n    enumerable: true\n  },\n  values: {\n    enumerable: true\n  },\n  entries: {\n    enumerable: true\n  },\n  forEach: {\n    enumerable: true\n  },\n  [Symbol.toStringTag]: {\n    value: \"URLSearchParams\",\n    configurable: true\n  },\n  [Symbol.iterator]: {\n    value: URLSearchParams.prototype.entries,\n    configurable: true,\n    writable: true\n  }\n});\nconst iface = {\n  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`\n  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as\n  // implementing this mixin interface.\n  _mixedIntoPredicates: [],\n\n  is(obj) {\n    if (obj) {\n      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {\n        return true;\n      }\n\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(obj)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n\n  isImpl(obj) {\n    if (obj) {\n      if (obj instanceof Impl.implementation) {\n        return true;\n      }\n\n      const wrapper = utils.wrapperForImpl(obj);\n\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(wrapper)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n\n  convert(obj, {\n    context = \"The provided value\"\n  } = {}) {\n    if (module.exports.is(obj)) {\n      return utils.implForWrapper(obj);\n    }\n\n    throw new TypeError(\"\".concat(context, \" is not of type 'URLSearchParams'.\"));\n  },\n\n  createDefaultIterator(target, kind) {\n    const iterator = Object.create(IteratorPrototype);\n    Object.defineProperty(iterator, utils.iterInternalSymbol, {\n      value: {\n        target,\n        kind,\n        index: 0\n      },\n      configurable: true\n    });\n    return iterator;\n  },\n\n  create(constructorArgs, privateData) {\n    let obj = Object.create(URLSearchParams.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n\n  createImpl(constructorArgs, privateData) {\n    let obj = Object.create(URLSearchParams.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return utils.implForWrapper(obj);\n  },\n\n  _internalSetup(obj) {},\n\n  setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n    privateData.wrapper = obj;\n\n    this._internalSetup(obj);\n\n    Object.defineProperty(obj, impl, {\n      value: new Impl.implementation(constructorArgs, privateData),\n      configurable: true\n    });\n    obj[impl][utils.wrapperSymbol] = obj;\n\n    if (Impl.init) {\n      Impl.init(obj[impl], privateData);\n    }\n\n    return obj;\n  },\n\n  interface: URLSearchParams,\n  expose: {\n    Window: {\n      URLSearchParams\n    },\n    Worker: {\n      URLSearchParams\n    }\n  }\n}; // iface\n\nmodule.exports = iface;\n\nconst Impl = require(\"./URLSearchParams-impl.js\");","map":null,"metadata":{},"sourceType":"script"}