{"ast":null,"code":"\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nconst resourceLoader = require(\"../../browser/resource-loader\");\n\nconst _require = require(\"../../utils\"),\n      Canvas = _require.Canvas,\n      reflectURLAttribute = _require.reflectURLAttribute;\n\nclass HTMLImageElementImpl extends HTMLElementImpl {\n  _attrModified(name, value, oldVal) {\n    if (name === \"src\" && value !== oldVal) {\n      const document = this._ownerDocument;\n\n      if (Canvas && document.implementation._hasFeature(\"FetchExternalResources\", \"img\")) {\n        let error;\n\n        if (!this._image) {\n          this._image = new Canvas.Image(); // Install an error handler that just remembers the error. It is then\n          // thrown in the callback of resourceLoader.load() below.\n\n          this._image.onerror = function (err) {\n            error = err;\n          };\n        }\n\n        this._currentSrc = null;\n\n        if (this.hasAttribute(\"src\")) {\n          resourceLoader.load(this, this.src, {}, (data, url, response) => {\n            if (response && response.statusCode !== undefined && response.statusCode !== 200) {\n              throw new Error(\"Status code: \" + response.statusCode);\n            }\n\n            error = null;\n            this._image.source = data;\n\n            if (error) {\n              throw new Error(error);\n            }\n\n            this._currentSrc = value;\n          });\n        } else {\n          this._image.source = undefined;\n        }\n      }\n    }\n\n    super._attrModified(name, value, oldVal);\n  }\n\n  get _accept() {\n    return \"image/png,image/*;q=0.8,*/*;q=0.5\";\n  }\n\n  get src() {\n    return reflectURLAttribute(this, \"src\");\n  }\n\n  set src(value) {\n    this.setAttribute(\"src\", value);\n  }\n\n  get srcset() {\n    return conversions.USVString(this.getAttribute(\"srcset\"));\n  }\n\n  set srcset(value) {\n    this.setAttribute(\"srcset\", value);\n  }\n\n  get height() {\n    // Just like on browsers, if no width / height is defined, we fall back on the\n    // dimensions of the internal image data.\n    return this.hasAttribute(\"height\") ? conversions[\"unsigned long\"](this.getAttribute(\"height\")) : this.naturalHeight;\n  }\n\n  set height(V) {\n    this.setAttribute(\"height\", String(V));\n  }\n\n  get width() {\n    return this.hasAttribute(\"width\") ? conversions[\"unsigned long\"](this.getAttribute(\"width\")) : this.naturalWidth;\n  }\n\n  set width(V) {\n    this.setAttribute(\"width\", String(V));\n  }\n\n  get naturalHeight() {\n    return this._image ? this._image.height : 0;\n  }\n\n  get naturalWidth() {\n    return this._image ? this._image.width : 0;\n  }\n\n  get complete() {\n    return Boolean(this._image && this._image.complete);\n  }\n\n  get currentSrc() {\n    return this._currentSrc || \"\";\n  }\n\n  get lowsrc() {\n    return reflectURLAttribute(this, \"lowsrc\");\n  }\n\n  set lowsrc(value) {\n    this.setAttribute(\"lowsrc\", value);\n  }\n\n  get longDesc() {\n    return reflectURLAttribute(this, \"longdesc\");\n  }\n\n  set longDesc(value) {\n    this.setAttribute(\"longdesc\", value);\n  }\n\n}\n\nmodule.exports = {\n  implementation: HTMLImageElementImpl\n};","map":null,"metadata":{},"sourceType":"script"}