{"ast":null,"code":"\"use strict\";\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nconst MouseEvent = require(\"../generated/MouseEvent\");\n\nconst _require = require(\"../helpers/internal-constants\"),\n      domSymbolTree = _require.domSymbolTree;\n\nconst NODE_TYPE = require(\"../node-type\");\n\nconst _require2 = require(\"../helpers/form-controls\"),\n      isLabelable = _require2.isLabelable,\n      isDisabled = _require2.isDisabled;\n\nfunction sendClickToAssociatedNode(node) {\n  node.dispatchEvent(MouseEvent.createImpl([\"click\", {\n    bubbles: true,\n    cancelable: true,\n    view: node.ownerDocument ? node.ownerDocument.defaultView : null,\n    screenX: 0,\n    screenY: 0,\n    clientX: 0,\n    clientY: 0,\n    button: 0,\n    detail: 1,\n    relatedTarget: null\n  }]));\n}\n\nclass HTMLLabelElementImpl extends HTMLElementImpl {\n  get control() {\n    if (this.hasAttribute(\"for\")) {\n      const forValue = this.getAttribute(\"for\");\n\n      if (forValue === \"\") {\n        return null;\n      }\n\n      const root = this.getRootNode();\n\n      for (const descendant of domSymbolTree.treeIterator(root)) {\n        if (descendant.nodeType === NODE_TYPE.ELEMENT_NODE && descendant.getAttribute(\"id\") === forValue) {\n          return isLabelable(descendant) ? descendant : null;\n        }\n      }\n\n      return null;\n    }\n\n    for (const descendant of domSymbolTree.treeIterator(this)) {\n      if (isLabelable(descendant)) {\n        return descendant;\n      }\n    }\n\n    return null;\n  }\n\n  get form() {\n    const node = this.control;\n\n    if (node) {\n      return node.form;\n    }\n\n    return null;\n  }\n\n  _activationBehavior() {\n    const node = this.control;\n\n    if (node && !isDisabled(node)) {\n      sendClickToAssociatedNode(node);\n    }\n  }\n\n}\n\nmodule.exports = {\n  implementation: HTMLLabelElementImpl\n};","map":null,"metadata":{},"sourceType":"script"}