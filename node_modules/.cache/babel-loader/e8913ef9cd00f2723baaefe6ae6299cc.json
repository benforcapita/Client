{"ast":null,"code":"\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\n\nconst utils = require(\"./utils.js\");\n\nconst convertSelectionMode = require(\"./SelectionMode.js\").convert;\n\nconst impl = utils.implSymbol;\n\nconst HTMLElement = require(\"./HTMLElement.js\");\n\nfunction HTMLTextAreaElement() {\n  throw new TypeError(\"Illegal constructor\");\n}\n\nObject.setPrototypeOf(HTMLTextAreaElement.prototype, HTMLElement.interface.prototype);\nObject.setPrototypeOf(HTMLTextAreaElement, HTMLElement.interface);\nObject.defineProperty(HTMLTextAreaElement, \"prototype\", {\n  value: HTMLTextAreaElement.prototype,\n  writable: false,\n  enumerable: false,\n  configurable: false\n});\n\nHTMLTextAreaElement.prototype.checkValidity = function checkValidity() {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  return this[impl].checkValidity();\n};\n\nHTMLTextAreaElement.prototype.reportValidity = function reportValidity() {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  return this[impl].reportValidity();\n};\n\nHTMLTextAreaElement.prototype.setCustomValidity = function setCustomValidity(error) {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'setCustomValidity' on 'HTMLTextAreaElement': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  const args = [];\n  {\n    let curArg = arguments[0];\n    curArg = conversions[\"DOMString\"](curArg, {\n      context: \"Failed to execute 'setCustomValidity' on 'HTMLTextAreaElement': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  return this[impl].setCustomValidity(...args);\n};\n\nHTMLTextAreaElement.prototype.select = function select() {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  return this[impl].select();\n};\n\nHTMLTextAreaElement.prototype.setRangeText = function setRangeText(replacement) {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'setRangeText' on 'HTMLTextAreaElement': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  const args = [];\n\n  switch (arguments.length) {\n    case 1:\n      {\n        let curArg = arguments[0];\n        curArg = conversions[\"DOMString\"](curArg, {\n          context: \"Failed to execute 'setRangeText' on 'HTMLTextAreaElement': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      break;\n\n    case 2:\n      throw new TypeError(\"Failed to execute 'setRangeText' on 'HTMLTextAreaElement': only \" + arguments.length + \" arguments present.\");\n      break;\n\n    case 3:\n      {\n        let curArg = arguments[0];\n        curArg = conversions[\"DOMString\"](curArg, {\n          context: \"Failed to execute 'setRangeText' on 'HTMLTextAreaElement': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      {\n        let curArg = arguments[1];\n        curArg = conversions[\"unsigned long\"](curArg, {\n          context: \"Failed to execute 'setRangeText' on 'HTMLTextAreaElement': parameter 2\"\n        });\n        args.push(curArg);\n      }\n      {\n        let curArg = arguments[2];\n        curArg = conversions[\"unsigned long\"](curArg, {\n          context: \"Failed to execute 'setRangeText' on 'HTMLTextAreaElement': parameter 3\"\n        });\n        args.push(curArg);\n      }\n      break;\n\n    default:\n      {\n        let curArg = arguments[0];\n        curArg = conversions[\"DOMString\"](curArg, {\n          context: \"Failed to execute 'setRangeText' on 'HTMLTextAreaElement': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      {\n        let curArg = arguments[1];\n        curArg = conversions[\"unsigned long\"](curArg, {\n          context: \"Failed to execute 'setRangeText' on 'HTMLTextAreaElement': parameter 2\"\n        });\n        args.push(curArg);\n      }\n      {\n        let curArg = arguments[2];\n        curArg = conversions[\"unsigned long\"](curArg, {\n          context: \"Failed to execute 'setRangeText' on 'HTMLTextAreaElement': parameter 3\"\n        });\n        args.push(curArg);\n      }\n      {\n        let curArg = arguments[3];\n\n        if (curArg !== undefined) {\n          curArg = convertSelectionMode(curArg, {\n            context: \"Failed to execute 'setRangeText' on 'HTMLTextAreaElement': parameter 4\"\n          });\n        } else {\n          curArg = \"preserve\";\n        }\n\n        args.push(curArg);\n      }\n  }\n\n  return this[impl].setRangeText(...args);\n};\n\nHTMLTextAreaElement.prototype.setSelectionRange = function setSelectionRange(start, end) {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 2) {\n    throw new TypeError(\"Failed to execute 'setSelectionRange' on 'HTMLTextAreaElement': 2 arguments required, but only \" + arguments.length + \" present.\");\n  }\n\n  const args = [];\n  {\n    let curArg = arguments[0];\n    curArg = conversions[\"unsigned long\"](curArg, {\n      context: \"Failed to execute 'setSelectionRange' on 'HTMLTextAreaElement': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  {\n    let curArg = arguments[1];\n    curArg = conversions[\"unsigned long\"](curArg, {\n      context: \"Failed to execute 'setSelectionRange' on 'HTMLTextAreaElement': parameter 2\"\n    });\n    args.push(curArg);\n  }\n  {\n    let curArg = arguments[2];\n\n    if (curArg !== undefined) {\n      curArg = conversions[\"DOMString\"](curArg, {\n        context: \"Failed to execute 'setSelectionRange' on 'HTMLTextAreaElement': parameter 3\"\n      });\n    }\n\n    args.push(curArg);\n  }\n  return this[impl].setSelectionRange(...args);\n};\n\nObject.defineProperty(HTMLTextAreaElement.prototype, \"autocomplete\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    const value = this.getAttribute(\"autocomplete\");\n    return value === null ? \"\" : value;\n  },\n\n  set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"DOMString\"](V, {\n      context: \"Failed to set the 'autocomplete' property on 'HTMLTextAreaElement': The provided value\"\n    });\n    this.setAttribute(\"autocomplete\", V);\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLTextAreaElement.prototype, \"autofocus\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this.hasAttribute(\"autofocus\");\n  },\n\n  set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"boolean\"](V, {\n      context: \"Failed to set the 'autofocus' property on 'HTMLTextAreaElement': The provided value\"\n    });\n\n    if (V) {\n      this.setAttribute(\"autofocus\", \"\");\n    } else {\n      this.removeAttribute(\"autofocus\");\n    }\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLTextAreaElement.prototype, \"cols\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"cols\"];\n  },\n\n  set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"unsigned long\"](V, {\n      context: \"Failed to set the 'cols' property on 'HTMLTextAreaElement': The provided value\"\n    });\n    this[impl][\"cols\"] = V;\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLTextAreaElement.prototype, \"dirName\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    const value = this.getAttribute(\"dirName\");\n    return value === null ? \"\" : value;\n  },\n\n  set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"DOMString\"](V, {\n      context: \"Failed to set the 'dirName' property on 'HTMLTextAreaElement': The provided value\"\n    });\n    this.setAttribute(\"dirName\", V);\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLTextAreaElement.prototype, \"disabled\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this.hasAttribute(\"disabled\");\n  },\n\n  set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"boolean\"](V, {\n      context: \"Failed to set the 'disabled' property on 'HTMLTextAreaElement': The provided value\"\n    });\n\n    if (V) {\n      this.setAttribute(\"disabled\", \"\");\n    } else {\n      this.removeAttribute(\"disabled\");\n    }\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLTextAreaElement.prototype, \"form\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"form\"]);\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLTextAreaElement.prototype, \"inputMode\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    const value = this.getAttribute(\"inputMode\");\n    return value === null ? \"\" : value;\n  },\n\n  set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"DOMString\"](V, {\n      context: \"Failed to set the 'inputMode' property on 'HTMLTextAreaElement': The provided value\"\n    });\n    this.setAttribute(\"inputMode\", V);\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLTextAreaElement.prototype, \"maxLength\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    const value = parseInt(this.getAttribute(\"maxLength\"));\n    return isNaN(value) || value < -2147483648 || value > 2147483647 ? 0 : value;\n  },\n\n  set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"long\"](V, {\n      context: \"Failed to set the 'maxLength' property on 'HTMLTextAreaElement': The provided value\"\n    });\n    this.setAttribute(\"maxLength\", String(V));\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLTextAreaElement.prototype, \"minLength\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    const value = parseInt(this.getAttribute(\"minLength\"));\n    return isNaN(value) || value < -2147483648 || value > 2147483647 ? 0 : value;\n  },\n\n  set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"long\"](V, {\n      context: \"Failed to set the 'minLength' property on 'HTMLTextAreaElement': The provided value\"\n    });\n    this.setAttribute(\"minLength\", String(V));\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLTextAreaElement.prototype, \"name\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    const value = this.getAttribute(\"name\");\n    return value === null ? \"\" : value;\n  },\n\n  set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"DOMString\"](V, {\n      context: \"Failed to set the 'name' property on 'HTMLTextAreaElement': The provided value\"\n    });\n    this.setAttribute(\"name\", V);\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLTextAreaElement.prototype, \"placeholder\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    const value = this.getAttribute(\"placeholder\");\n    return value === null ? \"\" : value;\n  },\n\n  set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"DOMString\"](V, {\n      context: \"Failed to set the 'placeholder' property on 'HTMLTextAreaElement': The provided value\"\n    });\n    this.setAttribute(\"placeholder\", V);\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLTextAreaElement.prototype, \"readOnly\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this.hasAttribute(\"readOnly\");\n  },\n\n  set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"boolean\"](V, {\n      context: \"Failed to set the 'readOnly' property on 'HTMLTextAreaElement': The provided value\"\n    });\n\n    if (V) {\n      this.setAttribute(\"readOnly\", \"\");\n    } else {\n      this.removeAttribute(\"readOnly\");\n    }\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLTextAreaElement.prototype, \"required\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this.hasAttribute(\"required\");\n  },\n\n  set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"boolean\"](V, {\n      context: \"Failed to set the 'required' property on 'HTMLTextAreaElement': The provided value\"\n    });\n\n    if (V) {\n      this.setAttribute(\"required\", \"\");\n    } else {\n      this.removeAttribute(\"required\");\n    }\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLTextAreaElement.prototype, \"rows\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"rows\"];\n  },\n\n  set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"unsigned long\"](V, {\n      context: \"Failed to set the 'rows' property on 'HTMLTextAreaElement': The provided value\"\n    });\n    this[impl][\"rows\"] = V;\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLTextAreaElement.prototype, \"wrap\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    const value = this.getAttribute(\"wrap\");\n    return value === null ? \"\" : value;\n  },\n\n  set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"DOMString\"](V, {\n      context: \"Failed to set the 'wrap' property on 'HTMLTextAreaElement': The provided value\"\n    });\n    this.setAttribute(\"wrap\", V);\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLTextAreaElement.prototype, \"type\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"type\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLTextAreaElement.prototype, \"defaultValue\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"defaultValue\"];\n  },\n\n  set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"DOMString\"](V, {\n      context: \"Failed to set the 'defaultValue' property on 'HTMLTextAreaElement': The provided value\"\n    });\n    this[impl][\"defaultValue\"] = V;\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLTextAreaElement.prototype, \"value\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"value\"];\n  },\n\n  set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"DOMString\"](V, {\n      context: \"Failed to set the 'value' property on 'HTMLTextAreaElement': The provided value\",\n      treatNullAsEmptyString: true\n    });\n    this[impl][\"value\"] = V;\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLTextAreaElement.prototype, \"textLength\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"textLength\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLTextAreaElement.prototype, \"willValidate\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"willValidate\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLTextAreaElement.prototype, \"validity\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"validity\"]);\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLTextAreaElement.prototype, \"validationMessage\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"validationMessage\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLTextAreaElement.prototype, \"labels\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"labels\"]);\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLTextAreaElement.prototype, \"selectionStart\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"selectionStart\"];\n  },\n\n  set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"unsigned long\"](V, {\n      context: \"Failed to set the 'selectionStart' property on 'HTMLTextAreaElement': The provided value\"\n    });\n    this[impl][\"selectionStart\"] = V;\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLTextAreaElement.prototype, \"selectionEnd\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"selectionEnd\"];\n  },\n\n  set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"unsigned long\"](V, {\n      context: \"Failed to set the 'selectionEnd' property on 'HTMLTextAreaElement': The provided value\"\n    });\n    this[impl][\"selectionEnd\"] = V;\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLTextAreaElement.prototype, \"selectionDirection\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"selectionDirection\"];\n  },\n\n  set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"DOMString\"](V, {\n      context: \"Failed to set the 'selectionDirection' property on 'HTMLTextAreaElement': The provided value\"\n    });\n    this[impl][\"selectionDirection\"] = V;\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLTextAreaElement.prototype, Symbol.toStringTag, {\n  value: \"HTMLTextAreaElement\",\n  writable: false,\n  enumerable: false,\n  configurable: true\n});\nconst iface = {\n  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`\n  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as\n  // implementing this mixin interface.\n  _mixedIntoPredicates: [],\n\n  is(obj) {\n    if (obj) {\n      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {\n        return true;\n      }\n\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(obj)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n\n  isImpl(obj) {\n    if (obj) {\n      if (obj instanceof Impl.implementation) {\n        return true;\n      }\n\n      const wrapper = utils.wrapperForImpl(obj);\n\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(wrapper)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n\n  convert(obj, {\n    context = \"The provided value\"\n  } = {}) {\n    if (module.exports.is(obj)) {\n      return utils.implForWrapper(obj);\n    }\n\n    throw new TypeError(\"\".concat(context, \" is not of type 'HTMLTextAreaElement'.\"));\n  },\n\n  create(constructorArgs, privateData) {\n    let obj = Object.create(HTMLTextAreaElement.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n\n  createImpl(constructorArgs, privateData) {\n    let obj = Object.create(HTMLTextAreaElement.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return utils.implForWrapper(obj);\n  },\n\n  _internalSetup(obj) {\n    HTMLElement._internalSetup(obj);\n  },\n\n  setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n    privateData.wrapper = obj;\n\n    this._internalSetup(obj);\n\n    Object.defineProperty(obj, impl, {\n      value: new Impl.implementation(constructorArgs, privateData),\n      writable: false,\n      enumerable: false,\n      configurable: true\n    });\n    obj[impl][utils.wrapperSymbol] = obj;\n\n    if (Impl.init) {\n      Impl.init(obj[impl], privateData);\n    }\n\n    return obj;\n  },\n\n  interface: HTMLTextAreaElement,\n  expose: {\n    Window: {\n      HTMLTextAreaElement\n    }\n  }\n}; // iface\n\nmodule.exports = iface;\n\nconst Impl = require(\"../nodes/HTMLTextAreaElement-impl.js\");","map":null,"metadata":{},"sourceType":"script"}