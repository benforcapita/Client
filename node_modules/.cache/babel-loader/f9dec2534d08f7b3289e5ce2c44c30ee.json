{"ast":null,"code":"\"use strict\";\n\nconst _require = require(\"../helpers/internal-constants\"),\n      domSymbolTree = _require.domSymbolTree;\n\nconst _require2 = require(\"../helpers/namespaces\"),\n      SVG_NS = _require2.SVG_NS;\n\nconst _require3 = require(\"../../utils\"),\n      mixin = _require3.mixin;\n\nconst SVGAnimatedString = require(\"../generated/SVGAnimatedString\");\n\nconst ElementImpl = require(\"./Element-impl\").implementation;\n\nconst ElementCSSInlineStyleImpl = require(\"./ElementCSSInlineStyle-impl\").implementation;\n\nconst GlobalEventHandlersImpl = require(\"./GlobalEventHandlers-impl\").implementation;\n\nconst HTMLAndSVGElementSharedImpl = require(\"./HTMLAndSVGElementShared-impl\").implementation;\n\nclass SVGElementImpl extends ElementImpl {\n  constructor(args, privateData) {\n    super(args, privateData);\n\n    this._initHTMLAndSVGElement();\n\n    this._initElementCSSInlineStyle();\n\n    this._initGlobalEvents();\n  }\n\n  get className() {\n    return SVGAnimatedString.createImpl([], {\n      element: this,\n      attribute: \"class\"\n    });\n  }\n\n  get ownerSVGElement() {\n    let e = domSymbolTree.parent(this);\n\n    while (e && e.namespaceURI === SVG_NS) {\n      if (e.localName === \"svg\") {\n        return e;\n      }\n\n      e = domSymbolTree.parent(e);\n    }\n\n    return null;\n  }\n\n  get viewportElement() {\n    // TODO: <symbol>/<use> may make this different from ownerSVGElement.\n    return this.ownerSVGElement;\n  }\n\n}\n\nSVGElementImpl.attributeRegistry = new Map();\nmixin(SVGElementImpl.prototype, ElementCSSInlineStyleImpl.prototype);\nmixin(SVGElementImpl.prototype, GlobalEventHandlersImpl.prototype);\nmixin(SVGElementImpl.prototype, HTMLAndSVGElementSharedImpl.prototype);\nexports.implementation = SVGElementImpl;","map":null,"metadata":{},"sourceType":"script"}