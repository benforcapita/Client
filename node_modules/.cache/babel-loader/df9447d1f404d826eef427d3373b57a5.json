{"ast":null,"code":"\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\n\nconst utils = require(\"./utils.js\");\n\nconst convertTextTrackKind = require(\"./TextTrackKind.js\").convert;\n\nconst impl = utils.implSymbol;\n\nconst HTMLElement = require(\"./HTMLElement.js\");\n\nfunction HTMLMediaElement() {\n  throw new TypeError(\"Illegal constructor\");\n}\n\nObject.setPrototypeOf(HTMLMediaElement.prototype, HTMLElement.interface.prototype);\nObject.setPrototypeOf(HTMLMediaElement, HTMLElement.interface);\nObject.defineProperty(HTMLMediaElement, \"prototype\", {\n  value: HTMLMediaElement.prototype,\n  writable: false,\n  enumerable: false,\n  configurable: false\n});\n\nHTMLMediaElement.prototype.load = function load() {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  return this[impl].load();\n};\n\nHTMLMediaElement.prototype.canPlayType = function canPlayType(type) {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'canPlayType' on 'HTMLMediaElement': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  const args = [];\n  {\n    let curArg = arguments[0];\n    curArg = conversions[\"DOMString\"](curArg, {\n      context: \"Failed to execute 'canPlayType' on 'HTMLMediaElement': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  return utils.tryWrapperForImpl(this[impl].canPlayType(...args));\n};\n\nHTMLMediaElement.prototype.play = function play() {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  return utils.tryWrapperForImpl(this[impl].play());\n};\n\nHTMLMediaElement.prototype.pause = function pause() {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  return this[impl].pause();\n};\n\nHTMLMediaElement.prototype.addTextTrack = function addTextTrack(kind) {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'addTextTrack' on 'HTMLMediaElement': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  const args = [];\n  {\n    let curArg = arguments[0];\n    curArg = convertTextTrackKind(curArg, {\n      context: \"Failed to execute 'addTextTrack' on 'HTMLMediaElement': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  {\n    let curArg = arguments[1];\n\n    if (curArg !== undefined) {\n      curArg = conversions[\"DOMString\"](curArg, {\n        context: \"Failed to execute 'addTextTrack' on 'HTMLMediaElement': parameter 2\"\n      });\n    } else {\n      curArg = \"\";\n    }\n\n    args.push(curArg);\n  }\n  {\n    let curArg = arguments[2];\n\n    if (curArg !== undefined) {\n      curArg = conversions[\"DOMString\"](curArg, {\n        context: \"Failed to execute 'addTextTrack' on 'HTMLMediaElement': parameter 3\"\n      });\n    } else {\n      curArg = \"\";\n    }\n\n    args.push(curArg);\n  }\n  return utils.tryWrapperForImpl(this[impl].addTextTrack(...args));\n};\n\nObject.defineProperty(HTMLMediaElement.prototype, \"src\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"src\"];\n  },\n\n  set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"USVString\"](V, {\n      context: \"Failed to set the 'src' property on 'HTMLMediaElement': The provided value\"\n    });\n    this[impl][\"src\"] = V;\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLMediaElement.prototype, \"currentSrc\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"currentSrc\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLMediaElement.prototype, \"crossOrigin\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    const value = this.getAttribute(\"crossOrigin\");\n    return value === null ? \"\" : value;\n  },\n\n  set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    if (V === null || V === undefined) {\n      V = null;\n    } else {\n      V = conversions[\"DOMString\"](V, {\n        context: \"Failed to set the 'crossOrigin' property on 'HTMLMediaElement': The provided value\"\n      });\n    }\n\n    this.setAttribute(\"crossOrigin\", V);\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLMediaElement.prototype, \"networkState\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"networkState\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLMediaElement.prototype, \"preload\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    const value = this.getAttribute(\"preload\");\n    return value === null ? \"\" : value;\n  },\n\n  set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"DOMString\"](V, {\n      context: \"Failed to set the 'preload' property on 'HTMLMediaElement': The provided value\"\n    });\n    this.setAttribute(\"preload\", V);\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLMediaElement.prototype, \"buffered\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"buffered\"]);\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLMediaElement.prototype, \"readyState\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"readyState\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLMediaElement.prototype, \"seeking\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"seeking\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLMediaElement.prototype, \"currentTime\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"currentTime\"];\n  },\n\n  set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"double\"](V, {\n      context: \"Failed to set the 'currentTime' property on 'HTMLMediaElement': The provided value\"\n    });\n    this[impl][\"currentTime\"] = V;\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLMediaElement.prototype, \"duration\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"duration\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLMediaElement.prototype, \"paused\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"paused\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLMediaElement.prototype, \"defaultPlaybackRate\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"defaultPlaybackRate\"];\n  },\n\n  set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"double\"](V, {\n      context: \"Failed to set the 'defaultPlaybackRate' property on 'HTMLMediaElement': The provided value\"\n    });\n    this[impl][\"defaultPlaybackRate\"] = V;\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLMediaElement.prototype, \"playbackRate\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"playbackRate\"];\n  },\n\n  set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"double\"](V, {\n      context: \"Failed to set the 'playbackRate' property on 'HTMLMediaElement': The provided value\"\n    });\n    this[impl][\"playbackRate\"] = V;\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLMediaElement.prototype, \"played\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"played\"]);\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLMediaElement.prototype, \"seekable\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"seekable\"]);\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLMediaElement.prototype, \"ended\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"ended\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLMediaElement.prototype, \"autoplay\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this.hasAttribute(\"autoplay\");\n  },\n\n  set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"boolean\"](V, {\n      context: \"Failed to set the 'autoplay' property on 'HTMLMediaElement': The provided value\"\n    });\n\n    if (V) {\n      this.setAttribute(\"autoplay\", \"\");\n    } else {\n      this.removeAttribute(\"autoplay\");\n    }\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLMediaElement.prototype, \"loop\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this.hasAttribute(\"loop\");\n  },\n\n  set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"boolean\"](V, {\n      context: \"Failed to set the 'loop' property on 'HTMLMediaElement': The provided value\"\n    });\n\n    if (V) {\n      this.setAttribute(\"loop\", \"\");\n    } else {\n      this.removeAttribute(\"loop\");\n    }\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLMediaElement.prototype, \"controls\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this.hasAttribute(\"controls\");\n  },\n\n  set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"boolean\"](V, {\n      context: \"Failed to set the 'controls' property on 'HTMLMediaElement': The provided value\"\n    });\n\n    if (V) {\n      this.setAttribute(\"controls\", \"\");\n    } else {\n      this.removeAttribute(\"controls\");\n    }\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLMediaElement.prototype, \"volume\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"volume\"];\n  },\n\n  set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"double\"](V, {\n      context: \"Failed to set the 'volume' property on 'HTMLMediaElement': The provided value\"\n    });\n    this[impl][\"volume\"] = V;\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLMediaElement.prototype, \"muted\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"muted\"];\n  },\n\n  set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"boolean\"](V, {\n      context: \"Failed to set the 'muted' property on 'HTMLMediaElement': The provided value\"\n    });\n    this[impl][\"muted\"] = V;\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLMediaElement.prototype, \"defaultMuted\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this.hasAttribute(\"muted\");\n  },\n\n  set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"boolean\"](V, {\n      context: \"Failed to set the 'defaultMuted' property on 'HTMLMediaElement': The provided value\"\n    });\n\n    if (V) {\n      this.setAttribute(\"muted\", \"\");\n    } else {\n      this.removeAttribute(\"muted\");\n    }\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLMediaElement.prototype, \"audioTracks\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.getSameObject(this, \"audioTracks\", () => {\n      return utils.tryWrapperForImpl(this[impl][\"audioTracks\"]);\n    });\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLMediaElement.prototype, \"videoTracks\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.getSameObject(this, \"videoTracks\", () => {\n      return utils.tryWrapperForImpl(this[impl][\"videoTracks\"]);\n    });\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLMediaElement.prototype, \"textTracks\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.getSameObject(this, \"textTracks\", () => {\n      return utils.tryWrapperForImpl(this[impl][\"textTracks\"]);\n    });\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(HTMLMediaElement, \"NETWORK_EMPTY\", {\n  value: 0,\n  enumerable: true\n});\nObject.defineProperty(HTMLMediaElement.prototype, \"NETWORK_EMPTY\", {\n  value: 0,\n  enumerable: true\n});\nObject.defineProperty(HTMLMediaElement, \"NETWORK_IDLE\", {\n  value: 1,\n  enumerable: true\n});\nObject.defineProperty(HTMLMediaElement.prototype, \"NETWORK_IDLE\", {\n  value: 1,\n  enumerable: true\n});\nObject.defineProperty(HTMLMediaElement, \"NETWORK_LOADING\", {\n  value: 2,\n  enumerable: true\n});\nObject.defineProperty(HTMLMediaElement.prototype, \"NETWORK_LOADING\", {\n  value: 2,\n  enumerable: true\n});\nObject.defineProperty(HTMLMediaElement, \"NETWORK_NO_SOURCE\", {\n  value: 3,\n  enumerable: true\n});\nObject.defineProperty(HTMLMediaElement.prototype, \"NETWORK_NO_SOURCE\", {\n  value: 3,\n  enumerable: true\n});\nObject.defineProperty(HTMLMediaElement, \"HAVE_NOTHING\", {\n  value: 0,\n  enumerable: true\n});\nObject.defineProperty(HTMLMediaElement.prototype, \"HAVE_NOTHING\", {\n  value: 0,\n  enumerable: true\n});\nObject.defineProperty(HTMLMediaElement, \"HAVE_METADATA\", {\n  value: 1,\n  enumerable: true\n});\nObject.defineProperty(HTMLMediaElement.prototype, \"HAVE_METADATA\", {\n  value: 1,\n  enumerable: true\n});\nObject.defineProperty(HTMLMediaElement, \"HAVE_CURRENT_DATA\", {\n  value: 2,\n  enumerable: true\n});\nObject.defineProperty(HTMLMediaElement.prototype, \"HAVE_CURRENT_DATA\", {\n  value: 2,\n  enumerable: true\n});\nObject.defineProperty(HTMLMediaElement, \"HAVE_FUTURE_DATA\", {\n  value: 3,\n  enumerable: true\n});\nObject.defineProperty(HTMLMediaElement.prototype, \"HAVE_FUTURE_DATA\", {\n  value: 3,\n  enumerable: true\n});\nObject.defineProperty(HTMLMediaElement, \"HAVE_ENOUGH_DATA\", {\n  value: 4,\n  enumerable: true\n});\nObject.defineProperty(HTMLMediaElement.prototype, \"HAVE_ENOUGH_DATA\", {\n  value: 4,\n  enumerable: true\n});\nObject.defineProperty(HTMLMediaElement.prototype, Symbol.toStringTag, {\n  value: \"HTMLMediaElement\",\n  writable: false,\n  enumerable: false,\n  configurable: true\n});\nconst iface = {\n  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`\n  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as\n  // implementing this mixin interface.\n  _mixedIntoPredicates: [],\n\n  is(obj) {\n    if (obj) {\n      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {\n        return true;\n      }\n\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(obj)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n\n  isImpl(obj) {\n    if (obj) {\n      if (obj instanceof Impl.implementation) {\n        return true;\n      }\n\n      const wrapper = utils.wrapperForImpl(obj);\n\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(wrapper)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n\n  convert(obj, {\n    context = \"The provided value\"\n  } = {}) {\n    if (module.exports.is(obj)) {\n      return utils.implForWrapper(obj);\n    }\n\n    throw new TypeError(\"\".concat(context, \" is not of type 'HTMLMediaElement'.\"));\n  },\n\n  create(constructorArgs, privateData) {\n    let obj = Object.create(HTMLMediaElement.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n\n  createImpl(constructorArgs, privateData) {\n    let obj = Object.create(HTMLMediaElement.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return utils.implForWrapper(obj);\n  },\n\n  _internalSetup(obj) {\n    HTMLElement._internalSetup(obj);\n  },\n\n  setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n    privateData.wrapper = obj;\n\n    this._internalSetup(obj);\n\n    Object.defineProperty(obj, impl, {\n      value: new Impl.implementation(constructorArgs, privateData),\n      writable: false,\n      enumerable: false,\n      configurable: true\n    });\n    obj[impl][utils.wrapperSymbol] = obj;\n\n    if (Impl.init) {\n      Impl.init(obj[impl], privateData);\n    }\n\n    return obj;\n  },\n\n  interface: HTMLMediaElement,\n  expose: {\n    Window: {\n      HTMLMediaElement\n    }\n  }\n}; // iface\n\nmodule.exports = iface;\n\nconst Impl = require(\"../nodes/HTMLMediaElement-impl.js\");","map":null,"metadata":{},"sourceType":"script"}