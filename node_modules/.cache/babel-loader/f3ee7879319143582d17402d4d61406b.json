{"ast":null,"code":"\"use strict\";\n\nconst path = require(\"path\");\n\nconst fs = require(\"pn/fs\");\n\nconst vm = require(\"vm\");\n\nconst toughCookie = require(\"tough-cookie\");\n\nconst request = require(\"request-promise-native\");\n\nconst sniffHTMLEncoding = require(\"html-encoding-sniffer\");\n\nconst whatwgURL = require(\"whatwg-url\");\n\nconst whatwgEncoding = require(\"whatwg-encoding\");\n\nconst _require = require(\"whatwg-url\"),\n      URL = _require.URL;\n\nconst MIMEType = require(\"whatwg-mimetype\");\n\nconst idlUtils = require(\"./jsdom/living/generated/utils.js\");\n\nconst VirtualConsole = require(\"./jsdom/virtual-console.js\");\n\nconst Window = require(\"./jsdom/browser/Window.js\");\n\nconst _require2 = require(\"./jsdom/browser/domtohtml.js\"),\n      domToHtml = _require2.domToHtml;\n\nconst _require3 = require(\"./jsdom/browser/documentfeatures.js\"),\n      applyDocumentFeatures = _require3.applyDocumentFeatures;\n\nconst _require4 = require(\"./jsdom/browser/resource-loader.js\"),\n      wrapCookieJarForRequest = _require4.wrapCookieJarForRequest;\n\nconst _require5 = require(\"../package.json\"),\n      packageVersion = _require5.version;\n\nconst DEFAULT_USER_AGENT = \"Mozilla/5.0 (\".concat(process.platform, \") AppleWebKit/537.36 (KHTML, like Gecko) \") + \"jsdom/\".concat(packageVersion); // This symbol allows us to smuggle a non-public option through to the JSDOM constructor, for use by JSDOM.fromURL.\n\nconst transportLayerEncodingLabelHiddenOption = Symbol(\"transportLayerEncodingLabel\");\n\nclass CookieJar extends toughCookie.CookieJar {\n  constructor(store, options) {\n    // jsdom cookie jars must be loose by default\n    super(store, Object.assign({\n      looseMode: true\n    }, options));\n  }\n\n}\n\nconst window = Symbol(\"window\");\nlet sharedFragmentDocument = null;\n\nclass JSDOM {\n  constructor(input, options = {}) {\n    const _normalizeHTML = normalizeHTML(input, options[transportLayerEncodingLabelHiddenOption]),\n          html = _normalizeHTML.html,\n          encoding = _normalizeHTML.encoding;\n\n    options = transformOptions(options, encoding);\n    this[window] = new Window(options.windowOptions); // TODO NEWAPI: the whole \"features\" infrastructure is horrible and should be re-built. When we switch to newapi\n    // wholesale, or perhaps before, we should re-do it. For now, just adapt the new, nice, public API into the old,\n    // ugly, internal API.\n\n    const features = {\n      FetchExternalResources: [],\n      SkipExternalResources: false\n    };\n\n    if (options.resources === \"usable\") {\n      features.FetchExternalResources = [\"link\", \"img\", \"frame\", \"iframe\"];\n\n      if (options.windowOptions.runScripts === \"dangerously\") {\n        features.FetchExternalResources.push(\"script\");\n      } // Note that \"img\" will be ignored by the code in HTMLImageElement-impl.js if canvas is not installed.\n      // TODO NEWAPI: clean that up and centralize the logic here.\n\n    }\n\n    const documentImpl = idlUtils.implForWrapper(this[window]._document);\n    applyDocumentFeatures(documentImpl, features);\n    options.beforeParse(this[window]._globalProxy); // TODO NEWAPI: this is still pretty hacky. It's also different than jsdom.jsdom. Does it work? Can it be better?\n\n    documentImpl._htmlToDom.appendToDocument(html, documentImpl);\n\n    documentImpl.close();\n  }\n\n  get window() {\n    // It's important to grab the global proxy, instead of just the result of `new Window(...)`, since otherwise things\n    // like `window.eval` don't exist.\n    return this[window]._globalProxy;\n  }\n\n  get virtualConsole() {\n    return this[window]._virtualConsole;\n  }\n\n  get cookieJar() {\n    // TODO NEWAPI move _cookieJar to window probably\n    return idlUtils.implForWrapper(this[window]._document)._cookieJar;\n  }\n\n  serialize() {\n    return domToHtml([idlUtils.implForWrapper(this[window]._document)]);\n  }\n\n  nodeLocation(node) {\n    if (!idlUtils.implForWrapper(this[window]._document)._parseOptions.locationInfo) {\n      throw new Error(\"Location information was not saved for this jsdom. Use includeNodeLocations during creation.\");\n    }\n\n    return idlUtils.implForWrapper(node).__location;\n  }\n\n  runVMScript(script) {\n    if (!vm.isContext(this[window])) {\n      throw new TypeError(\"This jsdom was not configured to allow script running. \" + \"Use the runScripts option during creation.\");\n    }\n\n    return script.runInContext(this[window]);\n  }\n\n  reconfigure(settings) {\n    if (\"windowTop\" in settings) {\n      this[window]._top = settings.windowTop;\n    }\n\n    if (\"url\" in settings) {\n      const document = idlUtils.implForWrapper(this[window]._document);\n      const url = whatwgURL.parseURL(settings.url);\n\n      if (url === null) {\n        throw new TypeError(\"Could not parse \\\"\".concat(settings.url, \"\\\" as a URL\"));\n      }\n\n      document._URL = url;\n      document.origin = whatwgURL.serializeURLOrigin(document._URL);\n    }\n  }\n\n  static fragment(string) {\n    if (!sharedFragmentDocument) {\n      sharedFragmentDocument = new JSDOM().window.document;\n    }\n\n    const template = sharedFragmentDocument.createElement(\"template\");\n    template.innerHTML = string;\n    return template.content;\n  }\n\n  static fromURL(url, options = {}) {\n    return Promise.resolve().then(() => {\n      const parsedURL = new URL(url);\n      url = parsedURL.href;\n      options = normalizeFromURLOptions(options);\n      const requestOptions = {\n        resolveWithFullResponse: true,\n        encoding: null,\n        // i.e., give me the raw Buffer\n        gzip: true,\n        headers: {\n          \"User-Agent\": options.userAgent,\n          Referer: options.referrer,\n          Accept: \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\",\n          \"Accept-Language\": \"en\"\n        },\n        jar: wrapCookieJarForRequest(options.cookieJar)\n      };\n      return request(url, requestOptions).then(res => {\n        let transportLayerEncodingLabel;\n\n        if (\"content-type\" in res.headers) {\n          const mimeType = new MIMEType(res.headers[\"content-type\"]);\n          transportLayerEncodingLabel = mimeType.parameters.get(\"charset\");\n        }\n\n        options = Object.assign(options, {\n          url: res.request.href + parsedURL.hash,\n          contentType: res.headers[\"content-type\"],\n          referrer: res.request.getHeader(\"referer\"),\n          [transportLayerEncodingLabelHiddenOption]: transportLayerEncodingLabel\n        });\n        return new JSDOM(res.body, options);\n      });\n    });\n  }\n\n  static fromFile(filename, options = {}) {\n    return Promise.resolve().then(() => {\n      options = normalizeFromFileOptions(filename, options);\n      return fs.readFile(filename).then(buffer => {\n        return new JSDOM(buffer, options);\n      });\n    });\n  }\n\n}\n\nfunction normalizeFromURLOptions(options) {\n  // Checks on options that are invalid for `fromURL`\n  if (options.url !== undefined) {\n    throw new TypeError(\"Cannot supply a url option when using fromURL\");\n  }\n\n  if (options.contentType !== undefined) {\n    throw new TypeError(\"Cannot supply a contentType option when using fromURL\");\n  } // Normalization of options which must be done before the rest of the fromURL code can use them, because they are\n  // given to request()\n\n\n  const normalized = Object.assign({}, options);\n\n  if (options.userAgent === undefined) {\n    normalized.userAgent = DEFAULT_USER_AGENT;\n  }\n\n  if (options.referrer !== undefined) {\n    normalized.referrer = new URL(options.referrer).href;\n  }\n\n  if (options.cookieJar === undefined) {\n    normalized.cookieJar = new CookieJar();\n  }\n\n  return normalized; // All other options don't need to be processed yet, and can be taken care of in the normal course of things when\n  // `fromURL` calls `new JSDOM(html, options)`.\n}\n\nfunction normalizeFromFileOptions(filename, options) {\n  const normalized = Object.assign({}, options);\n\n  if (normalized.contentType === undefined) {\n    const extname = path.extname(filename);\n\n    if (extname === \".xhtml\" || extname === \".xml\") {\n      normalized.contentType = \"application/xhtml+xml\";\n    }\n  }\n\n  if (normalized.url === undefined) {\n    normalized.url = new URL(\"file:\" + path.resolve(filename));\n  }\n\n  return normalized;\n}\n\nfunction transformOptions(options, encoding) {\n  const transformed = {\n    windowOptions: {\n      // Defaults\n      url: \"about:blank\",\n      referrer: \"\",\n      contentType: \"text/html\",\n      parsingMode: \"html\",\n      userAgent: DEFAULT_USER_AGENT,\n      parseOptions: {\n        locationInfo: false\n      },\n      runScripts: undefined,\n      encoding,\n      pretendToBeVisual: false,\n      storageQuota: 5000000,\n      // Defaults filled in later\n      virtualConsole: undefined,\n      cookieJar: undefined\n    },\n    // Defaults\n    resources: undefined,\n\n    beforeParse() {}\n\n  };\n\n  if (options.contentType !== undefined) {\n    const mimeType = new MIMEType(options.contentType);\n\n    if (!mimeType.isHTML() && !mimeType.isXML()) {\n      throw new RangeError(\"The given content type of \\\"\".concat(options.contentType, \"\\\" was not a HTML or XML content type\"));\n    }\n\n    transformed.windowOptions.contentType = mimeType.essence;\n    transformed.windowOptions.parsingMode = mimeType.isHTML() ? \"html\" : \"xml\";\n  }\n\n  if (options.url !== undefined) {\n    transformed.windowOptions.url = new URL(options.url).href;\n  }\n\n  if (options.referrer !== undefined) {\n    transformed.windowOptions.referrer = new URL(options.referrer).href;\n  }\n\n  if (options.userAgent !== undefined) {\n    transformed.windowOptions.userAgent = String(options.userAgent);\n  }\n\n  if (options.includeNodeLocations) {\n    if (transformed.windowOptions.parsingMode === \"xml\") {\n      throw new TypeError(\"Cannot set includeNodeLocations to true with an XML content type\");\n    }\n\n    transformed.windowOptions.parseOptions = {\n      locationInfo: true\n    };\n  }\n\n  transformed.windowOptions.cookieJar = options.cookieJar === undefined ? new CookieJar() : options.cookieJar;\n  transformed.windowOptions.virtualConsole = options.virtualConsole === undefined ? new VirtualConsole().sendTo(console) : options.virtualConsole;\n\n  if (options.resources !== undefined) {\n    transformed.resources = String(options.resources);\n\n    if (transformed.resources !== \"usable\") {\n      throw new RangeError(\"resources must be undefined or \\\"usable\\\"\");\n    }\n  }\n\n  if (options.runScripts !== undefined) {\n    transformed.windowOptions.runScripts = String(options.runScripts);\n\n    if (transformed.windowOptions.runScripts !== \"dangerously\" && transformed.windowOptions.runScripts !== \"outside-only\") {\n      throw new RangeError(\"runScripts must be undefined, \\\"dangerously\\\", or \\\"outside-only\\\"\");\n    }\n  }\n\n  if (options.beforeParse !== undefined) {\n    transformed.beforeParse = options.beforeParse;\n  }\n\n  if (options.pretendToBeVisual !== undefined) {\n    transformed.windowOptions.pretendToBeVisual = Boolean(options.pretendToBeVisual);\n  }\n\n  if (options.storageQuota !== undefined) {\n    transformed.windowOptions.storageQuota = Number(options.storageQuota);\n  } // concurrentNodeIterators??\n\n\n  return transformed;\n}\n\nfunction normalizeHTML(html = \"\", transportLayerEncodingLabel) {\n  let encoding = \"UTF-8\";\n\n  if (ArrayBuffer.isView(html)) {\n    html = Buffer.from(html.buffer, html.byteOffset, html.byteLength);\n  } else if (html instanceof ArrayBuffer) {\n    html = Buffer.from(html);\n  }\n\n  if (Buffer.isBuffer(html)) {\n    encoding = sniffHTMLEncoding(html, {\n      defaultEncoding: \"windows-1252\",\n      transportLayerEncodingLabel\n    });\n    html = whatwgEncoding.decode(html, encoding);\n  } else {\n    html = String(html);\n  }\n\n  return {\n    html,\n    encoding\n  };\n}\n\nexports.JSDOM = JSDOM;\nexports.VirtualConsole = VirtualConsole;\nexports.CookieJar = CookieJar;\nexports.toughCookie = toughCookie;","map":null,"metadata":{},"sourceType":"script"}