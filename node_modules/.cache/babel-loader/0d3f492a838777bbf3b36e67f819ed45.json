{"ast":null,"code":"\"use strict\";\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nconst _require = require(\"../helpers/traversal\"),\n      closest = _require.closest;\n\nconst _require2 = require(\"../helpers/form-controls\"),\n      isDisabled = _require2.isDisabled;\n\nconst DefaultConstraintValidationImpl = require(\"../constraint-validation/DefaultConstraintValidation-impl\").implementation;\n\nconst _require3 = require(\"../../utils\"),\n      mixin = _require3.mixin;\n\nconst _require4 = require(\"../helpers/form-controls\"),\n      getLabelsForLabelable = _require4.getLabelsForLabelable;\n\nclass HTMLButtonElementImpl extends HTMLElementImpl {\n  constructor(args, privateData) {\n    super(args, privateData);\n    this._customValidityErrorMessage = \"\";\n    this._labels = null;\n  }\n\n  _activationBehavior() {\n    const form = this.form;\n\n    if (form) {\n      if (this.type === \"submit\" && !isDisabled(this)) {\n        form._doSubmit();\n      }\n    }\n  }\n\n  _getValue() {\n    const valueAttr = this.getAttribute(\"value\");\n    return valueAttr === null ? \"\" : valueAttr;\n  }\n\n  get labels() {\n    return getLabelsForLabelable(this);\n  }\n\n  get form() {\n    return closest(this, \"form\");\n  }\n\n  get type() {\n    const typeAttr = (this.getAttribute(\"type\") || \"\").toLowerCase();\n\n    switch (typeAttr) {\n      case \"submit\":\n      case \"reset\":\n      case \"button\":\n        return typeAttr;\n\n      default:\n        return \"submit\";\n    }\n  }\n\n  set type(v) {\n    v = String(v).toLowerCase();\n\n    switch (v) {\n      case \"submit\":\n      case \"reset\":\n      case \"button\":\n        this.setAttribute(\"type\", v);\n        break;\n\n      default:\n        this.setAttribute(\"type\", \"submit\");\n        break;\n    }\n  }\n\n  _barredFromConstraintValidationSpecialization() {\n    return this.type === \"reset\" || this.type === \"button\";\n  }\n\n}\n\nmixin(HTMLButtonElementImpl.prototype, DefaultConstraintValidationImpl.prototype);\nmodule.exports = {\n  implementation: HTMLButtonElementImpl\n};","map":null,"metadata":{},"sourceType":"script"}