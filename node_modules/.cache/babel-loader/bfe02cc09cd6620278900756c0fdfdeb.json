{"ast":null,"code":"\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\n\nconst utils = require(\"./utils.js\");\n\nconst impl = utils.implSymbol;\n\nfunction Location() {\n  throw new TypeError(\"Illegal constructor\");\n}\n\nObject.defineProperty(Location, \"prototype\", {\n  value: Location.prototype,\n  writable: false,\n  enumerable: false,\n  configurable: false\n});\nObject.defineProperty(Location.prototype, Symbol.toStringTag, {\n  value: \"Location\",\n  writable: false,\n  enumerable: false,\n  configurable: true\n});\nconst iface = {\n  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`\n  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as\n  // implementing this mixin interface.\n  _mixedIntoPredicates: [],\n\n  is(obj) {\n    if (obj) {\n      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {\n        return true;\n      }\n\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(obj)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n\n  isImpl(obj) {\n    if (obj) {\n      if (obj instanceof Impl.implementation) {\n        return true;\n      }\n\n      const wrapper = utils.wrapperForImpl(obj);\n\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(wrapper)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n\n  convert(obj, {\n    context = \"The provided value\"\n  } = {}) {\n    if (module.exports.is(obj)) {\n      return utils.implForWrapper(obj);\n    }\n\n    throw new TypeError(\"\".concat(context, \" is not of type 'Location'.\"));\n  },\n\n  create(constructorArgs, privateData) {\n    let obj = Object.create(Location.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n\n  createImpl(constructorArgs, privateData) {\n    let obj = Object.create(Location.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return utils.implForWrapper(obj);\n  },\n\n  _internalSetup(obj) {\n    obj.assign = function assign(url) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (arguments.length < 1) {\n        throw new TypeError(\"Failed to execute 'assign' on 'Location': 1 argument required, but only \" + arguments.length + \" present.\");\n      }\n\n      const args = [];\n      {\n        let curArg = arguments[0];\n        curArg = conversions[\"USVString\"](curArg, {\n          context: \"Failed to execute 'assign' on 'Location': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      return this[impl].assign(...args);\n    };\n\n    obj.replace = function replace(url) {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (arguments.length < 1) {\n        throw new TypeError(\"Failed to execute 'replace' on 'Location': 1 argument required, but only \" + arguments.length + \" present.\");\n      }\n\n      const args = [];\n      {\n        let curArg = arguments[0];\n        curArg = conversions[\"USVString\"](curArg, {\n          context: \"Failed to execute 'replace' on 'Location': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      return this[impl].replace(...args);\n    };\n\n    obj.reload = function reload() {\n      if (!this || !module.exports.is(this)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return this[impl].reload();\n    };\n\n    Object.defineProperty(obj, \"href\", {\n      get() {\n        if (!this || !module.exports.is(this)) {\n          throw new TypeError(\"Illegal invocation\");\n        }\n\n        return obj[impl][\"href\"];\n      },\n\n      set(V) {\n        if (!this || !module.exports.is(this)) {\n          throw new TypeError(\"Illegal invocation\");\n        }\n\n        V = conversions[\"USVString\"](V, {\n          context: \"Failed to set the 'href' property on 'Location': The provided value\"\n        });\n        obj[impl][\"href\"] = V;\n      },\n\n      enumerable: true,\n      configurable: false\n    });\n    Object.defineProperty(obj, \"toString\", {\n      writable: false,\n      enumerable: true,\n      configurable: false,\n      value: function toString() {\n        if (!this || !module.exports.is(this)) {\n          throw new TypeError(\"Illegal invocation\");\n        }\n\n        return obj[impl][\"href\"];\n      }\n    });\n    Object.defineProperty(obj, \"origin\", {\n      get() {\n        if (!this || !module.exports.is(this)) {\n          throw new TypeError(\"Illegal invocation\");\n        }\n\n        return obj[impl][\"origin\"];\n      },\n\n      enumerable: true,\n      configurable: false\n    });\n    Object.defineProperty(obj, \"protocol\", {\n      get() {\n        if (!this || !module.exports.is(this)) {\n          throw new TypeError(\"Illegal invocation\");\n        }\n\n        return obj[impl][\"protocol\"];\n      },\n\n      set(V) {\n        if (!this || !module.exports.is(this)) {\n          throw new TypeError(\"Illegal invocation\");\n        }\n\n        V = conversions[\"USVString\"](V, {\n          context: \"Failed to set the 'protocol' property on 'Location': The provided value\"\n        });\n        obj[impl][\"protocol\"] = V;\n      },\n\n      enumerable: true,\n      configurable: false\n    });\n    Object.defineProperty(obj, \"host\", {\n      get() {\n        if (!this || !module.exports.is(this)) {\n          throw new TypeError(\"Illegal invocation\");\n        }\n\n        return obj[impl][\"host\"];\n      },\n\n      set(V) {\n        if (!this || !module.exports.is(this)) {\n          throw new TypeError(\"Illegal invocation\");\n        }\n\n        V = conversions[\"USVString\"](V, {\n          context: \"Failed to set the 'host' property on 'Location': The provided value\"\n        });\n        obj[impl][\"host\"] = V;\n      },\n\n      enumerable: true,\n      configurable: false\n    });\n    Object.defineProperty(obj, \"hostname\", {\n      get() {\n        if (!this || !module.exports.is(this)) {\n          throw new TypeError(\"Illegal invocation\");\n        }\n\n        return obj[impl][\"hostname\"];\n      },\n\n      set(V) {\n        if (!this || !module.exports.is(this)) {\n          throw new TypeError(\"Illegal invocation\");\n        }\n\n        V = conversions[\"USVString\"](V, {\n          context: \"Failed to set the 'hostname' property on 'Location': The provided value\"\n        });\n        obj[impl][\"hostname\"] = V;\n      },\n\n      enumerable: true,\n      configurable: false\n    });\n    Object.defineProperty(obj, \"port\", {\n      get() {\n        if (!this || !module.exports.is(this)) {\n          throw new TypeError(\"Illegal invocation\");\n        }\n\n        return obj[impl][\"port\"];\n      },\n\n      set(V) {\n        if (!this || !module.exports.is(this)) {\n          throw new TypeError(\"Illegal invocation\");\n        }\n\n        V = conversions[\"USVString\"](V, {\n          context: \"Failed to set the 'port' property on 'Location': The provided value\"\n        });\n        obj[impl][\"port\"] = V;\n      },\n\n      enumerable: true,\n      configurable: false\n    });\n    Object.defineProperty(obj, \"pathname\", {\n      get() {\n        if (!this || !module.exports.is(this)) {\n          throw new TypeError(\"Illegal invocation\");\n        }\n\n        return obj[impl][\"pathname\"];\n      },\n\n      set(V) {\n        if (!this || !module.exports.is(this)) {\n          throw new TypeError(\"Illegal invocation\");\n        }\n\n        V = conversions[\"USVString\"](V, {\n          context: \"Failed to set the 'pathname' property on 'Location': The provided value\"\n        });\n        obj[impl][\"pathname\"] = V;\n      },\n\n      enumerable: true,\n      configurable: false\n    });\n    Object.defineProperty(obj, \"search\", {\n      get() {\n        if (!this || !module.exports.is(this)) {\n          throw new TypeError(\"Illegal invocation\");\n        }\n\n        return obj[impl][\"search\"];\n      },\n\n      set(V) {\n        if (!this || !module.exports.is(this)) {\n          throw new TypeError(\"Illegal invocation\");\n        }\n\n        V = conversions[\"USVString\"](V, {\n          context: \"Failed to set the 'search' property on 'Location': The provided value\"\n        });\n        obj[impl][\"search\"] = V;\n      },\n\n      enumerable: true,\n      configurable: false\n    });\n    Object.defineProperty(obj, \"hash\", {\n      get() {\n        if (!this || !module.exports.is(this)) {\n          throw new TypeError(\"Illegal invocation\");\n        }\n\n        return obj[impl][\"hash\"];\n      },\n\n      set(V) {\n        if (!this || !module.exports.is(this)) {\n          throw new TypeError(\"Illegal invocation\");\n        }\n\n        V = conversions[\"USVString\"](V, {\n          context: \"Failed to set the 'hash' property on 'Location': The provided value\"\n        });\n        obj[impl][\"hash\"] = V;\n      },\n\n      enumerable: true,\n      configurable: false\n    });\n  },\n\n  setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n    privateData.wrapper = obj;\n\n    this._internalSetup(obj);\n\n    Object.defineProperty(obj, impl, {\n      value: new Impl.implementation(constructorArgs, privateData),\n      writable: false,\n      enumerable: false,\n      configurable: true\n    });\n    obj[impl][utils.wrapperSymbol] = obj;\n\n    if (Impl.init) {\n      Impl.init(obj[impl], privateData);\n    }\n\n    return obj;\n  },\n\n  interface: Location,\n  expose: {\n    Window: {\n      Location\n    }\n  }\n}; // iface\n\nmodule.exports = iface;\n\nconst Impl = require(\"../window/Location-impl.js\");","map":null,"metadata":{},"sourceType":"script"}