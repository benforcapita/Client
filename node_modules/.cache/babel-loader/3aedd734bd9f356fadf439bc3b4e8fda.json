{"ast":null,"code":"\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\n\nconst utils = require(\"./utils.js\");\n\nconst convertAttr = require(\"./Attr.js\").convert;\n\nconst isNode = require(\"./Node.js\").is;\n\nconst impl = utils.implSymbol;\n\nconst Node = require(\"./Node.js\");\n\nconst ChildNode = require(\"./ChildNode.js\");\n\nconst NonDocumentTypeChildNode = require(\"./NonDocumentTypeChildNode.js\");\n\nconst ParentNode = require(\"./ParentNode.js\");\n\nfunction Element() {\n  throw new TypeError(\"Illegal constructor\");\n}\n\nObject.setPrototypeOf(Element.prototype, Node.interface.prototype);\nObject.setPrototypeOf(Element, Node.interface);\nObject.defineProperty(Element, \"prototype\", {\n  value: Element.prototype,\n  writable: false,\n  enumerable: false,\n  configurable: false\n});\n\nElement.prototype.hasAttributes = function hasAttributes() {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  return this[impl].hasAttributes();\n};\n\nElement.prototype.getAttributeNames = function getAttributeNames() {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  return utils.tryWrapperForImpl(this[impl].getAttributeNames());\n};\n\nElement.prototype.getAttribute = function getAttribute(qualifiedName) {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'getAttribute' on 'Element': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  const args = [];\n  {\n    let curArg = arguments[0];\n    curArg = conversions[\"DOMString\"](curArg, {\n      context: \"Failed to execute 'getAttribute' on 'Element': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  return this[impl].getAttribute(...args);\n};\n\nElement.prototype.getAttributeNS = function getAttributeNS(namespace, localName) {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 2) {\n    throw new TypeError(\"Failed to execute 'getAttributeNS' on 'Element': 2 arguments required, but only \" + arguments.length + \" present.\");\n  }\n\n  const args = [];\n  {\n    let curArg = arguments[0];\n\n    if (curArg === null || curArg === undefined) {\n      curArg = null;\n    } else {\n      curArg = conversions[\"DOMString\"](curArg, {\n        context: \"Failed to execute 'getAttributeNS' on 'Element': parameter 1\"\n      });\n    }\n\n    args.push(curArg);\n  }\n  {\n    let curArg = arguments[1];\n    curArg = conversions[\"DOMString\"](curArg, {\n      context: \"Failed to execute 'getAttributeNS' on 'Element': parameter 2\"\n    });\n    args.push(curArg);\n  }\n  return this[impl].getAttributeNS(...args);\n};\n\nElement.prototype.setAttribute = function setAttribute(qualifiedName, value) {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 2) {\n    throw new TypeError(\"Failed to execute 'setAttribute' on 'Element': 2 arguments required, but only \" + arguments.length + \" present.\");\n  }\n\n  const args = [];\n  {\n    let curArg = arguments[0];\n    curArg = conversions[\"DOMString\"](curArg, {\n      context: \"Failed to execute 'setAttribute' on 'Element': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  {\n    let curArg = arguments[1];\n    curArg = conversions[\"DOMString\"](curArg, {\n      context: \"Failed to execute 'setAttribute' on 'Element': parameter 2\"\n    });\n    args.push(curArg);\n  }\n  return this[impl].setAttribute(...args);\n};\n\nElement.prototype.setAttributeNS = function setAttributeNS(namespace, qualifiedName, value) {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 3) {\n    throw new TypeError(\"Failed to execute 'setAttributeNS' on 'Element': 3 arguments required, but only \" + arguments.length + \" present.\");\n  }\n\n  const args = [];\n  {\n    let curArg = arguments[0];\n\n    if (curArg === null || curArg === undefined) {\n      curArg = null;\n    } else {\n      curArg = conversions[\"DOMString\"](curArg, {\n        context: \"Failed to execute 'setAttributeNS' on 'Element': parameter 1\"\n      });\n    }\n\n    args.push(curArg);\n  }\n  {\n    let curArg = arguments[1];\n    curArg = conversions[\"DOMString\"](curArg, {\n      context: \"Failed to execute 'setAttributeNS' on 'Element': parameter 2\"\n    });\n    args.push(curArg);\n  }\n  {\n    let curArg = arguments[2];\n    curArg = conversions[\"DOMString\"](curArg, {\n      context: \"Failed to execute 'setAttributeNS' on 'Element': parameter 3\"\n    });\n    args.push(curArg);\n  }\n  return this[impl].setAttributeNS(...args);\n};\n\nElement.prototype.removeAttribute = function removeAttribute(qualifiedName) {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'removeAttribute' on 'Element': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  const args = [];\n  {\n    let curArg = arguments[0];\n    curArg = conversions[\"DOMString\"](curArg, {\n      context: \"Failed to execute 'removeAttribute' on 'Element': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  return this[impl].removeAttribute(...args);\n};\n\nElement.prototype.removeAttributeNS = function removeAttributeNS(namespace, localName) {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 2) {\n    throw new TypeError(\"Failed to execute 'removeAttributeNS' on 'Element': 2 arguments required, but only \" + arguments.length + \" present.\");\n  }\n\n  const args = [];\n  {\n    let curArg = arguments[0];\n\n    if (curArg === null || curArg === undefined) {\n      curArg = null;\n    } else {\n      curArg = conversions[\"DOMString\"](curArg, {\n        context: \"Failed to execute 'removeAttributeNS' on 'Element': parameter 1\"\n      });\n    }\n\n    args.push(curArg);\n  }\n  {\n    let curArg = arguments[1];\n    curArg = conversions[\"DOMString\"](curArg, {\n      context: \"Failed to execute 'removeAttributeNS' on 'Element': parameter 2\"\n    });\n    args.push(curArg);\n  }\n  return this[impl].removeAttributeNS(...args);\n};\n\nElement.prototype.hasAttribute = function hasAttribute(qualifiedName) {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'hasAttribute' on 'Element': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  const args = [];\n  {\n    let curArg = arguments[0];\n    curArg = conversions[\"DOMString\"](curArg, {\n      context: \"Failed to execute 'hasAttribute' on 'Element': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  return this[impl].hasAttribute(...args);\n};\n\nElement.prototype.hasAttributeNS = function hasAttributeNS(namespace, localName) {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 2) {\n    throw new TypeError(\"Failed to execute 'hasAttributeNS' on 'Element': 2 arguments required, but only \" + arguments.length + \" present.\");\n  }\n\n  const args = [];\n  {\n    let curArg = arguments[0];\n\n    if (curArg === null || curArg === undefined) {\n      curArg = null;\n    } else {\n      curArg = conversions[\"DOMString\"](curArg, {\n        context: \"Failed to execute 'hasAttributeNS' on 'Element': parameter 1\"\n      });\n    }\n\n    args.push(curArg);\n  }\n  {\n    let curArg = arguments[1];\n    curArg = conversions[\"DOMString\"](curArg, {\n      context: \"Failed to execute 'hasAttributeNS' on 'Element': parameter 2\"\n    });\n    args.push(curArg);\n  }\n  return this[impl].hasAttributeNS(...args);\n};\n\nElement.prototype.getAttributeNode = function getAttributeNode(qualifiedName) {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'getAttributeNode' on 'Element': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  const args = [];\n  {\n    let curArg = arguments[0];\n    curArg = conversions[\"DOMString\"](curArg, {\n      context: \"Failed to execute 'getAttributeNode' on 'Element': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  return utils.tryWrapperForImpl(this[impl].getAttributeNode(...args));\n};\n\nElement.prototype.getAttributeNodeNS = function getAttributeNodeNS(namespace, localName) {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 2) {\n    throw new TypeError(\"Failed to execute 'getAttributeNodeNS' on 'Element': 2 arguments required, but only \" + arguments.length + \" present.\");\n  }\n\n  const args = [];\n  {\n    let curArg = arguments[0];\n\n    if (curArg === null || curArg === undefined) {\n      curArg = null;\n    } else {\n      curArg = conversions[\"DOMString\"](curArg, {\n        context: \"Failed to execute 'getAttributeNodeNS' on 'Element': parameter 1\"\n      });\n    }\n\n    args.push(curArg);\n  }\n  {\n    let curArg = arguments[1];\n    curArg = conversions[\"DOMString\"](curArg, {\n      context: \"Failed to execute 'getAttributeNodeNS' on 'Element': parameter 2\"\n    });\n    args.push(curArg);\n  }\n  return utils.tryWrapperForImpl(this[impl].getAttributeNodeNS(...args));\n};\n\nElement.prototype.setAttributeNode = function setAttributeNode(attr) {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'setAttributeNode' on 'Element': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  const args = [];\n  {\n    let curArg = arguments[0];\n    curArg = convertAttr(curArg, {\n      context: \"Failed to execute 'setAttributeNode' on 'Element': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  return utils.tryWrapperForImpl(this[impl].setAttributeNode(...args));\n};\n\nElement.prototype.setAttributeNodeNS = function setAttributeNodeNS(attr) {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'setAttributeNodeNS' on 'Element': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  const args = [];\n  {\n    let curArg = arguments[0];\n    curArg = convertAttr(curArg, {\n      context: \"Failed to execute 'setAttributeNodeNS' on 'Element': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  return utils.tryWrapperForImpl(this[impl].setAttributeNodeNS(...args));\n};\n\nElement.prototype.removeAttributeNode = function removeAttributeNode(attr) {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'removeAttributeNode' on 'Element': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  const args = [];\n  {\n    let curArg = arguments[0];\n    curArg = convertAttr(curArg, {\n      context: \"Failed to execute 'removeAttributeNode' on 'Element': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  return utils.tryWrapperForImpl(this[impl].removeAttributeNode(...args));\n};\n\nElement.prototype.closest = function closest(selectors) {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'closest' on 'Element': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  const args = [];\n  {\n    let curArg = arguments[0];\n    curArg = conversions[\"DOMString\"](curArg, {\n      context: \"Failed to execute 'closest' on 'Element': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  return utils.tryWrapperForImpl(this[impl].closest(...args));\n};\n\nElement.prototype.matches = function matches(selectors) {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'matches' on 'Element': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  const args = [];\n  {\n    let curArg = arguments[0];\n    curArg = conversions[\"DOMString\"](curArg, {\n      context: \"Failed to execute 'matches' on 'Element': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  return this[impl].matches(...args);\n};\n\nElement.prototype.webkitMatchesSelector = function webkitMatchesSelector(selectors) {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'webkitMatchesSelector' on 'Element': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  const args = [];\n  {\n    let curArg = arguments[0];\n    curArg = conversions[\"DOMString\"](curArg, {\n      context: \"Failed to execute 'webkitMatchesSelector' on 'Element': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  return this[impl].webkitMatchesSelector(...args);\n};\n\nElement.prototype.getElementsByTagName = function getElementsByTagName(qualifiedName) {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'getElementsByTagName' on 'Element': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  const args = [];\n  {\n    let curArg = arguments[0];\n    curArg = conversions[\"DOMString\"](curArg, {\n      context: \"Failed to execute 'getElementsByTagName' on 'Element': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  return utils.tryWrapperForImpl(this[impl].getElementsByTagName(...args));\n};\n\nElement.prototype.getElementsByTagNameNS = function getElementsByTagNameNS(namespace, localName) {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 2) {\n    throw new TypeError(\"Failed to execute 'getElementsByTagNameNS' on 'Element': 2 arguments required, but only \" + arguments.length + \" present.\");\n  }\n\n  const args = [];\n  {\n    let curArg = arguments[0];\n\n    if (curArg === null || curArg === undefined) {\n      curArg = null;\n    } else {\n      curArg = conversions[\"DOMString\"](curArg, {\n        context: \"Failed to execute 'getElementsByTagNameNS' on 'Element': parameter 1\"\n      });\n    }\n\n    args.push(curArg);\n  }\n  {\n    let curArg = arguments[1];\n    curArg = conversions[\"DOMString\"](curArg, {\n      context: \"Failed to execute 'getElementsByTagNameNS' on 'Element': parameter 2\"\n    });\n    args.push(curArg);\n  }\n  return utils.tryWrapperForImpl(this[impl].getElementsByTagNameNS(...args));\n};\n\nElement.prototype.getElementsByClassName = function getElementsByClassName(classNames) {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'getElementsByClassName' on 'Element': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  const args = [];\n  {\n    let curArg = arguments[0];\n    curArg = conversions[\"DOMString\"](curArg, {\n      context: \"Failed to execute 'getElementsByClassName' on 'Element': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  return utils.tryWrapperForImpl(this[impl].getElementsByClassName(...args));\n};\n\nElement.prototype.insertAdjacentHTML = function insertAdjacentHTML(position, text) {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 2) {\n    throw new TypeError(\"Failed to execute 'insertAdjacentHTML' on 'Element': 2 arguments required, but only \" + arguments.length + \" present.\");\n  }\n\n  const args = [];\n  {\n    let curArg = arguments[0];\n    curArg = conversions[\"DOMString\"](curArg, {\n      context: \"Failed to execute 'insertAdjacentHTML' on 'Element': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  {\n    let curArg = arguments[1];\n    curArg = conversions[\"DOMString\"](curArg, {\n      context: \"Failed to execute 'insertAdjacentHTML' on 'Element': parameter 2\"\n    });\n    args.push(curArg);\n  }\n  return this[impl].insertAdjacentHTML(...args);\n};\n\nElement.prototype.getClientRects = function getClientRects() {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  return utils.tryWrapperForImpl(this[impl].getClientRects());\n};\n\nElement.prototype.getBoundingClientRect = function getBoundingClientRect() {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  return utils.tryWrapperForImpl(this[impl].getBoundingClientRect());\n};\n\nElement.prototype.before = function before() {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  const args = [];\n\n  for (let i = 0; i < arguments.length; i++) {\n    let curArg = arguments[i];\n\n    if (isNode(curArg)) {\n      curArg = utils.implForWrapper(curArg);\n    } else {\n      curArg = conversions[\"DOMString\"](curArg, {\n        context: \"Failed to execute 'before' on 'Element': parameter \" + (i + 1)\n      });\n    }\n\n    args.push(curArg);\n  }\n\n  return this[impl].before(...args);\n};\n\nElement.prototype.after = function after() {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  const args = [];\n\n  for (let i = 0; i < arguments.length; i++) {\n    let curArg = arguments[i];\n\n    if (isNode(curArg)) {\n      curArg = utils.implForWrapper(curArg);\n    } else {\n      curArg = conversions[\"DOMString\"](curArg, {\n        context: \"Failed to execute 'after' on 'Element': parameter \" + (i + 1)\n      });\n    }\n\n    args.push(curArg);\n  }\n\n  return this[impl].after(...args);\n};\n\nElement.prototype.replaceWith = function replaceWith() {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  const args = [];\n\n  for (let i = 0; i < arguments.length; i++) {\n    let curArg = arguments[i];\n\n    if (isNode(curArg)) {\n      curArg = utils.implForWrapper(curArg);\n    } else {\n      curArg = conversions[\"DOMString\"](curArg, {\n        context: \"Failed to execute 'replaceWith' on 'Element': parameter \" + (i + 1)\n      });\n    }\n\n    args.push(curArg);\n  }\n\n  return this[impl].replaceWith(...args);\n};\n\nElement.prototype.remove = function remove() {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  return this[impl].remove();\n};\n\nElement.prototype.prepend = function prepend() {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  const args = [];\n\n  for (let i = 0; i < arguments.length; i++) {\n    let curArg = arguments[i];\n\n    if (isNode(curArg)) {\n      curArg = utils.implForWrapper(curArg);\n    } else {\n      curArg = conversions[\"DOMString\"](curArg, {\n        context: \"Failed to execute 'prepend' on 'Element': parameter \" + (i + 1)\n      });\n    }\n\n    args.push(curArg);\n  }\n\n  return this[impl].prepend(...args);\n};\n\nElement.prototype.append = function append() {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  const args = [];\n\n  for (let i = 0; i < arguments.length; i++) {\n    let curArg = arguments[i];\n\n    if (isNode(curArg)) {\n      curArg = utils.implForWrapper(curArg);\n    } else {\n      curArg = conversions[\"DOMString\"](curArg, {\n        context: \"Failed to execute 'append' on 'Element': parameter \" + (i + 1)\n      });\n    }\n\n    args.push(curArg);\n  }\n\n  return this[impl].append(...args);\n};\n\nElement.prototype.querySelector = function querySelector(selectors) {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'querySelector' on 'Element': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  const args = [];\n  {\n    let curArg = arguments[0];\n    curArg = conversions[\"DOMString\"](curArg, {\n      context: \"Failed to execute 'querySelector' on 'Element': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  return utils.tryWrapperForImpl(this[impl].querySelector(...args));\n};\n\nElement.prototype.querySelectorAll = function querySelectorAll(selectors) {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'querySelectorAll' on 'Element': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  const args = [];\n  {\n    let curArg = arguments[0];\n    curArg = conversions[\"DOMString\"](curArg, {\n      context: \"Failed to execute 'querySelectorAll' on 'Element': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  return utils.tryWrapperForImpl(this[impl].querySelectorAll(...args));\n};\n\nObject.defineProperty(Element.prototype, \"namespaceURI\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"namespaceURI\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Element.prototype, \"prefix\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"prefix\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Element.prototype, \"localName\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"localName\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Element.prototype, \"tagName\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"tagName\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Element.prototype, \"id\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    const value = this.getAttribute(\"id\");\n    return value === null ? \"\" : value;\n  },\n\n  set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"DOMString\"](V, {\n      context: \"Failed to set the 'id' property on 'Element': The provided value\"\n    });\n    this.setAttribute(\"id\", V);\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Element.prototype, \"className\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    const value = this.getAttribute(\"class\");\n    return value === null ? \"\" : value;\n  },\n\n  set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"DOMString\"](V, {\n      context: \"Failed to set the 'className' property on 'Element': The provided value\"\n    });\n    this.setAttribute(\"class\", V);\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Element.prototype, \"classList\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.getSameObject(this, \"classList\", () => {\n      return utils.tryWrapperForImpl(this[impl][\"classList\"]);\n    });\n  },\n\n  set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    this.classList.value = V;\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Element.prototype, \"attributes\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.getSameObject(this, \"attributes\", () => {\n      return utils.tryWrapperForImpl(this[impl][\"attributes\"]);\n    });\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Element.prototype, \"innerHTML\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"innerHTML\"];\n  },\n\n  set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"DOMString\"](V, {\n      context: \"Failed to set the 'innerHTML' property on 'Element': The provided value\",\n      treatNullAsEmptyString: true\n    });\n    this[impl][\"innerHTML\"] = V;\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Element.prototype, \"outerHTML\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"outerHTML\"];\n  },\n\n  set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"DOMString\"](V, {\n      context: \"Failed to set the 'outerHTML' property on 'Element': The provided value\",\n      treatNullAsEmptyString: true\n    });\n    this[impl][\"outerHTML\"] = V;\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Element.prototype, \"scrollTop\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"scrollTop\"];\n  },\n\n  set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"unrestricted double\"](V, {\n      context: \"Failed to set the 'scrollTop' property on 'Element': The provided value\"\n    });\n    this[impl][\"scrollTop\"] = V;\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Element.prototype, \"scrollLeft\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"scrollLeft\"];\n  },\n\n  set(V) {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    V = conversions[\"unrestricted double\"](V, {\n      context: \"Failed to set the 'scrollLeft' property on 'Element': The provided value\"\n    });\n    this[impl][\"scrollLeft\"] = V;\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Element.prototype, \"scrollWidth\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"scrollWidth\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Element.prototype, \"scrollHeight\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"scrollHeight\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Element.prototype, \"clientTop\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"clientTop\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Element.prototype, \"clientLeft\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"clientLeft\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Element.prototype, \"clientWidth\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"clientWidth\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Element.prototype, \"clientHeight\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"clientHeight\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Element.prototype, \"previousElementSibling\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"previousElementSibling\"]);\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Element.prototype, \"nextElementSibling\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"nextElementSibling\"]);\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Element.prototype, \"children\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.getSameObject(this, \"children\", () => {\n      return utils.tryWrapperForImpl(this[impl][\"children\"]);\n    });\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Element.prototype, \"firstElementChild\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"firstElementChild\"]);\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Element.prototype, \"lastElementChild\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"lastElementChild\"]);\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Element.prototype, \"childElementCount\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"childElementCount\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Element.prototype, Symbol.toStringTag, {\n  value: \"Element\",\n  writable: false,\n  enumerable: false,\n  configurable: true\n});\nconst iface = {\n  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`\n  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as\n  // implementing this mixin interface.\n  _mixedIntoPredicates: [],\n\n  is(obj) {\n    if (obj) {\n      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {\n        return true;\n      }\n\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(obj)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n\n  isImpl(obj) {\n    if (obj) {\n      if (obj instanceof Impl.implementation) {\n        return true;\n      }\n\n      const wrapper = utils.wrapperForImpl(obj);\n\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(wrapper)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n\n  convert(obj, {\n    context = \"The provided value\"\n  } = {}) {\n    if (module.exports.is(obj)) {\n      return utils.implForWrapper(obj);\n    }\n\n    throw new TypeError(\"\".concat(context, \" is not of type 'Element'.\"));\n  },\n\n  create(constructorArgs, privateData) {\n    let obj = Object.create(Element.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n\n  createImpl(constructorArgs, privateData) {\n    let obj = Object.create(Element.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return utils.implForWrapper(obj);\n  },\n\n  _internalSetup(obj) {\n    Node._internalSetup(obj);\n  },\n\n  setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n    privateData.wrapper = obj;\n\n    this._internalSetup(obj);\n\n    Object.defineProperty(obj, impl, {\n      value: new Impl.implementation(constructorArgs, privateData),\n      writable: false,\n      enumerable: false,\n      configurable: true\n    });\n    obj[impl][utils.wrapperSymbol] = obj;\n\n    if (Impl.init) {\n      Impl.init(obj[impl], privateData);\n    }\n\n    return obj;\n  },\n\n  interface: Element,\n  expose: {\n    Window: {\n      Element\n    }\n  }\n}; // iface\n\nmodule.exports = iface;\n\nChildNode._mixedIntoPredicates.push(module.exports.is);\n\nNonDocumentTypeChildNode._mixedIntoPredicates.push(module.exports.is);\n\nParentNode._mixedIntoPredicates.push(module.exports.is);\n\nconst Impl = require(\"../nodes/Element-impl.js\");","map":null,"metadata":{},"sourceType":"script"}