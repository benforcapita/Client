{"ast":null,"code":"\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\n\nconst utils = require(\"./utils.js\");\n\nconst convertMessageEventInit = require(\"./MessageEventInit.js\").convert;\n\nconst impl = utils.implSymbol;\n\nconst Event = require(\"./Event.js\");\n\nfunction MessageEvent(type) {\n  if (new.target === undefined) {\n    throw new TypeError(\"Failed to construct 'MessageEvent'. Please use the 'new' operator; this constructor \" + \"cannot be called as a function.\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to construct 'MessageEvent': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  const args = [];\n  {\n    let curArg = arguments[0];\n    curArg = conversions[\"DOMString\"](curArg, {\n      context: \"Failed to construct 'MessageEvent': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  {\n    let curArg = arguments[1];\n    curArg = convertMessageEventInit(curArg, {\n      context: \"Failed to construct 'MessageEvent': parameter 2\"\n    });\n    args.push(curArg);\n  }\n  iface.setup(this, args);\n}\n\nObject.setPrototypeOf(MessageEvent.prototype, Event.interface.prototype);\nObject.setPrototypeOf(MessageEvent, Event.interface);\nObject.defineProperty(MessageEvent, \"prototype\", {\n  value: MessageEvent.prototype,\n  writable: false,\n  enumerable: false,\n  configurable: false\n});\n\nMessageEvent.prototype.initMessageEvent = function initMessageEvent(type) {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to execute 'initMessageEvent' on 'MessageEvent': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n\n  const args = [];\n  {\n    let curArg = arguments[0];\n    curArg = conversions[\"DOMString\"](curArg, {\n      context: \"Failed to execute 'initMessageEvent' on 'MessageEvent': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  {\n    let curArg = arguments[1];\n\n    if (curArg !== undefined) {\n      curArg = conversions[\"boolean\"](curArg, {\n        context: \"Failed to execute 'initMessageEvent' on 'MessageEvent': parameter 2\"\n      });\n    } else {\n      curArg = false;\n    }\n\n    args.push(curArg);\n  }\n  {\n    let curArg = arguments[2];\n\n    if (curArg !== undefined) {\n      curArg = conversions[\"boolean\"](curArg, {\n        context: \"Failed to execute 'initMessageEvent' on 'MessageEvent': parameter 3\"\n      });\n    } else {\n      curArg = false;\n    }\n\n    args.push(curArg);\n  }\n  {\n    let curArg = arguments[3];\n\n    if (curArg !== undefined) {\n      curArg = conversions[\"any\"](curArg, {\n        context: \"Failed to execute 'initMessageEvent' on 'MessageEvent': parameter 4\"\n      });\n    } else {\n      curArg = null;\n    }\n\n    args.push(curArg);\n  }\n  {\n    let curArg = arguments[4];\n\n    if (curArg !== undefined) {\n      curArg = conversions[\"USVString\"](curArg, {\n        context: \"Failed to execute 'initMessageEvent' on 'MessageEvent': parameter 5\"\n      });\n    } else {\n      curArg = \"\";\n    }\n\n    args.push(curArg);\n  }\n  {\n    let curArg = arguments[5];\n\n    if (curArg !== undefined) {\n      curArg = conversions[\"DOMString\"](curArg, {\n        context: \"Failed to execute 'initMessageEvent' on 'MessageEvent': parameter 6\"\n      });\n    } else {\n      curArg = \"\";\n    }\n\n    args.push(curArg);\n  }\n  {\n    let curArg = arguments[6];\n\n    if (curArg !== undefined) {\n      if (curArg === null || curArg === undefined) {\n        curArg = null;\n      } else {\n        curArg = utils.tryImplForWrapper(curArg);\n      }\n    } else {\n      curArg = null;\n    }\n\n    args.push(curArg);\n  }\n  {\n    let curArg = arguments[7];\n\n    if (curArg !== undefined) {\n      if (!utils.isObject(curArg)) {\n        throw new TypeError(\"Failed to execute 'initMessageEvent' on 'MessageEvent': parameter 8\" + \" is not an iterable object.\");\n      } else {\n        const V = [];\n        const tmp = curArg;\n\n        for (let nextItem of tmp) {\n          nextItem = utils.tryImplForWrapper(nextItem);\n          V.push(nextItem);\n        }\n\n        curArg = V;\n      }\n    } else {\n      curArg = [];\n    }\n\n    args.push(curArg);\n  }\n  return this[impl].initMessageEvent(...args);\n};\n\nObject.defineProperty(MessageEvent.prototype, \"data\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"data\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(MessageEvent.prototype, \"origin\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"origin\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(MessageEvent.prototype, \"lastEventId\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return this[impl][\"lastEventId\"];\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(MessageEvent.prototype, \"source\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"source\"]);\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(MessageEvent.prototype, \"ports\", {\n  get() {\n    if (!this || !module.exports.is(this)) {\n      throw new TypeError(\"Illegal invocation\");\n    }\n\n    return utils.tryWrapperForImpl(this[impl][\"ports\"]);\n  },\n\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(MessageEvent.prototype, Symbol.toStringTag, {\n  value: \"MessageEvent\",\n  writable: false,\n  enumerable: false,\n  configurable: true\n});\nconst iface = {\n  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`\n  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as\n  // implementing this mixin interface.\n  _mixedIntoPredicates: [],\n\n  is(obj) {\n    if (obj) {\n      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {\n        return true;\n      }\n\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(obj)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n\n  isImpl(obj) {\n    if (obj) {\n      if (obj instanceof Impl.implementation) {\n        return true;\n      }\n\n      const wrapper = utils.wrapperForImpl(obj);\n\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(wrapper)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n\n  convert(obj, {\n    context = \"The provided value\"\n  } = {}) {\n    if (module.exports.is(obj)) {\n      return utils.implForWrapper(obj);\n    }\n\n    throw new TypeError(\"\".concat(context, \" is not of type 'MessageEvent'.\"));\n  },\n\n  create(constructorArgs, privateData) {\n    let obj = Object.create(MessageEvent.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n\n  createImpl(constructorArgs, privateData) {\n    let obj = Object.create(MessageEvent.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return utils.implForWrapper(obj);\n  },\n\n  _internalSetup(obj) {\n    Event._internalSetup(obj);\n  },\n\n  setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n    privateData.wrapper = obj;\n\n    this._internalSetup(obj);\n\n    Object.defineProperty(obj, impl, {\n      value: new Impl.implementation(constructorArgs, privateData),\n      writable: false,\n      enumerable: false,\n      configurable: true\n    });\n    obj[impl][utils.wrapperSymbol] = obj;\n\n    if (Impl.init) {\n      Impl.init(obj[impl], privateData);\n    }\n\n    return obj;\n  },\n\n  interface: MessageEvent,\n  expose: {\n    Window: {\n      MessageEvent\n    },\n    Worker: {\n      MessageEvent\n    },\n    AudioWorklet: {\n      MessageEvent\n    }\n  }\n}; // iface\n\nmodule.exports = iface;\n\nconst Impl = require(\"../events/MessageEvent-impl.js\");","map":null,"metadata":{},"sourceType":"script"}