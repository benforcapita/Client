{"ast":null,"code":"\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\n\nconst DOMException = require(\"domexception\");\n\nconst Event = require(\"../generated/Event\");\n\nconst FileList = require(\"../generated/FileList\");\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nconst idlUtils = require(\"../generated/utils\");\n\nconst DefaultConstraintValidationImpl = require(\"../constraint-validation/DefaultConstraintValidation-impl\").implementation;\n\nconst ValidityState = require(\"../generated/ValidityState\");\n\nconst _require = require(\"../../utils\"),\n      mixin = _require.mixin;\n\nconst _require2 = require(\"../helpers/internal-constants\"),\n      domSymbolTree = _require2.domSymbolTree,\n      cloningSteps = _require2.cloningSteps;\n\nconst _require3 = require(\"../helpers/traversal\"),\n      closest = _require3.closest;\n\nconst _require4 = require(\"../helpers/form-controls\"),\n      getLabelsForLabelable = _require4.getLabelsForLabelable;\n\nconst _require5 = require(\"../helpers/form-controls\"),\n      isDisabled = _require5.isDisabled,\n      isValidEmailAddress = _require5.isValidEmailAddress,\n      isValidAbsoluteURL = _require5.isValidAbsoluteURL,\n      sanitizeValueByType = _require5.sanitizeValueByType;\n\nconst _require6 = require(\"../helpers/strings\"),\n      parseFloatingPointNumber = _require6.parseFloatingPointNumber,\n      asciiCaseInsensitiveMatch = _require6.asciiCaseInsensitiveMatch,\n      splitOnCommas = _require6.splitOnCommas;\n\nconst _require7 = require(\"../helpers/dates-and-times\"),\n      parseDateString = _require7.parseDateString,\n      parseLocalDateAndTimeString = _require7.parseLocalDateAndTimeString,\n      parseMonthString = _require7.parseMonthString,\n      parseTimeString = _require7.parseTimeString,\n      parseWeekString = _require7.parseWeekString;\n\nconst filesSymbol = Symbol(\"files\");\nconst selectAllowedTypes = new Set([\"text\", \"search\", \"tel\", \"url\", \"password\", \"email\", \"date\", \"month\", \"week\", \"time\", \"datetime-local\", \"color\", \"file\", \"number\"]);\nconst variableLengthSelectionAllowedTypes = new Set([\"text\", \"search\", \"tel\", \"url\", \"password\"]);\nconst maxMinStepTypes = new Set([\"date\", \"month\", \"week\", \"time\", \"datetime-local\", \"number\", \"range\", \"datetime\"]); // https://html.spec.whatwg.org/multipage/input.html#concept-input-apply\n\nconst applicableTypesForAttribute = {\n  max: maxMinStepTypes,\n  min: maxMinStepTypes,\n  step: maxMinStepTypes,\n  pattern: new Set([\"text\", \"search\", \"tel\", \"url\", \"email\", \"password\"])\n};\n\nfunction allowSelect(type) {\n  return selectAllowedTypes.has(type.toLowerCase());\n}\n\nfunction allowVariableLengthSelection(type) {\n  return variableLengthSelectionAllowedTypes.has(type.toLowerCase());\n}\n\nconst valueAttributeDefaultMode = new Set([\"hidden\", \"submit\", \"image\", \"reset\", \"button\"]);\nconst valueAttributeDefaultOnMode = new Set([\"checkbox\", \"radio\"]);\n\nfunction valueAttributeMode(type) {\n  if (valueAttributeDefaultMode.has(type)) {\n    return \"default\";\n  }\n\n  if (valueAttributeDefaultOnMode.has(type)) {\n    return \"default/on\";\n  }\n\n  if (type === \"file\") {\n    return \"filename\";\n  }\n\n  return \"value\";\n} // Necessary because Date.UTC() treats year within [0, 99] as [1900, 1999].\n\n\nfunction getUTCMs(year, month = 1, day = 1, hour = 0, minute = 0, second = 0, millisecond = 0) {\n  if (year > 99 || year < 0) {\n    return Date.UTC(year, month - 1, day, hour, minute, second, millisecond);\n  }\n\n  const d = new Date(0);\n  d.setUTCFullYear(year);\n  d.setUTCMonth(month - 1);\n  d.setUTCDate(day);\n  d.setUTCHours(hour);\n  d.setUTCMinutes(minute);\n  d.setUTCSeconds(second, millisecond);\n  return d.valueOf();\n}\n\nconst dayOfWeekRelMondayLUT = [-1, 0, 1, 2, 3, -3, -2];\nconst convertStringToNumberByTypeMap = new Map([[// https://html.spec.whatwg.org/multipage/input.html#date-state-(type=date):concept-input-value-string-number\n\"date\", input => {\n  const date = parseDateString(input);\n\n  if (date === null) {\n    return NaN;\n  }\n\n  return getUTCMs(date.year, date.month, date.day);\n}], [// https://html.spec.whatwg.org/multipage/input.html#month-state-(type=month):concept-input-value-string-number\n\"month\", input => {\n  const date = parseMonthString(input);\n\n  if (date === null) {\n    return NaN;\n  }\n\n  return (date.year - 1970) * 12 + (date.month - 1);\n}], [// https://html.spec.whatwg.org/multipage/input.html#week-state-(type=week):concept-input-value-string-number\n\"week\", input => {\n  const date = parseWeekString(input);\n\n  if (date === null) {\n    return NaN;\n  }\n\n  const dateObj = new Date(getUTCMs(date.year)); // An HTML week starts on Monday, while 0 represents Sunday. Account for such.\n\n  const dayOfWeekRelMonday = dayOfWeekRelMondayLUT[dateObj.getUTCDay()];\n  return dateObj.setUTCDate(1 + 7 * (date.week - 1) - dayOfWeekRelMonday);\n}], [// https://html.spec.whatwg.org/multipage/input.html#time-state-(type=time):concept-input-value-string-number\n\"time\", input => {\n  const time = parseTimeString(input);\n\n  if (time === null) {\n    return NaN;\n  }\n\n  return ((time.hour * 60 + time.minute) * 60 + time.second) * 1000 + time.millisecond;\n}], [// https://html.spec.whatwg.org/multipage/input.html#local-date-and-time-state-(type=datetime-local):concept-input-value-string-number\n\"datetime-local\", input => {\n  const dateAndTime = parseLocalDateAndTimeString(input);\n\n  if (dateAndTime === null) {\n    return NaN;\n  }\n\n  const _dateAndTime$date = dateAndTime.date,\n        year = _dateAndTime$date.year,\n        month = _dateAndTime$date.month,\n        day = _dateAndTime$date.day,\n        _dateAndTime$time = dateAndTime.time,\n        hour = _dateAndTime$time.hour,\n        minute = _dateAndTime$time.minute,\n        second = _dateAndTime$time.second,\n        millisecond = _dateAndTime$time.millisecond; // Doesn't quite matter whether or not UTC is used, since the offset from 1970-01-01 local time is returned.\n\n  return getUTCMs(year, month, day, hour, minute, second, millisecond);\n}], // https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number):concept-input-value-string-number\n[\"number\", parseFloatingPointNumber], // https://html.spec.whatwg.org/multipage/input.html#range-state-(type=range):concept-input-value-string-number\n[\"range\", parseFloatingPointNumber]]);\n\nclass HTMLInputElementImpl extends HTMLElementImpl {\n  constructor(args, privateData) {\n    super(args, privateData);\n    this._selectionStart = this._selectionEnd = 0;\n    this._selectionDirection = \"none\";\n    this._value = null;\n    this._dirtyValue = false;\n    this._checkedness = false;\n    this._dirtyCheckedness = false; // This is used to implement the canceled activation steps for radio inputs:\n    // \"The canceled activation steps consist of setting the checkedness and the element's indeterminate IDL\n    // attribute back to the values they had before the pre-click activation steps were run.\"\n\n    this._preCheckedRadioState = null;\n    this.indeterminate = false;\n    this._customValidityErrorMessage = \"\";\n    this._labels = null;\n  } // https://html.spec.whatwg.org/multipage/input.html#concept-input-value-string-number\n\n\n  get _convertStringToNumber() {\n    return convertStringToNumberByTypeMap.get(this.type);\n  }\n\n  _getValue() {\n    return this._value;\n  }\n\n  _preClickActivationSteps() {\n    if (this.type === \"checkbox\") {\n      this.checked = !this.checked;\n    } else if (this.type === \"radio\") {\n      this._preCheckedRadioState = this.checked;\n      this.checked = true;\n    }\n  }\n\n  _canceledActivationSteps() {\n    if (this.type === \"checkbox\") {\n      this.checked = !this.checked;\n    } else if (this.type === \"radio\") {\n      if (this._preCheckedRadioState !== null) {\n        this.checked = this._preCheckedRadioState;\n        this._preCheckedRadioState = null;\n      }\n    }\n  }\n\n  _activationBehavior() {\n    if (isDisabled(this)) {\n      return;\n    }\n\n    if (this.type === \"checkbox\" || this.type === \"radio\" && !this._preCheckedRadioState) {\n      const inputEvent = Event.createImpl([\"input\", {\n        isTrusted: true,\n        bubbles: true,\n        cancelable: true\n      }], {});\n      this.dispatchEvent(inputEvent);\n      const changeEvent = Event.createImpl([\"change\", {\n        bubbles: true,\n        cancelable: true\n      }], {});\n      this.dispatchEvent(changeEvent);\n    } else if (this.type === \"submit\") {\n      const form = this.form;\n\n      if (form) {\n        form._doSubmit();\n      }\n    }\n  }\n\n  _attrModified(name) {\n    const wrapper = idlUtils.wrapperForImpl(this);\n\n    if (!this._dirtyValue && name === \"value\") {\n      this._value = sanitizeValueByType(this, wrapper.defaultValue);\n    }\n\n    if (!this._dirtyCheckedness && name === \"checked\") {\n      this._checkedness = wrapper.defaultChecked;\n\n      if (this._checkedness) {\n        this._removeOtherRadioCheckedness();\n      }\n    }\n\n    if (name === \"name\" || name === \"type\") {\n      if (this._checkedness) {\n        this._removeOtherRadioCheckedness();\n      }\n    }\n\n    super._attrModified.apply(this, arguments);\n  }\n\n  _formReset() {\n    const wrapper = idlUtils.wrapperForImpl(this);\n    this._value = sanitizeValueByType(this, wrapper.defaultValue);\n    this._dirtyValue = false;\n    this._checkedness = wrapper.defaultChecked;\n    this._dirtyCheckedness = false;\n\n    if (this._checkedness) {\n      this._removeOtherRadioCheckedness();\n    }\n  }\n\n  _changedFormOwner() {\n    if (this._checkedness) {\n      this._removeOtherRadioCheckedness();\n    }\n  }\n\n  get _otherRadioGroupElements() {\n    const wrapper = idlUtils.wrapperForImpl(this);\n    const root = this._radioButtonGroupRoot;\n\n    if (!root) {\n      return [];\n    }\n\n    const result = [];\n    const name = wrapper.name.toLowerCase();\n    const descendants = domSymbolTree.treeIterator(root);\n\n    for (const candidate of descendants) {\n      if (candidate._radioButtonGroupRoot !== root) {\n        continue;\n      }\n\n      const candidateWrapper = idlUtils.wrapperForImpl(candidate);\n\n      if (!candidateWrapper.name || candidateWrapper.name.toLowerCase() !== name) {\n        continue;\n      }\n\n      if (candidate !== this) {\n        result.push(candidate);\n      }\n    }\n\n    return result;\n  }\n\n  _removeOtherRadioCheckedness() {\n    for (const radioGroupElement of this._otherRadioGroupElements) {\n      radioGroupElement._checkedness = false;\n    }\n  }\n\n  get _radioButtonGroupRoot() {\n    const wrapper = idlUtils.wrapperForImpl(this);\n\n    if (this.type !== \"radio\" || !wrapper.name) {\n      return null;\n    }\n\n    let e = domSymbolTree.parent(this);\n\n    while (e) {\n      // root node of this home sub tree\n      // or the form element we belong to\n      if (!domSymbolTree.parent(e) || e.nodeName.toUpperCase() === \"FORM\") {\n        return e;\n      }\n\n      e = domSymbolTree.parent(e);\n    }\n\n    return null;\n  }\n\n  _isRadioGroupChecked() {\n    if (this.checked) {\n      return true;\n    }\n\n    return this._otherRadioGroupElements.some(radioGroupElement => radioGroupElement.checked);\n  }\n\n  get labels() {\n    return getLabelsForLabelable(this);\n  }\n\n  get form() {\n    return closest(this, \"form\");\n  }\n\n  get checked() {\n    return this._checkedness;\n  }\n\n  set checked(checked) {\n    this._checkedness = Boolean(checked);\n    this._dirtyCheckedness = true;\n\n    if (this._checkedness) {\n      this._removeOtherRadioCheckedness();\n    }\n  }\n\n  get value() {\n    switch (valueAttributeMode(this.type)) {\n      // https://html.spec.whatwg.org/multipage/input.html#dom-input-value-value\n      case \"value\":\n        return this._value !== null ? this._value : \"\";\n      // https://html.spec.whatwg.org/multipage/input.html#dom-input-value-default\n\n      case \"default\":\n        {\n          const attr = this.getAttribute(\"value\");\n          return attr !== null ? attr : \"\";\n        }\n      // https://html.spec.whatwg.org/multipage/input.html#dom-input-value-default-on\n\n      case \"default/on\":\n        {\n          const attr = this.getAttribute(\"value\");\n          return attr !== null ? attr : \"on\";\n        }\n      // https://html.spec.whatwg.org/multipage/input.html#dom-input-value-filename\n\n      case \"filename\":\n        return this.files.length ? \"C:\\\\fakepath\\\\\" + this.files[0].name : \"\";\n\n      default:\n        throw new Error(\"jsdom internal error: unknown value attribute mode\");\n    }\n  }\n\n  set value(val) {\n    switch (valueAttributeMode(this.type)) {\n      // https://html.spec.whatwg.org/multipage/input.html#dom-input-value-value\n      case \"value\":\n        {\n          const oldValue = this._value;\n\n          if (val === null) {\n            this._value = null;\n          } else {\n            this._value = sanitizeValueByType(this, String(val));\n          }\n\n          this._dirtyValue = true;\n\n          if (oldValue !== this._value) {\n            this._selectionStart = 0;\n            this._selectionEnd = 0;\n            this._selectionDirection = \"none\";\n          }\n\n          break;\n        }\n      // https://html.spec.whatwg.org/multipage/input.html#dom-input-value-default\n      // https://html.spec.whatwg.org/multipage/input.html#dom-input-value-default-on\n\n      case \"default\":\n      case \"default/on\":\n        this.setAttribute(\"value\", val);\n        break;\n      // https://html.spec.whatwg.org/multipage/input.html#dom-input-value-filename\n\n      case \"filename\":\n        if (val === \"\") {\n          this.files.length = 0;\n        } else {\n          throw new DOMException(\"This input element accepts a filename, which may only be programmatically set to \" + \"the empty string.\", \"InvalidStateError\");\n        }\n\n        break;\n\n      default:\n        throw new Error(\"jsdom internal error: unknown value attribute mode\");\n    }\n  }\n\n  get files() {\n    if (this.type === \"file\") {\n      this[filesSymbol] = this[filesSymbol] || FileList.createImpl();\n    } else {\n      this[filesSymbol] = null;\n    }\n\n    return this[filesSymbol];\n  }\n\n  set files(value) {\n    if (this.type === \"file\" && value !== null) {\n      this[filesSymbol] = value;\n    }\n  }\n\n  get type() {\n    const type = this.getAttribute(\"type\");\n    return type ? type.toLowerCase() : \"text\";\n  }\n\n  set type(type) {\n    this.setAttribute(\"type\", type);\n  }\n\n  _dispatchSelectEvent() {\n    const event = this._ownerDocument.createEvent(\"HTMLEvents\");\n\n    event.initEvent(\"select\", true, true);\n    this.dispatchEvent(event);\n  }\n\n  _getValueLength() {\n    return typeof this.value === \"string\" ? this.value.length : 0;\n  }\n\n  select() {\n    if (!allowSelect(this.type)) {\n      return;\n    }\n\n    this._selectionStart = 0;\n    this._selectionEnd = this._getValueLength();\n    this._selectionDirection = \"none\";\n\n    this._dispatchSelectEvent();\n  }\n\n  get selectionStart() {\n    if (!allowVariableLengthSelection(this.type)) {\n      return null;\n    }\n\n    return this._selectionStart;\n  }\n\n  set selectionStart(start) {\n    if (!allowVariableLengthSelection(this.type)) {\n      throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n    }\n\n    this.setSelectionRange(start, Math.max(start, this._selectionEnd), this._selectionDirection);\n  }\n\n  get selectionEnd() {\n    if (!allowVariableLengthSelection(this.type)) {\n      return null;\n    }\n\n    return this._selectionEnd;\n  }\n\n  set selectionEnd(end) {\n    if (!allowVariableLengthSelection(this.type)) {\n      throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n    }\n\n    this.setSelectionRange(this._selectionStart, end, this._selectionDirection);\n  }\n\n  get selectionDirection() {\n    if (!allowVariableLengthSelection(this.type)) {\n      return null;\n    }\n\n    return this._selectionDirection;\n  }\n\n  set selectionDirection(dir) {\n    if (!allowVariableLengthSelection(this.type)) {\n      throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n    }\n\n    this.setSelectionRange(this._selectionStart, this._selectionEnd, dir);\n  }\n\n  setSelectionRange(start, end, dir) {\n    if (!allowVariableLengthSelection(this.type)) {\n      throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n    }\n\n    this._selectionEnd = Math.min(end, this._getValueLength());\n    this._selectionStart = Math.min(start, this._selectionEnd);\n    this._selectionDirection = dir === \"forward\" || dir === \"backward\" ? dir : \"none\";\n\n    this._dispatchSelectEvent();\n  }\n\n  setRangeText(repl, start, end, selectionMode = \"preserve\") {\n    if (!allowVariableLengthSelection(this.type)) {\n      throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n    }\n\n    if (arguments.length < 2) {\n      start = this._selectionStart;\n      end = this._selectionEnd;\n    } else if (start > end) {\n      throw new DOMException(\"The index is not in the allowed range.\", \"IndexSizeError\");\n    }\n\n    start = Math.min(start, this._getValueLength());\n    end = Math.min(end, this._getValueLength());\n    const val = this.value;\n    let selStart = this._selectionStart;\n    let selEnd = this._selectionEnd;\n    this.value = val.slice(0, start) + repl + val.slice(end);\n    const newEnd = start + this.value.length;\n\n    if (selectionMode === \"select\") {\n      this.setSelectionRange(start, newEnd);\n    } else if (selectionMode === \"start\") {\n      this.setSelectionRange(start, start);\n    } else if (selectionMode === \"end\") {\n      this.setSelectionRange(newEnd, newEnd);\n    } else {\n      // preserve\n      const delta = repl.length - (end - start);\n\n      if (selStart > end) {\n        selStart += delta;\n      } else if (selStart > start) {\n        selStart = start;\n      }\n\n      if (selEnd > end) {\n        selEnd += delta;\n      } else if (selEnd > start) {\n        selEnd = newEnd;\n      }\n\n      this.setSelectionRange(selStart, selEnd);\n    }\n  }\n\n  set maxLength(value) {\n    if (value < 0) {\n      throw new DOMException(\"The index is not in the allowed range.\", \"IndexSizeError\");\n    }\n\n    this.setAttribute(\"maxlength\", String(value));\n  }\n\n  get maxLength() {\n    if (!this.hasAttribute(\"maxlength\")) {\n      return 524288; // stole this from chrome\n    }\n\n    return parseInt(this.getAttribute(\"maxlength\"));\n  }\n\n  set minLength(value) {\n    if (value < 0) {\n      throw new DOMException(\"The index is not in the allowed range.\", \"IndexSizeError\");\n    }\n\n    this.setAttribute(\"minlength\", String(value));\n  }\n\n  get minLength() {\n    if (!this.hasAttribute(\"minlength\")) {\n      return 0;\n    }\n\n    return parseInt(this.getAttribute(\"minlength\"));\n  }\n\n  get size() {\n    if (!this.hasAttribute(\"size\")) {\n      return 20;\n    }\n\n    return parseInt(this.getAttribute(\"size\"));\n  }\n\n  set size(value) {\n    if (value <= 0) {\n      throw new DOMException(\"The index is not in the allowed range.\", \"IndexSizeError\");\n    }\n\n    this.setAttribute(\"size\", String(value));\n  }\n\n  get src() {\n    return conversions.USVString(this.getAttribute(\"src\"));\n  }\n\n  set src(value) {\n    this.setAttribute(\"src\", value);\n  } // https://html.spec.whatwg.org/multipage/input.html#the-min-and-max-attributes\n\n\n  get _minimum() {\n    let min = this._defaultMinimum;\n    const attr = this.getAttribute(\"min\");\n    const convertStringToNumber = this._convertStringToNumber;\n\n    if (attr !== null && convertStringToNumber !== undefined) {\n      const parsed = convertStringToNumber(attr);\n\n      if (!isNaN(parsed)) {\n        min = parsed;\n      }\n    }\n\n    return min;\n  }\n\n  get _maximum() {\n    let max = this._defaultMaximum;\n    const attr = this.getAttribute(\"max\");\n    const convertStringToNumber = this._convertStringToNumber;\n\n    if (attr !== null && convertStringToNumber !== undefined) {\n      const parsed = convertStringToNumber(attr);\n\n      if (!isNaN(parsed)) {\n        max = parsed;\n      }\n    }\n\n    return max;\n  }\n\n  get _defaultMinimum() {\n    if (this.type === \"range\") {\n      return 0;\n    }\n\n    return null;\n  }\n\n  get _defaultMaximum() {\n    if (this.type === \"range\") {\n      return 100;\n    }\n\n    return null;\n  }\n\n  get _parsedValue() {\n    const converter = this._convertStringToNumber;\n\n    if (converter !== undefined) {\n      return converter(this.value);\n    }\n\n    return this.value;\n  } // https://html.spec.whatwg.org/multipage/input.html#attr-input-step\n\n\n  get _step() {\n    let step = this._defaultStep;\n\n    if (this.hasAttribute(\"step\") && !asciiCaseInsensitiveMatch(this.getAttribute(\"step\"), \"any\")) {\n      const parsedStep = parseFloatingPointNumber(this.getAttribute(\"step\"));\n\n      if (!isNaN(parsedStep) && parsedStep > 0) {\n        step = parsedStep;\n      }\n    }\n\n    return step;\n  } // https://html.spec.whatwg.org/multipage/input.html#concept-input-step-scale\n\n\n  get _stepScaleFactor() {\n    const dayInMilliseconds = 24 * 60 * 60 * 1000;\n\n    switch (this.type) {\n      case \"week\":\n        return 7 * dayInMilliseconds;\n\n      case \"date\":\n        return dayInMilliseconds;\n\n      case \"datetime-local\":\n      case \"datetime\":\n      case \"time\":\n        return 1000;\n    }\n\n    return 1;\n  } // https://html.spec.whatwg.org/multipage/input.html#concept-input-step-default\n\n\n  get _defaultStep() {\n    if (this.type === \"datetime-local\" || this.type === \"datetime\" || this.type === \"time\") {\n      return 60;\n    }\n\n    return 1;\n  } // https://html.spec.whatwg.org/multipage/input.html#concept-input-min-zero\n\n\n  get _stepBase() {\n    const parseAttribute = attributeName => parseFloatingPointNumber(this.getAttribute(attributeName));\n\n    if (this.hasAttribute(\"min\")) {\n      const min = parseAttribute(\"min\");\n\n      if (!isNaN(min)) {\n        return min;\n      }\n    }\n\n    if (this.hasAttribute(\"value\")) {\n      const value = parseAttribute(\"value\");\n\n      if (!isNaN(value)) {\n        return value;\n      }\n    }\n\n    return this._defaultStepBase;\n  } // https://html.spec.whatwg.org/multipage/input.html#concept-input-step-default-base\n\n\n  get _defaultStepBase() {\n    if (this.type === \"week\") {\n      // The start of week 1970-W01\n      return 259200000;\n    }\n\n    return 0;\n  }\n\n  _attributeApplies(attribute) {\n    return applicableTypesForAttribute[attribute].has(this.type);\n  }\n\n  _barredFromConstraintValidationSpecialization() {\n    // https://html.spec.whatwg.org/multipage/input.html#hidden-state-(type=hidden)\n    // https://html.spec.whatwg.org/multipage/input.html#reset-button-state-(type=reset)\n    // https://html.spec.whatwg.org/multipage/input.html#button-state-(type=button)\n    const willNotValidateTypes = new Set([\"hidden\", \"reset\", \"button\"]); // https://html.spec.whatwg.org/multipage/input.html#attr-input-readonly\n\n    const readOnly = this.hasAttribute(\"readonly\"); // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#attr-fe-disabled\n\n    return willNotValidateTypes.has(this.type) || readOnly;\n  }\n\n  get validity() {\n    if (!this._validity) {\n      this._validity = ValidityState.createImpl(this, {\n        // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#suffering-from-being-missing\n        valueMissing: () => {\n          if (!this.hasAttribute(\"required\")) {\n            return false;\n          }\n\n          if (this.type === \"checkbox\") {\n            // https://html.spec.whatwg.org/multipage/input.html#checkbox-state-(type=checkbox)\n            // Constraint validation: If the element is required and its checkedness is\n            // false, then the element is suffering from being missing.\n            return !this.checked;\n          } else if (this.type === \"radio\") {\n            // https://html.spec.whatwg.org/multipage/input.html#radio-button-state-(type=radio)\n            // Constraint validation: If an element in the radio button group is required,\n            // and all of the input elements in the radio button group have a checkedness\n            // that is false, then the element is suffering from being missing.\n            return !this._isRadioGroupChecked();\n          }\n\n          return this.value === \"\";\n        },\n        // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#suffering-from-being-too-long\n        // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#attr-fe-maxlength\n        // jsdom has no way at the moment to emulate a user interaction, so tooLong/tooShort have\n        // to be set to false.\n        tooLong: () => false,\n        // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#suffering-from-being-too-short\n        // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#attr-fe-minlength\n        tooShort: () => false,\n        // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#suffering-from-an-overflow\n        // https://html.spec.whatwg.org/multipage/input.html#attr-input-max\n        rangeOverflow: () => this._attributeApplies(\"max\") && this._maximum !== null && this._parsedValue > this._maximum,\n        // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#suffering-from-an-underflow\n        // https://html.spec.whatwg.org/multipage/input.html#attr-input-min\n        rangeUnderflow: () => this._attributeApplies(\"min\") && this._minimum !== null && this._parsedValue < this._minimum,\n        // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#suffering-from-a-pattern-mismatch\n        patternMismatch: () => {\n          if (!this.hasAttribute(\"pattern\") || !this._attributeApplies(\"pattern\") || this.value === \"\") {\n            return false;\n          }\n\n          let regExp;\n\n          try {\n            regExp = new RegExp(this.getAttribute(\"pattern\"), \"u\");\n          } catch (e) {\n            return false;\n          }\n\n          if (this.type === \"email\" && this.hasAttribute(\"multiple\")) {\n            return splitOnCommas(this.value).every(value => regExp.test(value));\n          }\n\n          return !regExp.test(this.value);\n        },\n        // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#suffering-from-a-step-mismatch\n        // https://html.spec.whatwg.org/multipage/input.html#attr-input-step\n        stepMismatch: () => {\n          // Constraint validation: When the element has an allowed value step, and the result of applying\n          // the algorithm to convert a string to a number to the string given by the element's value is a\n          // number, and that number subtracted from the step base is not an integral multiple of the\n          // allowed value step, the element is suffering from a step mismatch.\n          if (!this._attributeApplies(\"step\")) {\n            return false;\n          }\n\n          const step = parseFloatingPointNumber(this.getAttribute(\"step\"));\n\n          if (isNaN(step) || step <= 0) {\n            return false;\n          }\n\n          let number = this._parsedValue;\n\n          if (isNaN(number) || this.value === \"\") {\n            return false;\n          }\n\n          if (this._type === \"month\") {\n            number = parseMonthString(this.value).month - 1;\n          }\n\n          return number % (this._stepBase - this._step * this._stepScaleFactor) !== 0;\n        },\n        // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#suffering-from-a-type-mismatch\n        typeMismatch: () => {\n          if (this.value === \"\") {\n            return false;\n          }\n\n          if (this.type === \"email\") {\n            // https://html.spec.whatwg.org/multipage/input.html#e-mail-state-(type=email)\n            // Constraint validation [multiple=false]: While the value of the element is neither the empty\n            // string nor a single valid e - mail address, the element is suffering from a type mismatch.\n            // Constraint validation [multiple=true]: While the value of the element is not a valid e-mail address list,\n            // the element is suffering from a type mismatch.\n            return !isValidEmailAddress(this.value, this.hasAttribute(\"multiple\"));\n          } else if (this.type === \"url\") {\n            // https://html.spec.whatwg.org/multipage/input.html#url-state-(type=url)\n            // Constraint validation: While the value of the element is neither the empty string\n            // nor a valid absolute URL, the element is suffering from a type mismatch.\n            return !isValidAbsoluteURL(this.value);\n          }\n\n          return false;\n        }\n      });\n    }\n\n    return this._validity;\n  }\n\n  [cloningSteps](copy, node) {\n    copy._value = node._value;\n    copy._checkedness = node._checkedness;\n    copy._dirtyValue = node._dirtyValue;\n    copy._dirtyCheckedness = node._dirtyCheckedness;\n  }\n\n}\n\nmixin(HTMLInputElementImpl.prototype, DefaultConstraintValidationImpl.prototype);\nmodule.exports = {\n  implementation: HTMLInputElementImpl\n};","map":null,"metadata":{},"sourceType":"script"}