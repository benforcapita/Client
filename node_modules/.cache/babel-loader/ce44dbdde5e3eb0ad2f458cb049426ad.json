{"ast":null,"code":"\"use strict\";\n\nconst idlUtils = require(\"../generated/utils.js\");\n\nconst _require = require(\"../helpers/namespaces\"),\n      HTML_NS = _require.HTML_NS;\n\nexports.implementation = class HTMLCollectionImpl {\n  constructor(args, privateData) {\n    this._list = [];\n    this._version = -1;\n    this._element = privateData.element;\n    this._query = privateData.query;\n\n    this._update();\n  }\n\n  get length() {\n    this._update();\n\n    return this._list.length;\n  }\n\n  item(index) {\n    this._update();\n\n    return this._list[index] || null;\n  }\n\n  namedItem(key) {\n    if (key === \"\") {\n      return null;\n    }\n\n    this._update();\n\n    for (const element of this._list) {\n      if (element.getAttribute(\"id\") === key) {\n        return element;\n      }\n\n      if (element._namespaceURI === HTML_NS) {\n        const name = element.getAttribute(\"name\");\n\n        if (name === key) {\n          return element;\n        }\n      }\n    }\n\n    return null;\n  }\n\n  _update() {\n    if (this._version < this._element._version) {\n      const snapshot = this._query();\n\n      for (let i = 0; i < snapshot.length; i++) {\n        this._list[i] = snapshot[i];\n      }\n\n      this._list.length = snapshot.length;\n      this._version = this._element._version;\n    }\n  }\n\n  get [idlUtils.supportedPropertyIndices]() {\n    this._update();\n\n    return this._list.keys();\n  }\n\n  get [idlUtils.supportedPropertyNames]() {\n    this._update();\n\n    const result = new Set();\n\n    for (const element of this._list) {\n      const id = element.getAttribute(\"id\");\n\n      if (id) {\n        result.add(id);\n      }\n\n      if (element._namespaceURI === HTML_NS) {\n        const name = element.getAttribute(\"name\");\n\n        if (name) {\n          result.add(name);\n        }\n      }\n    }\n\n    return result;\n  } // Inherit some useful functions from Array.\n\n\n  [Symbol.iterator]() {\n    this._update();\n\n    return this._list[Symbol.iterator]();\n  }\n\n  entries() {\n    this._update();\n\n    return this._list.entries();\n  }\n\n  filter(...args) {\n    this._update();\n\n    return this._list.filter(...args);\n  }\n\n  map(...args) {\n    this._update();\n\n    return this._list.map(...args);\n  }\n\n  indexOf(...args) {\n    this._update();\n\n    return this._list.indexOf(...args);\n  }\n\n};","map":null,"metadata":{},"sourceType":"script"}