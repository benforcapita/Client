{"ast":null,"code":"\"use strict\";\n\nconst _require = require(\"../helpers/create-event-accessor\"),\n      appendHandler = _require.appendHandler,\n      createEventAccessor = _require.createEventAccessor;\n\nconst events = new Set([\"abort\", \"autocomplete\", \"autocompleteerror\", \"blur\", \"cancel\", \"canplay\", \"canplaythrough\", \"change\", \"click\", \"close\", \"contextmenu\", \"cuechange\", \"dblclick\", \"drag\", \"dragend\", \"dragenter\", \"dragexit\", \"dragleave\", \"dragover\", \"dragstart\", \"drop\", \"durationchange\", \"emptied\", \"ended\", \"error\", \"focus\", \"input\", \"invalid\", \"keydown\", \"keypress\", \"keyup\", \"load\", \"loadeddata\", \"loadedmetadata\", \"loadstart\", \"mousedown\", \"mouseenter\", \"mouseleave\", \"mousemove\", \"mouseout\", \"mouseover\", \"mouseup\", \"wheel\", \"pause\", \"play\", \"playing\", \"progress\", \"ratechange\", \"reset\", \"resize\", \"scroll\", \"securitypolicyviolation\", \"seeked\", \"seeking\", \"select\", \"sort\", \"stalled\", \"submit\", \"suspend\", \"timeupdate\", \"toggle\", \"volumechange\", \"waiting\"]);\n\nclass GlobalEventHandlersImpl {\n  _initGlobalEvents() {\n    this._registeredHandlers = new Set();\n    this._eventHandlers = Object.create(null);\n  }\n\n  _getEventHandlerTarget() {\n    return this;\n  }\n\n  _getEventHandlerFor(event) {\n    const target = this._getEventHandlerTarget(event);\n\n    if (!target) {\n      return null;\n    }\n\n    return target._eventHandlers[event];\n  }\n\n  _setEventHandlerFor(event, handler) {\n    const target = this._getEventHandlerTarget(event);\n\n    if (!target) {\n      return;\n    }\n\n    if (!target._registeredHandlers.has(event) && handler !== null) {\n      target._registeredHandlers.add(event);\n\n      appendHandler(target, event);\n    }\n\n    target._eventHandlers[event] = handler;\n  }\n\n  _globalEventChanged(event) {\n    const propName = \"on\" + event;\n\n    if (!(propName in this)) {\n      return;\n    } // Only translate attribute changes into properties when runScripts: \"dangerously\" is set.\n    // Documents without a browsing context (i.e. without a _defaultView) never run scripts.\n\n\n    const runScripts = \"_runScripts\" in this ? this._runScripts : (this._ownerDocument._defaultView || {})._runScripts;\n\n    if (runScripts !== \"dangerously\") {\n      return;\n    }\n\n    const val = this.getAttribute(propName);\n    const handler = val === null ? null : {\n      body: val\n    };\n\n    this._setEventHandlerFor(event, handler);\n  }\n\n}\n\nfor (const event of events) {\n  createEventAccessor(GlobalEventHandlersImpl.prototype, event);\n}\n\nmodule.exports = {\n  implementation: GlobalEventHandlersImpl\n};","map":null,"metadata":{},"sourceType":"script"}