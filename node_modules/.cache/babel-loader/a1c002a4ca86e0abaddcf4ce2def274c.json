{"ast":null,"code":"\"use strict\";\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nconst _require = require(\"../helpers/strings\"),\n      stripAndCollapseASCIIWhitespace = _require.stripAndCollapseASCIIWhitespace;\n\nconst _require2 = require(\"../helpers/internal-constants\"),\n      domSymbolTree = _require2.domSymbolTree;\n\nconst _require3 = require(\"../helpers/traversal\"),\n      closest = _require3.closest;\n\nclass HTMLOptionElementImpl extends HTMLElementImpl {\n  constructor(args, privateData) {\n    super(args, privateData); // whenever selectedness is set to true, make sure all\n    // other options set selectedness to false\n\n    this._selectedness = false;\n    this._dirtyness = false;\n  }\n\n  _removeOtherSelectedness() {\n    // Remove the selectedness flag from all other options in this select\n    const select = this._selectNode;\n\n    if (select && !select.hasAttribute(\"multiple\")) {\n      for (const option of select.options) {\n        if (option !== this) {\n          option._selectedness = false;\n        }\n      }\n    }\n  }\n\n  _askForAReset() {\n    const select = this._selectNode;\n\n    if (select) {\n      select._askedForAReset();\n    }\n  }\n\n  _attrModified(name) {\n    if (!this._dirtyness && name === \"selected\") {\n      this._selectedness = this.hasAttribute(\"selected\");\n\n      if (this._selectedness) {\n        this._removeOtherSelectedness();\n      }\n\n      this._askForAReset();\n    }\n\n    super._attrModified.apply(this, arguments);\n  }\n\n  get _selectNode() {\n    let select = domSymbolTree.parent(this);\n\n    if (!select) {\n      return null;\n    }\n\n    if (select.nodeName.toUpperCase() !== \"SELECT\") {\n      select = domSymbolTree.parent(select);\n\n      if (!select || select.nodeName.toUpperCase() !== \"SELECT\") {\n        return null;\n      }\n    }\n\n    return select;\n  }\n\n  get form() {\n    return closest(this, \"form\");\n  }\n\n  get text() {\n    // TODO is not correctly excluding script and SVG script descendants\n    return stripAndCollapseASCIIWhitespace(this.textContent);\n  }\n\n  set text(V) {\n    this.textContent = V;\n  }\n\n  get value() {\n    return this.hasAttribute(\"value\") ? this.getAttribute(\"value\") : this.text;\n  }\n\n  set value(val) {\n    this.setAttribute(\"value\", val);\n  }\n\n  get index() {\n    const select = closest(this, \"select\");\n\n    if (select === null) {\n      return 0;\n    }\n\n    return select.options.indexOf(this);\n  }\n\n  get selected() {\n    return this._selectedness;\n  }\n\n  set selected(s) {\n    this._dirtyness = true;\n    this._selectedness = Boolean(s);\n\n    if (this._selectedness) {\n      this._removeOtherSelectedness();\n    }\n\n    this._askForAReset();\n  } // TODO this is quite wrong\n\n\n  get label() {\n    if (this.hasAttribute(\"label\")) {\n      return this.getAttribute(\"label\");\n    }\n\n    const select = this._selectNode;\n\n    if (select) {\n      return select.getAttribute(\"label\");\n    }\n\n    return null;\n  }\n\n  set label(V) {\n    const select = this._selectNode;\n\n    if (select) {\n      select.setAttribute(\"label\", V);\n    }\n  }\n\n}\n\nmodule.exports = {\n  implementation: HTMLOptionElementImpl\n};","map":null,"metadata":{},"sourceType":"script"}